"use strict";

var modelData;
var lastSelection;
var orderEntryUI = orderEntryUI || {};
var prepaymentEntryUI = prepaymentEntryUI || {};

var SelectedTabEnum = SelectedTabEnum || {};
var TaxClassChange = TaxClassChange || {};
var orderEntryEnum = orderEntryEnum || {};
TaxClassChange = {
    TaxClass: 1,
    TaxInclude: 2,
    TaxAmount: 3,
    TaxBase: 4,
    TaxReportAmt: 5
};
orderEntryEnum.optionalFieldType = {
    Header: 0,
    LineDetail: 1,
    
};
orderEntryEnum.BankTransactionStatus = {
    NotPosted: 1,
    PartiallyOutstanding: 2
};
orderEntryEnum.HaveCommentInst = {
    No: 0, Yes: 1
}
orderEntryEnum.CommentType = {
    Comment: 1,
    Instruction: 2
}
orderEntryEnum.PrintSlipType = {
    None: 0,
    Order: 1,
    ShipmentPickSlip: 2,
    Invoice: 3,
    PrePayReciept: 4,
}
orderEntryEnum.PreAuthMode = {
    PreAuthorization: 1,
    Void: 2
}
orderEntryEnum.PrepaymentMode = {
    Capture: 1,
    Void: 2
}
orderEntryEnum.TransactionType = {
    PreAuthorization: 2,
    VoidPreAuth: 4,
    PreAuthPending: 12,
    VoidPreAuthPending: 14,
    None: 0,
    Sale: 1,
    VoidSale: 5,
    VoidsalePending: 15,
    Capture : 3,
}
orderEntryEnum.TransactionStatus = {
    None: 0,
    PreauthPending : 1,
    CapturePending : 2,
    VoidPending : 3,
    Success : 4,
    Captured : 5,
    Voided : 6,
    CardDeclined : 7,
    CardError : 8,
}
orderEntryEnum.ReturnStatus = {
    CardApproved: 4,
    Error: 2,
    Cancel: 3,
    Declined: 5,
    CardError:6,
};
orderEntryEnum.PreCreditCheckFormType = {
    PreCheck: 0,
    CreditApproval: 1,

};

orderEntryEnum.CreditCardChargeStatus = {    
    None : 0,
    Charged : 1,
    Voided : 2,
    Pending : 3,
    CardDeclined : 4,
    CardError : 5
};
var OrderDetailGridTypeEnum = OrderDetailGridTypeEnum || {};
OrderDetailGridTypeEnum = {
    lineTypeEnum: { Item: 1, Miscellaneous: 2 }
};
var OrderDetailItemType = OrderDetailItemType || {};

OrderDetailItemType = { Kitting: 1, BOM: 2 }
var OrderDetailGridEnum = OrderDetailGridEnum || {};

var detailItemCompleted = { No: 0, Yes: 2 ,DayEnd:3}

OrderDetailGridEnum = {
    Insert: 0,
    LineType: 3,
    QuantityOrdered: 15,
    QuantityShipped: 16,
    PriceList: 9,
    Location: 11,
    OrderUnitofMeasure: 21,
    OrderWeightUOM: 156,
    Category: 10,
    OrderUnitCost:40,
    ShipViaCode: 132,
    KitBOmNumber: 144,
    Description: 6,
    ShipViaCodeDesc: 133,
    DateRequested: 214,
    ExpectedShipmentDate: 13,
    QuantityBackordered: 17,
    UnitWeight: 48,
    ExtendedWeight: 49,
    DiscountPercent: 134,
    OrderDiscountAmount: 45,
    QuantityCommitted: 136,
    ShipmentTrackingNumber: 131,
    ManufacturersItemNumber: 137,
    CustomerItemNumber: 138,
    NonstockClearingAccount: 110,
    UseCommentsInstructions: 86,
    ExtendedAmount: 44,
    OrderUnitPrice: 23,
    DetailCompleted:50,
    None:-1



};
//var orderDetailGrid = orderDetailGrid || {};

var ItemDocumentTypeEnum = ItemDocumentTypeEnum || {};
ItemDocumentTypeEnum.DocumentType = {
    None: 0,
    QuantityonSO: 1,
    QuantityCommitted: 2,
    QuantityonPO: 3
};

//var lineTypeEnum = { Item: 1, Miscellaneous: 2 };
SelectedTabEnum = {
    OrderTab: "orderTab",
    OptionalFieldTab: "optionalFieldTab",
    TaxesTab: "taxTab",
    SalesTab: "salesTab",
    TotalsTab: "totalTab",
    RatesTab: "ratesTab",
    CustomerTab: "customerTab"
},
prepaymentEntryUI = {
    init: function () {

        prepaymentEntryUI.initTextBox();
        prepaymentEntryUI.initFinders();
        prepaymentEntryUI.initHamburger();
        prepaymentEntryUI.initButtons();
    },
    initHamburger: function () {
        //For Bank Rate
        var listBankRate = [
            sg.utls.labelMenuParams("bankRateLink", orderEntryResources.BankRate, orderEntryUI.bankRatePopup, "sagedisable: Data.disableBankRatesLink"),
        ]
        LabelMenuHelper.initialize(listBankRate, "lnkBankRate", "orderEntryUI.orderEntryModel");
    },
    initTextBox: function () {
        $("#txtPrepaymentBatchNumber").on('change', function (e) {
            var batchNumber = $("#txtPrepaymentBatchNumber").val();
            if (batchNumber) {
                orderEntryUI.prepaymentBatchNumber = batchNumber;
                sg.delayOnChange("btnFinderBatch", $("#txtPrepaymentBatchNumber"), function() {
                    orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptBatchNumber;
                    orderEntryRepository.getPrepaymentBatchData($("#txtPrepaymentBatchNumber").val(), false);
                    orderEntryUI.prepaymentPopUpClose = false;
                  
                });
                    } else {
                $("#txtPrepaymentBatchNumber").val(orderEntryUI.prepaymentBatchNumber);
            }
        });
        $("#txtPrepaymentBatchDescription").bind('change', function (e) {
            orderEntryRepository.refreshPrepaymentBatch(this.value, 4);
        });

        $("#txtPrepaymentBatchDate").bind('change', function(e) {
            var value = sg.utls.kndoUI.checkForValidDate(this.value);
            if (value != null) {
                orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptBatchDate;
                orderEntryRepository.refreshPrepaymentBatch(value, 3);
            } else {
                $("#txtPrepaymentBatchDate").val(sg.utls.kndoUI.getDate(orderEntryUI.batchDate));
                sg.controls.Focus($("#txtPrepaymentBatchDate"));
            }
        });
       
        $("#txtBankCode").bind('change', function (e) {
            sg.delayOnChange("btnBankCodeFinder", $("#txtBankCode"), function () {
                orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptBankCode;
                orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCode($("#txtBankCode").val());
                orderEntryRepository.refreshPrepaymentBatch($("#txtBankCode").val(), 9);
            });
        });
        $("#txtDefaultBankCurrency").bind('change', function (e) {
            sg.delayOnChange("btnBankCurrencyFinder", $("#txtDefaultBankCurrency"), function () {
                orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptBankCurrency;
                orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency($("#txtDefaultBankCurrency").val());
                orderEntryRepository.refreshPrepaymentBatch($("#txtDefaultBankCurrency").val(), 11);
            });
        });
        $("#txtDepositNumber").bind('change', function(e) {
            sg.delayOnChange("btnDepositNumberFinder", $("#txtDepositNumber"), function () {
                orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptDepositNumber;
                if ($("#txtDepositNumber").val() == "" || $("#txtDepositNumber").val() == null) {
                    var depositNumber = 0;
                } else {
                    depositNumber = $("#txtDepositNumber").val();
                }
                orderEntryUI.orderEntryModel.Data.OrderPrepayment.DepositNumber($("#txtDepositNumber").val());
                orderEntryRepository.refreshPrepaymentBatch(depositNumber, 16);
            });
        });
    },

    initFinders: function () {
        var batchTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ReceiptAndAdjustmentBatch);
        sg.finderHelper.setFinder("btnFinderBatch", sg.finder.ARReceiptBatchFinder, finderOnSuccess.BatchNumber, finderOnCancel.BatchNumber, batchTitle, orderEntryFilter.getBatchFilter, null, false);

        var bankCodeTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.Bank);
        sg.finderHelper.setFinder("btnBankCodeFinder", sg.finder.Banks, finderOnSuccess.BankCode, finderOnCancel.BankCode, bankCodeTitle, orderEntryFilter.getBankCodeFilter, null, true);

        var bankCurrencyTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.BankCurrency);
        sg.finderHelper.setFinder("btnBankCurrencyFinder", sg.finder.BankCurrencyCode, finderOnSuccess.BankCurrency, finderOnCancel.BankCurrency, bankCurrencyTitle, orderEntryFilter.getBankCurrencyFilter, null, true);

        var bankTransactionHeader = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.BankTransactionHeader);
        sg.finderHelper.setFinder("btnDepositNumberFinder", sg.finder.BankTransactionHeader, finderOnSuccess.BankTransactionHeader, finderOnCancel.BankTransactionHeader, bankTransactionHeader, orderEntryFilter.bankTransactionHeaderFilter, null, true);


    },
    initButtons: function () {
        $("#btnQuickPreAuth").attr("disabled", true);
        $("#btnCreateBatch").on('click', function () {
            orderEntryRepository.createNewBatch();
        });
        $("#btnGenerateDepositNumber").bind('click', function (e) {
            orderEntryRepository.generateNewDeposit();
        });
        $("#btnVoid").bind('click', function () {
            orderEntryRepository.launchPrepaymentProcessCreditCard(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment, orderEntryUI.computedProperties), orderEntryEnum.PrepaymentMode.Void);
        });
    }
};

orderEntryUI = {
    orderEntryModel: {},
    preCreditCheckModel: {},
    prepaymentModel: {},
    prepaymentBatchModel: {},
    validCurrencyCode: true,
    validBatchNumber: false,
    newPrepaymentBatchModel: {},
    receiptBatchData: {},
    preAuthorizationModel: {},
    ProcessCreditCardViewModel: {},
    computedProperties: [
        "DetailLineOptionalFieldData", "UIMode", "disableScreen", "quoteCompleted", "disable", "disableAuthorize", "entryPosted", "customerNotExists",
        "disableCustomerField", "selectedOrderDetailRow", "disableOnhold", "isOrderDisable", "disableComponentBtn", "entryNotPosted", "disableDeleteBtn",
        "disableShippAllBtn", "disableDistributeTax", "disablebtnQuickPreAuth", "disableAddMultipleQuote", "disableQuoteOrder", "isDetailCompleted", "disableDetailControls", "disablePrepaymentBtn", "disablePrepaymentCntrl",
        "disableProcessingCode", "disablePaymentCode", "disablePrepaymentSave", "disablePrepaymentDelete", "orderStatus", "IsTaxTprAmtCal", "showShipmentRate", "showInvoiceRate",
        "showTaxFields", "showTrShipmentRate", "showTrInvoiceRate", "showRatesButton", "disableRatesButton", "QtyPoVisible", "isCustomerAddVisible", "isTaxRptchkvisible",
        "isTaxRptchkvisible", "visibletaxrptbtn", "showDeriveRateButton", "InvoiceVisible", "ShipmentVisible", "FormattedOrderSubtotalAmount", "FormattedDetailDiscountTotal",
        "FormattedDocumentNetOfDetailDisc", "FormattedDetailDiscountPercentage", "FormattedOrderTotalEstWeight", "FormattedOrderTotalWithInvDisc", "FormattedOrderExclTaxTotal",
        "FormattedOrderTotal", "FormattedOrderTotalPayment", "FormattedInvoiceTotalTermsDisc", "FormattedOrderAmountDue", "FormattedOrderItemTotalAmount",
        "FormattedOrderTotalMiscCharges", "FormattedOrderDiscountBase", "FormattedOrderInclTaxTotal", "FormattedTotalTaxAmount", "FormattedTrTotaltAmt", "FormattedTrIncludedAmt",
        "FormattedTrExcludedAmt", "NotOnHold", "disableCreateInvoice", "showCreateInvoice", "PrintOrder", "PrintShipmentPickSlip",
        "PrintInvoice", "PrintPrePayReceipt", "NextPrintSlip", "disablePrintShipmentPickSlip", "disablePrintInvoice", "disablePrintPrePay", "showPrepaymentOnCurrency",
        "showProcessingCode", "FormattedPreauthAmount", "FormattedAmountDueLessCurrPrepayment", "FormattedDiscountAvailable", "FormattedShipmentTotal",
        "showPrepaymentChargeVoid", "disablePrepaymentCharge", "showPrepaymentQuickCharge", "disablePrepaymentQuickCharge", "disablePrepaymentVoid", "disableSalesSplitAddBtn", "IsMultiCurrency", "disableBankCurrency",
        "disablePreAuthExistsAndPosted", "disableDepositNumber", "disableIfCharged", "IsPreauthorizeVisible", "ShowCustomerAgedTransaction", "ShowNationalAccountAgedTransaction",
        "ShowAgedTransaction", "CustomerOrNationalAccOverLimit", "disableBankRatesLink", "showCurrency"
    ],
    ignoreIsDirtyProperties: [
       "OrderNumber", "OrderDetail", "OrderDetails", "OrderOptionalFields", "OrderDetailOptionalFields", "OrderBOMDetails",
       "OrderKittingDetails", "OrderDetailSerialNumbers", "OrderDetailLotNumbers", "commentInstructions", "OrderfromQuotes", "OrderSecurity", "entryPosted", "disableCustomerField"
    ],
    OrderNumber: null,
    hasKoBindingApplied: false,
    isKendoControlNotInitialised: false,
    UIMode: ko.observable(0),
    lastUpdatedColumn: null,
    lastUpdatedValue: null,
    controlToFocus: "#tbOrderNo",
    messageId: "#tbDateRequested",
    prepaymentLastEdited: null,
    selectedTab: null,
    taxEventType: null,
    itemNumber: null,
    location: null,
    dbName: null,
    manufactureItemNumber: null,
    documentType: null,
    lastTabSelected: SelectedTabEnum.OrderTab,
    tabChanged: false,
    batchType: "CA",
    batchStatus: "1",
    batchDate: null,
    batchRateDate: null,
    optionalFieldPopUpClose: null,
    quotePopUpClose: false,
    DetailTaxPopUpClose: null,
    preAuthorizePopUpClose: false,
    prepaymentPopUpClose: false,
    bankRatePopupClose: false,
    CommentType: null,
    changeLineNumber: null,
    TabOptionFieldLoad: false,
    HeaderOptionalFieldError: null,
    selectedOptionalField: null,
    preCreditCheckFormType: null,
    captured: false,
    displayApprovedAmount: true,
    userEnteredApprovalAmount: 0,
    batchNumber: 0,
    entryNumber: 0,
    lastActionCntl: null,
    orderUniquifier: null,
    prevPreAuthStatus: 0,
    prepaymentBatchNumber: 0,
    numberOfEntries: 0,
    kittingRefreshType: {
        WeightUnitOfMeasure: 1,
        UnitWeight: 2,
        CostingUnitCost: 3,
        ExtendedWeight: 4,
        NonstockClearingAccount: 5
    },
    kittingItemChanged: false,
    headerRefreshType: {
        orderRateDate: 1,
        trRateDate: 2,
        shipmentRateDate: 3,
        trShipmentRateDate: 4,
        inRateDate: 5,
        trInvoiceRateDate: 6,
        orRateType: 7,
        trRateType: 8,
        shipmentRateType: 9,
        trShipmentRateType: 10,
        inratetype: 11,
        trInvoiceRateType: 12,
        orderExchangeRate: 13,
        trRate: 14,
        shipmentExchangeRate: 15,
        trShipmentExchangeRate: 16,
        invoiceExchangeRate: 17,
        trInvoiceExchangeRate: 18,
        orderDiscountPercentage: 19,
        orderDiscountAmount: 20,
        noOfLabels: 21,
        shipmentNo: 22,
        discountMiscCharges: 23,
        invoiceNo: 24,
        invoiceWillBeProduced: 25,
        shipAll: 26,
        preCreditCheck: 27,
        taxGroup: 28,
        accountSet: 29,
        termsCode: 30,
        priceList: 31,
        templatecode: 32,
        shipToLoc: 33,
        Location: 34,
        ShipVia: 35,
        Customer: 36,
        ShipmentDate: 37,
        ShipmentPostingDate: 38,
        InvoiceDate: 39,
        InvoicePostingDate: 40,
        MultipleQuotes: 41,
        PerformMultipleQuotesToOrder: 42,
        OrderType: 43,
        PreauthorizationAmt: 44,
        PreAuthPaymentCode: 45,
        PreAuthProcessingCode: 46,
        CalculateTax: 50,
        onHold: 51,
        PONumber: 52,
        OrderDate: 53,
        DeliverDate: 54,
        ExpShpmentDate: 55,
        Description: 56,
        TrackingNumber: 57,
        Reference: 58,
        CustomerDiscountLevel: 59,
        QuoteExpirationDate: 60,
        PrepaymentBankRate: 61,
        PrepaymentBatchBankRate: 62,
        Prepayment: 63,
        PreAuthorize: 64,
        CreateOrderFromQuotes: 65,
        History: 66,
        ItemTax: 67,
        Components: 68,
        distributeTax: 69,
        orderNo: 70,
        PreCheck: 71,
        invoiceWillBeProducedTotal: 72,
        Refresh: 78,
        QuickPreAuth:79
    },
    prepaymentRefreshType: {
        RateType: 1,
        BankRate: 2,
        RateDate: 3,
        ReceiptType: 4,
        YpProcessCode: 5,
        ReceiptDate: 6,
        ReceiptBatchNumber: 7,
        ReceiptBatchDate: 8,
        ReceiptBankCode: 9,
        ReceiptBankCurrency: 10,
        ReceiptDepositNumber: 11,
        ReceiptRateType: 12,
        ReceiptRateDate: 13,
        ReceiptBankPopupCurrency: 14,
        BankExchangeRate: 15,
    },
    orderTypeEnum: {
        Active: 1,
        Future: 2,
        Standing: 3,
        Quote: 4
    },
    multipleQuotes: 4,
    orRate: null,
    trRate: null,
    taxGroup: null,
    shipmentRate: null,
    trShipmentRate: null,
    inRate: null,
    isOrderDetailLoad: false,
    taxamounteditable: false,
    taxrpteditable: false,
    trInvoiceRate: null,
    prepaymentBankRate: null,
    orderCurrencyDecimal: 0,
    orderPrepaymentCurrencyDecimal: 0,
    previousShipDate: null,
    previousShipPostingDate: null,
    previousInvoiceDate: null,
    prevoiusInvoicePostingDate: null,
    previousOrderDate: null,
    LineNumber: null,
    TaxReportCurryDecimal: null,
    QuantityGridId: "QuantityonSOGrid",
    disablePrepayment: null,
    NumberOfDecimalsForQty: null,
    Voided: false,
    defaultOrderPreAuthModel: {},
    init: function () {
        sg.utls.collapsibleScreen.setup("expandedEntry", "simpleEntry", ["shipmentHeader"], []);
        orderEntryUI.initTextBox();
        orderEntryUI.initTabs();
        orderEntryUI.initFinders();
        orderEntryUI.initPopUpWindows();
        orderEntryUI.initButtons();
        orderEntryUI.initNumericTextBox();
        orderEntryUI.initDropDownList();
        orderEntryUI.initHamburgers();
        orderEntryUI.initCheckBox();
        orderEntryUISuccess.initialLoad(orderEntryViewModel);
        orderEntryUI.maskPhoneNumber();
        sg.utls.kndoUI.hidePageNavigation("#OrderShipmentGrid");
        orderDetailGridUI.init();
        commentsInstructionGridUI.init();
        orderEntryUI.initDetailOptionalFields(true);

        // right before init finish, trigger click action on simple view link
        $("#simpleEntry").trigger("click");
    },
   
    quantityColumnList: {
        ExpectedShipArrivalDate: "ExpectedShippingArrivalDate",
        Location: "DocumentLocation",
        Quantity: "QtyInStockingUnit",
        DocumentNumber: "DocumentNumber",
        Date: "DocumentDate",
        CustVendorNumber: "CustomerVendorNumber",
        CustVendorName: "CustomerVendorName",
    },
    changeGridHeaderTitle: function (column, title,gridId) {
        $('#' + gridId+ "th[data-field=" + column + "]").html(title);
    },
    RenameGridColumns: function (fieldNames, fieldTitles,gridId) {
        var grid = $('#' + gridId).data("kendoGrid");

        if (grid != undefined) {
            var gridId = grid.element.attr('id');
            for (var i = 0; i < fieldNames.length; i++) {
                $("#" + gridId + " th[data-field='" + fieldNames[i] + "']").html(fieldTitles[i]);
                $("#" + gridId + " th[data-field='" + fieldNames[i] + "']").attr("data-title", fieldTitles[i]);
                var colIdx = GridPreferencesHelper.getColumnIndex('#' + gridId, fieldNames[i]);
                grid.columns[colIdx].title = fieldTitles[i];
            }
        }

    },
    setInitialValues: function (documentType,gridId) {
        if (orderEntryUI.documentType != ItemDocumentTypeEnum.DocumentType.QuantityonPO) {
            //Grid Headers
            orderEntryUI.changeGridHeaderTitle("ExpectedShippingArrivalDate", quantityGridResources.ExpectedShipDate,gridId);
            orderEntryUI.changeGridHeaderTitle("DocumentNumber", quantityGridResources.OrderNumber,gridId);
            orderEntryUI.changeGridHeaderTitle("CustomerVendorNumber", quantityGridResources.CustomerNumber,gridId);
            orderEntryUI.changeGridHeaderTitle("CustomerVendorName", quantityGridResources.CustomerName, gridId);
            var fieldNames = ["ExpectedShippingArrivalDate", "DocumentNumber", "CustomerVendorNumber", "CustomerVendorName"];
            var fieldTitles = [quantityGridResources.ExpectedShipDate, quantityGridResources.OrderNumber, quantityGridResources.CustomerNumber, quantityGridResources.CustomerName];
            orderEntryUI.RenameGridColumns(fieldNames, fieldTitles, gridId);

        } else {
            //Grid Headers
            orderEntryUI.changeGridHeaderTitle("ExpectedShippingArrivalDate", quantityGridResources.ExpectedArrivalDate, gridId);
            orderEntryUI.changeGridHeaderTitle("DocumentNumber", quantityGridResources.PONumber, gridId);
            orderEntryUI.changeGridHeaderTitle("CustomerVendorNumber", quantityGridResources.VendorNumber, gridId);
            orderEntryUI.changeGridHeaderTitle("CustomerVendorName", quantityGridResources.VendorName, gridId);

            var fieldNames = ["ExpectedShippingArrivalDate", "DocumentNumber", "CustomerVendorNumber", "CustomerVendorName"];
            var fieldTitles = [quantityGridResources.ExpectedArrivalDate, quantityGridResources.PONumber, quantityGridResources.VendorNumber, quantityGridResources.VendorName];
            orderEntryUI.RenameGridColumns(fieldNames, fieldTitles, gridId);
        }
    },
    setQuantityFieldTitle: function (gridId, UnitOfMeasure) {
        var qtyUnitInStocking = $.validator.format(quantityGridResources.Quantity, UnitOfMeasure)
        orderEntryUI.changeGridHeaderTitle("QtyInStockingUnit", qtyUnitInStocking);
        var fieldNames = ["QtyInStockingUnit"];
        var fieldTitles = [qtyUnitInStocking];
        orderEntryUI.RenameGridColumns(fieldNames, fieldTitles, gridId);
    },
    initQuantityOnSOGrid: function () {
        var grid = $('#QuantityonSOGrid').data("kendoGrid");
        var params = {
            gridId: "QuantityonSOGrid",
            btnEditColumnsId: "btnEditColumnsQuantityonSO",
            modelData: orderEntryUI.orderEntryModel.Data,
            modelName: "ItemLocationDocument",
            currentRowItemNumber: orderEntryUI.getItemNumber,
            currentLocation: orderEntryUI.getLocation,
            allLocation: false,
            currentDocumentType: orderEntryUI.documentType,
            preferencesTypeId: sg.utls.OEUserPreferencesType.QuantityOnSOGridPreferenceKey,
            pageSize: sg.utls.gridPageSize,
            pageNumber: grid.dataSource.page() - 1,
            formattedDecimal: orderEntryUI.NumberOfDecimalsForQty,
            ScreenName: "OrderEntry",
        };

        quantityUIGrid.init(params);
    },
    initQuantityOnPOGrid: function () {
        var grid = $('#QuantityonPOGrid').data("kendoGrid");
        var params = {
            gridId: "QuantityonPOGrid",
            btnEditColumnsId: "btnEditColumnsQuantityonPO",
            btnPOReceipt: "btnPendingReceipt",
            modelData: orderEntryUI.orderEntryModel.Data,
            modelName: "ItemLocationDocument",
            currentRowItemNumber: orderEntryUI.getItemNumber,
            currentLocation: orderEntryUI.getLocation,
            allLocation: false,
            currentDocumentType: orderEntryUI.documentType,
            preferencesTypeId: sg.utls.OEUserPreferencesType.QuantityOnPOGridPreferenceKey,
            pageSize: sg.utls.gridPageSize,
            pageNumber: grid.dataSource.page() - 1,
            formattedDecimal: orderEntryUI.NumberOfDecimalsForQty,
            ScreenName: "OrderEntry",
        };

        quantityUIGrid.init(params);
    },
    initQuantityCommittedGrid: function () {
        var grid = $('#QuantityCommittedGrid').data("kendoGrid");
        var params = {
            gridId: "QuantityCommittedGrid",
            btnEditColumnsId: "btnEditColumnsQuantityCommitted",
            modelData: orderEntryUI.orderEntryModel.Data,
            modelName: "ItemLocationDocument",
            currentRowItemNumber: orderEntryUI.getItemNumber,
            currentLocation: orderEntryUI.getLocation,
            allLocation: false,
            currentDocumentType: orderEntryUI.documentType,
            preferencesTypeId: sg.utls.OEUserPreferencesType.QuantityCommittedGridPreferenceKey,
            pageSize: sg.utls.gridPageSize,
            pageNumber: grid.dataSource.page() - 1,
            formattedDecimal: orderEntryUI.NumberOfDecimalsForQty,
            ScreenName: "OrderEntry",
        };

        quantityUIGrid.init(params);
    },
    initAllLocQuantitySO: function () {
        var grid = $('#AllLocQuantitySOGrid').data("kendoGrid");
        var params = {
            gridId: "AllLocQuantitySOGrid",
            btnEditColumnsId: "btnEditColumnsAllLocQuantitySO",
            modelData: orderEntryUI.orderEntryModel.Data,
            modelName: "ItemLocationDocument",
            currentRowItemNumber: orderEntryUI.getItemNumber,
            currentLocation: null,
            allLocation: true,
            currentDocumentType: orderEntryUI.documentType,
            preferencesTypeId: sg.utls.OEUserPreferencesType.AllLocQuantitySOGridPreferenceKey,
            pageSize: sg.utls.gridPageSize,
            pageNumber: grid.dataSource.page() - 1,
            formattedDecimal: orderEntryUI.NumberOfDecimalsForQty,
            ScreenName: "OrderEntry",
        };

        quantityUIGrid.init(params);
    },
    initAllLocQuantityPO: function () {
        var grid = $('#AllLocQuantityPOGrid').data("kendoGrid");
        var params = {
            gridId: "AllLocQuantityPOGrid",
            btnEditColumnsId: "btnEditColumnsAllLocQuantityPO",
            btnPOReceipt: "btnAllPendingReceipt",
            modelData: orderEntryUI.orderEntryModel.Data,
            modelName: "ItemLocationDocument",
            currentRowItemNumber: orderEntryUI.getItemNumber,
            currentLocation: null,
            allLocation: true,
            currentDocumentType: orderEntryUI.documentType,
            preferencesTypeId: sg.utls.OEUserPreferencesType.AllLocQuantityPOGridPreferenceKey,
            pageSize: sg.utls.gridPageSize,
            pageNumber: grid.dataSource.page() - 1,
            formattedDecimal: orderEntryUI.NumberOfDecimalsForQty,
            ScreenName: "OrderEntry",
        };

        quantityUIGrid.init(params);
    },
    initAllLocQuantityCommitted: function () {
        var grid = $('#AllLocQuantityCommGrid').data("kendoGrid");
        var params = {
            gridId: "AllLocQuantityCommGrid",
            btnEditColumnsId: "btnEditColumnsAllLocQuantityComm",
            modelData: orderEntryUI.orderEntryModel.Data,
            modelName: "ItemLocationDocument",
            currentRowItemNumber: orderEntryUI.getItemNumber,
            currentLocation: null,
            allLocation: true,
            currentDocumentType: orderEntryUI.documentType,
            preferencesTypeId: sg.utls.OEUserPreferencesType.AllLocQuantityCommittedGridPreferenceKey,
            pageSize: sg.utls.gridPageSize,
            pageNumber: grid.dataSource.page() - 1,
            formattedDecimal: orderEntryUI.NumberOfDecimalsForQty,
            ScreenName: "OrderEntry",
        };

        quantityUIGrid.init(params);
    },
    // Pass this function to common Quantity Grid JS
    getItemNumber: function () {
        var gridData;
        gridData = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid("#OrderDetailGrid"));
        if (gridData != null) {
            orderEntryUI.itemNumber = gridData.Item;
        }
        return orderEntryUI.itemNumber;
    },
    // Pass this function to common Quantity Grid JS
    getLocation: function () {
        var gridData;
        gridData = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid("#OrderDetailGrid"));
        if (gridData != null) {
            orderEntryUI.location = gridData.Location;
        }
        return orderEntryUI.location;
    },
    maskPhoneNumber: function () {
        var fields = ["#Data_BillToPhoneNumber", "#Data_BillToFaxNumber", "#Data_BillToContactPhone", "#Data_BillToContactFax",
            "#Data_ShipToPhoneNumber", "#Data_ShipToFaxNumber", "#Data_ShipToContactPhone", "#Data_ShipToContactFax"];

        if (orderEntryUI.orderEntryModel.CompanyProfile.CompanyProfileContact.FormatPhoneNo()) {
            $.each(fields, function (index, field) {
                sg.utls.unmask(field);
                sg.utls.addPlaceHolder(field, "(   )    -");
                sg.utls.addMaxLength(field, "34");
                sg.utls.maskPhoneNo(field);
            });
        } else {
            $.each(fields, function (index, field) {
                sg.utls.addPlaceHolder(field, "");
                sg.utls.addMaxLength(field, "30");
                sg.utls.unmask(field);
            });
        }
    },
    initHamburgers: function () {

        // For Customer Number
        var listCustomer = [
            sg.utls.labelMenuParams("custBillToBtn", orderEntryResources.CustomerBillToAddress, orderEntryUI.customerBillToPopup, "sagedisable: Data.customerNotExists"),
            sg.utls.labelMenuParams("preCreditCheckBtn", orderEntryResources.PreCreditCheck, orderEntryUI.preCreditCheckPopup, "sagedisable: Data.customerNotExists"),
        ];
        //For Ship To Location
        var listShipToLocation = [
            sg.utls.labelMenuParams("addrShipToLink", orderEntryResources.ShipToAddress, orderEntryUI.shipToLocationPopup, "sagedisable: Data.disable")
        ];
        //For Multiple Quotes
        var listMultipleQuotes = [
            sg.utls.labelMenuParams("multipleQuotesLink", orderEntryResources.MultipleQuotes, orderEntryUI.createOrderFromQuotesPopup, "sagedisable: Data.disable")
        ];


        LabelMenuHelper.initialize(listCustomer, "lnkHamburgerCustomer", "orderEntryUI.orderEntryModel");
        LabelMenuHelper.initialize(listShipToLocation, "lnkHamburgerShipToLocation", "orderEntryUI.orderEntryModel");
        LabelMenuHelper.initialize(listMultipleQuotes, "lnkHamburgerMultipleQuotes", "orderEntryUI.orderEntryModel");

    },
    customerBillToPopup: function () {
        sg.utls.openKendoWindowPopup('#customerBillToAddressWindow', null);
        //$("#customerBillToAddressWindow").data("kendoWindow").center();
    },
    preCreditCheckPopup: function () {
        orderEntryUI.controlToFocus = "#tbCustNo";
        if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
            orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.PreCheck;
            $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
        } else {
            orderEntryUI.preCreditCheckFormType = orderEntryEnum.PreCreditCheckFormType.PreCheck;
            orderEntryRepository.launchPreCreditCheck(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        }
    },
    shipToLocationPopup: function () {
        sg.utls.openKendoWindowPopup('#shipToAddressWindow', null);
    },
    createOrderFromQuotesPopup: function () {
        createOrderGridUI.init();
        if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
            orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.CreateOrderFromQuotes;
            $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
        } else {           
            sg.utls.openKendoWindowPopup('#createOrderFromQuotesWindow', null);
        }
    },
    bankRatePopup: function () {
        orderEntryRepository.getReceiptEntryDescription(sg.utls.ko.toJS(orderEntryUI.receiptBatchData.Data, orderEntryUI.computedProperties));
    
    },
    getOrderById: function() {
        sg.utls.clearValidations("frmOrderEntry");
        orderEntryRepository.getOrderNumberById(orderEntryUI.orderEntryModel.Data.OrderNumber());
    },
    post: function () {
        sg.utls.clearValidations("frmOrderEntry");        
        orderEntryRepository.post(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
    },
    initTextBox: function () {
        $("#btnQuickPreAuth").attr("disabled", true);
        $("#tbOrderNo").on("change", function (e) {
            var orderNo = $("#tbOrderNo").val();
            orderEntryUI.orderUniquifier = orderEntryUI.orderEntryModel.Data.OrderUniquifier();
            if (orderNo) {
                sg.delayOnChange("btnFinderOrderNo", $("#tbOrderNo"), function () {
                    if (!orderEntryUI.orderEntryModel.Data.disableScreen()) {
                        if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                            orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.orderNo;
                            //$('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                            gridUtility.readGrid("#OrderDetailGrid");
                        } else {
                            if ($("#tbCustNo").val().length === 0) {
                                orderEntryUI.getOrderById();
                            } else {
                                orderEntryUI.isOrderDetailLoad = true;
                                orderEntryUI.checkOrderNumberExists();
                            }
                        }
                    } else {
                        orderEntryUI.getOrderById();
                    }
                    orderEntryUI.orderEntryModel.Data.entryPosted(false);                    
                });
            } else {
                sg.utls.showMessageInfo(sg.utls.msgType.ERROR, orderEntryResources.BlankOrderNumberMsg);
                sg.controls.Focus($("#tbOrderNo"));
            }
        });

        $("#txtOrderRateDate").bind('change', function () {
            orderEntryUtility.refreshRateDate(orderEntryUI.orderEntryModel.Data.OrRateDate, "#txtOrderRateDate", orderEntryUI.headerRefreshType.orderRateDate, false);
        });

        $("#txtTRRateDate").bind('change', function () {
            orderEntryUtility.refreshRateDate(orderEntryUI.orderEntryModel.Data.TrRateDate, "#txtTRRateDate", orderEntryUI.headerRefreshType.trRateDate, false);
        });
        $("#txtShipmentRateDate").bind('change', function () {
            orderEntryUtility.refreshRateDate(orderEntryUI.orderEntryModel.Data.ShipmentRateDate, "#txtShipmentRateDate", orderEntryUI.headerRefreshType.shipmentRateDate, false);
        });

        $("#txtTRShipmentRateDate").bind('change', function () {
            orderEntryUtility.refreshRateDate(orderEntryUI.orderEntryModel.Data.TrShipmentRateDate, "#txtTRShipmentRateDate", orderEntryUI.headerRefreshType.trShipmentRateDate, false);
        });
        $("#txtInvoiceRateDate").bind('change', function () {
            orderEntryUtility.refreshRateDate(orderEntryUI.orderEntryModel.Data.InRateDate, "#txtInvoiceRateDate", orderEntryUI.headerRefreshType.inRateDate, false);
        });

        $("#txtTRInvoiceRateDate").bind('change', function () {
            orderEntryUtility.refreshRateDate(orderEntryUI.orderEntryModel.Data.TrInvoiceRateDate, "#txtTRInvoiceRateDate", orderEntryUI.headerRefreshType.trInvoiceRateDate, false);
        });

        $("#Data_OrderPrepayment_RateDate").bind('change', function () {
            orderEntryUtility.refreshRateDate(orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateDate, "#Data_OrderPrepayment_RateDate", orderEntryUI.prepaymentRefreshType.RateDate, true);
        });

        $("#Data_Shidate").bind('change', function () {
            orderEntryUI.controlToFocus = "#Data_Shidate";
            orderEntryUtility.checkDate(orderEntryUI.orderEntryModel.Data.Shidate, "#Data_Shidate");
        });
        $("#tbOrderDate").bind('change', function () {
            orderEntryUI.controlToFocus = "#tbOrderDate";
            orderEntryUtility.checkDate(orderEntryUI.orderEntryModel.Data.OrderDate, "#tbOrderDate");
        });
        $("#tbExpirationDate").bind('change', function () {
            var prevExpirationDate = this.value;
            orderEntryUI.controlToFocus = "#tbExpirationDate";
            var validDate = sg.utls.kndoUI.checkForValidDate($("#tbExpirationDate").val());
            if (validDate != null && validDate != "") {
                orderEntryUI.orderEntryModel.Data.QuoteExpirationDate(validDate);
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.QuoteExpirationDate);
            }
        });
        
        $("#tbExpectedShipDate").bind('change', function (e) {
            var prevExpectDate = this.value;
            orderEntryUI.controlToFocus = "#tbExpectedShipDate";
            orderEntryUI.messageId = "#tbExpectedShipDate";
            var validDate = sg.utls.kndoUI.checkForValidDate($("#tbExpectedShipDate").val());
            if (validDate != null && validDate != "") {
                orderEntryUI.orderEntryModel.Data.ExpectedShipDate(validDate);
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ExpShpmentDate);
            } 
        });
        $("#tbDateRequested").bind('change', function (e) {
            var prevDateReq = this.value;
            orderEntryUI.controlToFocus = "#tbDateRequested";
            orderEntryUI.messageId = "#tbDateRequested";
            var validDate = sg.utls.kndoUI.checkForValidDate($("#tbDateRequested").val());
            if (validDate != null && validDate != "") {
                orderEntryUI.orderEntryModel.Data.DateRequested(validDate);
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.DeliverDate);
            }
        });


        $("#Data_ShipmentPostingDate").bind('change', function () {
            orderEntryUI.controlToFocus = "#Data_ShipmentPostingDate";
            orderEntryUtility.checkDate(orderEntryUI.orderEntryModel.Data.ShipmentPostingDate, "#Data_ShipmentPostingDate");
        });
        $("#tbPONumber").bind('change', function () {
            var ponumber = $("#tbPONumber").val();
            orderEntryUI.controlToFocus = "#tbPONumber";
            if (ponumber) {
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.PONumber;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryUI.orderEntryModel.Data.PurchaseOrderNumber(ponumber);
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.PONumber);
                }
            }
          
        });

        $("#Data_InvoiceDate").bind('change', function () {
            orderEntryUI.controlToFocus = "#Data_InvoiceDate";
            orderEntryUtility.checkDate(orderEntryUI.orderEntryModel.Data.InvoiceDate, "#Data_InvoiceDate");
        });

        $("#Data_InvoicePostingDate").bind('change', function () {
            orderEntryUI.controlToFocus = "#Data_InvoicePostingDate";
            orderEntryUtility.checkDate(orderEntryUI.orderEntryModel.Data.InvoicePostingDate, "#Data_InvoicePostingDate");
        });

        $("#Data_OrRateType").on('change', function () {
            orderEntryUtility.refreshRateType("btnFinderOrderRateType", "#Data_OrRateType", orderEntryUI.headerRefreshType.orRateType, false);
        });

        $("#Data_TrRateType").on('change', function () {
            orderEntryUtility.refreshRateType("btnFinderTRRateType", "#Data_TrRateType", orderEntryUI.headerRefreshType.trRateType, false);
        });
        $("#Data_ShipmentRateType").on('change', function () {
            orderEntryUtility.refreshRateType("btnFinderShipmentRateType", "#Data_ShipmentRateType", orderEntryUI.headerRefreshType.shipmentRateType, false);
        });
        $("#Data_TrShipmentRateType").on('change', function () {
            orderEntryUtility.refreshRateType("btnFinderTRShipmentRateType", "#Data_TrShipmentRateType", orderEntryUI.headerRefreshType.trShipmentRateType, false);
        });
        $("#Data_Inratetype").on('change', function () {
            orderEntryUtility.refreshRateType("btnFinderInvoiceRateType", "#Data_Inratetype", orderEntryUI.headerRefreshType.inratetype, false);
        });
        $("#Data_TrInvoiceRateType").on('change', function () {
            orderEntryUtility.refreshRateType("btnFinderTRInvoiceRateType", "#Data_TrInvoiceRateType", orderEntryUI.headerRefreshType.trInvoiceRateType, false);
        });

        $("#Data_OrderPrepayment_ReceiptType").on('change', function () {
            orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptType;
            orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), orderEntryUI.prepaymentRefreshType.ReceiptType);
        });
        $("#Data_OrderPrepayment_YpProcessCode").on('change', function () {
            orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.YpProcessCode;
            orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), orderEntryUI.prepaymentRefreshType.YpProcessCode);
        });
        $("#Data_OrderPrepayment_ReceiptDate").on('change', function () {
            var validDate = sg.utls.kndoUI.checkForValidDate($("#Data_OrderPrepayment_ReceiptDate").val());
            if (validDate != null) {
                orderEntryUI.prepaymentPopUpClose = false;
                orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptDate(validDate);
                orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), orderEntryUI.prepaymentRefreshType.ReceiptDate);
            } else {
                sg.utls.showCustomMessagePopupInfoWithoutClose(sg.utls.msgType.ERROR, jQuery.validator.format(orderEntryResources.InvalidMessage, orderEntryResources.ReceiptDate), "prepaymentMessage");
               // $("#Data_OrderPrepayment_ReceiptDate").val(sg.utls.kndoUI.getFormattedDate(orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptDate()));
                sg.controls.Focus($("#Data_OrderPrepayment_ReceiptDate"));
                orderEntryUI.prepaymentPopUpClose = true;
                $("#prepaymentWindow").scrollTop(0);
            }
        });        
        $("#Data_NumberOfLabels").bind('keypress', function (e) {
            var num = Number($("#Data_NumberOfLabels").val() + String.fromCharCode(e.which));
            if (num > 32767) {
                return false;
            }            
        });
        $("#Data_NumberOfLabels").on('change', function () {
            orderEntryUI.controlToFocus = "#Data_NumberOfLabels";
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.noOfLabels);
        });
        $("#Data_ShipmentNumber").on('change', function () {
            orderEntryUI.controlToFocus = "#Data_ShipmentNumber";
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.shipmentNo);
        });
        $("#Data_InvoiceNumber").on('change', function () {
            orderEntryUI.controlToFocus = "#Data_InvoiceNumber";
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.invoiceNo);
        });
        //template change
        $("#tbTemplateCode").bind('change', function (e) {
            var template = $("#tbTemplateCode").val();
            orderEntryUI.controlToFocus = "#tbTemplateCode";
            sg.delayOnChange("btnFinderTemplateCode", $("#tbTemplateCode"), function () {                
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.templatecode;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.templatecode);
                }
            });
        });
        //Ship to Location change
        $("#tbShipToLocCode").bind('change', function (e) {
            var shipToLocCode = $("#tbShipToLocCode").val();
            orderEntryUI.controlToFocus = "#tbShipToLocCode";            
            sg.delayOnChange(["btnFinderShipToLocCode", "btnAddShipToLocCode"], $("#tbShipToLocCode"), function () {
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.shipToLoc;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.shipToLoc);
                }
            });
        });
        //Location change
        $("#tbLocCode").bind('change', function (e) {
            orderEntryUI.controlToFocus = "#tbLocCode";
            var locCode = $("#tbLocCode").val();
            sg.delayOnChange("btnFinderLocCode", $("#tbLocCode"), function () {
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.Location;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.Location);
                }
            });
        });
        //Ship Via code change
        $("#tbShipViaCode").bind('change', function (e) {
            orderEntryUI.controlToFocus = "#tbShipViaCode";
            var shipViaCode = $("#tbShipViaCode").val();
            sg.delayOnChange("btnFinderShipViaCode", $("#tbShipViaCode"), function () {
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.ShipVia;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ShipVia);
                }
            });
        });
        //Customer change
        $("#tbCustNo").bind('change', function (e) {            
            orderEntryUI.lastUpdatedValue = orderEntryUI.orderEntryModel.Data.CustomerNumber();
            var custNo = $("#tbCustNo").val();
            orderEntryUI.controlToFocus = "#tbCustNo";            
            var cntrls = [ 'btnFinderCustomerNo','btnAddCustomer'];
            sg.delayOnChange(cntrls, $("#tbCustNo"), function () {
                orderEntryUI.orderEntryModel.Data.CustomerNumber(custNo);
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.Customer;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {                    
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.Customer);
                }
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "orderTab");                
            });           
        });

        $("#Data_TaxGroup").on('change', function () {
            orderEntryUI.controlToFocus = "#Data_TaxGroup";
            sg.delayOnChange("btnFinderTaxGroup", $("#Data_TaxGroup"), function () {                
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.taxGroup);
            });
        });
        $("#Data_CustomerAccountSet").on('change', function () {
            orderEntryUI.controlToFocus = "#Data_CustomerAccountSet";
            sg.delayOnChange("btnFinderAccountSet", $("#Data_CustomerAccountSet"), function () {
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.accountSet);
            });
        });
        $("#Data_TermsCode").on('change', function () {
            orderEntryUI.controlToFocus = "#Data_TermsCode";
            sg.delayOnChange("btnFinderTermsCode", $("#Data_TermsCode"), function () {
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.termsCode);
            });
        });
        $("#Data_DefaultPriceListCode").on('change', function () {
            orderEntryUI.controlToFocus = "#Data_DefaultPriceListCode";
            sg.delayOnChange("btnFinderPriceList", $("#Data_DefaultPriceListCode"), function () {
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.priceList);
            });
        });

        $("#Data_DefaultBankCurrency").on('change', function (e) {
            orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptBankPopupCurrency;
            orderEntryUI.validCurrencyCode = false;
            orderEntryRepository.refreshPrepaymentBatch(this.value, 11);
        });

        $("#OrderPrepayment_RateType").on('change', function () {
            orderEntryUtility.refreshRateType("btnFinderPrepaymentRateType", "#OrderPrepayment_RateType", orderEntryUI.prepaymentRefreshType.RateType, true);
        });
        $("#Data_BankRateType").on('change', function () {
            orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptRateType;
            orderEntryRepository.refreshPrepaymentBatch(this.value, 14);
        });
        $("#txtRateDate").on('change', function () {
            orderEntryUI.lastUpdatedColumn = orderEntryUI.prepaymentRefreshType.ReceiptRateDate;
            var validDate = sg.utls.kndoUI.checkForValidDate($("#txtRateDate").val());
            if (validDate != null) {
                orderEntryRepository.refreshPrepaymentBatch(validDate, 12);
            } else {
                $("#txtRateDate").val(sg.utls.kndoUI.getDate(orderEntryUI.batchRateDate));
                sg.controls.Focus($("#txtRateDate"));
            }
        });
        $("#Data_BankExchangeRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate, orderEntryUI.headerRefreshType.PrepaymentBatchBankRate, orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateType, orderEntryUI.orderEntryModel.Data.OrSourCurr, orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateDate, orderEntryUI.orderEntryModel.Data.Orhomecurr)
        });

    },
    initPreAuthTextBox: function () {
        $("#txPaymentCode").on('change', function () {
            sg.delayOnChange("btnFinderPaymentCodePreAuth", $("#txPaymentCode"), function () {
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.PreAuthPaymentCode;
                orderEntryRepository.refreshPreAuth(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization), orderEntryUI.headerRefreshType.PreAuthPaymentCode);
            });
        });
        $("#txProcessingCode").on('change', function () {
            sg.delayOnChange("btnFinderProcessingCode", $("#txProcessingCode"), function () {
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.PreAuthProcessingCode;
                orderEntryRepository.refreshPreAuth(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization), orderEntryUI.headerRefreshType.PreAuthProcessingCode);
            });
        });
    },
    initPreCreditTextBox: function() {
        $("#Data_UserEnteredApprovalAmount").on('change', function () {
            orderEntryUI.orderEntryModel.Data.UserEnteredApprovalAmount($("#Data_UserEnteredApprovalAmount").val());
            orderEntryUI.userEnteredApprovalAmount=orderEntryUI.orderEntryModel.Data.UserEnteredApprovalAmount();
        });
    },
    initCheckBox: function () {
        $("#chkInvoiceDisc").on('change', function () {
            orderEntryUI.orderEntryModel.Data.RecalculateTax(1);
            orderEntryUI.orderEntryModel.Data.PerformTaxCalculation(1);
            if ($(this).is(':checked')) {
                orderEntryUI.orderEntryModel.Data.InvoiceDiscMiscCharges(1);
            } else {
                orderEntryUI.orderEntryModel.Data.InvoiceDiscMiscCharges(0);
            }
            orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.discountMiscCharges;
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.discountMiscCharges);
        });
        $("#chkInvoiceProduced").on('change', function () {
            //orderEntryUI.orderEntryModel.Data.InvoiceWillBeProduced(this.checked);
            //orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.invoiceWillBeProduced;
            //orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.invoiceWillBeProduced);
            orderEntryUI.controlToFocus = "#chkInvoiceProduced";
            if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.invoiceWillBeProducedTotal;
                $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            } else {
                orderEntryUI.createInvoice(this.checked);
            }
        });
        $("#chkCreateInvoice").on('change', function () {
            //if (this.checked != orderEntryUI.orderEntryModel.Data.InvoiceWillBeProduced()) {
                orderEntryUI.controlToFocus = "#chkCreateInvoice";
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.invoiceWillBeProduced;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryUI.createInvoice(this.checked);                   
                }
            //}
        });
        $("#AutoTaxCalculationStatus").bind("change", function () {
            orderEntryUI.calculateTax(this.checked);
        });
        $("#chkCalculateTax").bind("change", function () {
            orderEntryUI.controlToFocus = "#chkCalculateTax";
            if (this.checked != orderEntryUI.orderEntryModel.Data.AutoTaxCalculationStatus()) {
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.CalculateTax;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryUI.calculateTax(this.checked);
                }                
            }
        });
        $("#chkOnHold").bind("change", function () {
            orderEntryUI.orderEntryModel.Data.OnHold(this.checked);
            orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.onHold;
            orderEntryRepository.refreshHeader(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data), orderEntryUI.headerRefreshType.onHold);            
        });        
        $("#chkTaxRptAmtCal").bind("change", function () {
            orderEntryUI.taxEventType = 330;
            if (this.checked) {
                orderEntryUI.orderEntryModel.Data.AutoCalcTaxReportingAmounts(1);
                orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, orderEntryUI.taxEventType);
                orderTaxGridUI.taxreporteditable = true;

            } else {
                orderEntryUI.orderEntryModel.Data.AutoCalcTaxReportingAmounts(0);
                orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, orderEntryUI.taxEventType);
                orderTaxGridUI.taxreporteditable = false;

            }
        });

    },
    initPreCreditCheckBox: function() {
        $("#precreditChkOnHold").bind("change", function() {
            orderEntryUI.orderEntryModel.Data.OnHold(this.checked);
             orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.onHold;
            orderEntryRepository.refreshHeader(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data), orderEntryUI.headerRefreshType.onHold);            
        });
    },
    calculateTax: function (checked) {
        orderEntryUI.orderEntryModel.Data.AutoTaxCalculationStatus(checked);
        orderEntryUI.orderEntryModel.Data.RecalculateTax(checked);
        orderEntryUI.orderEntryModel.Data.PerformForcedTaxCalculation(checked);
        orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, 232);
        orderTaxGridUI.taxamounteditable = checked;
    },
    salesperChange: function (changedData) {
        var gridSalesSplit = $('#SalesSplitGrid').data("kendoGrid");
        var selectedDetail = sg.utls.kndoUI.getSelectedRowData(gridSalesSplit);
        orderEntryUI.lastUpdatedColumn = changedData.columnName;
        var eventype;
        if (changedData.columnName === "SalesPersonCode") {
            //orderEntryUI.SetSalespersonDetails(gridSalesSplit._data);
            sg.delayOnChange("btnSalespersonCode", $("#txtSalespersoncode"), function () {

         
            var index = changedData.rowData.SeqNo;
            switch (index) {
            case 1:                    
                orderEntryUI.orderEntryModel.Data.Salesperson1(changedData.rowData.SalesPersonCode);
                eventype = 78;
                break;
            case 2:
                orderEntryUI.orderEntryModel.Data.Salesperson2(changedData.rowData.SalesPersonCode);
                eventype = 79;
                break;
            case 3:
                orderEntryUI.orderEntryModel.Data.Salesperson3(changedData.rowData.SalesPersonCode);
                eventype = 80;
                break;
            case 4:
                orderEntryUI.orderEntryModel.Data.Salesperson4(changedData.rowData.SalesPersonCode);
                eventype = 81;
                break;
            case 5:
                orderEntryUI.orderEntryModel.Data.Salesperson5(changedData.rowData.SalesPersonCode);
                eventype = 82;
                break;
            }
            //orderEntryUI.SetSalespersonDetails(gridSalesSplit._data);
            orderEntryRepository.SetSalespersonAttribute(orderEntryUI.orderEntryModel.Data, eventype);
            });

    }
        if (changedData.columnName === "SalesPerson") {
            var index = changedData.rowData.SeqNo;
            switch (index) {
                case 1:
                    orderEntryUI.orderEntryModel.Data.SalespersonName1(changedData.rowData.SalesPerson);
                    eventype = 189;
                    break;
                case 2:
                    orderEntryUI.orderEntryModel.Data.SalespersonName2(changedData.rowData.SalesPerson);
                    eventype = 190;
                    break;
                case 3:
                    orderEntryUI.orderEntryModel.Data.SalespersonName3(changedData.rowData.SalesPerson);
                    eventype = 191;
                    break;
                case 4:
                    orderEntryUI.orderEntryModel.Data.SalespersonName4(changedData.rowData.SalesPerson);
                    eventype = 192;
                    break;
                case 5:
                    orderEntryUI.orderEntryModel.Data.SalespersonName5(changedData.rowData.SalesPerson);
                    eventype = 193;
                    break;


            }
            //orderEntryRepository.SetSalespersonAttribute(orderEntryUI.orderEntryModel.Data, eventype);

        }
        if (changedData.columnName === "SalesSplitPercentage") {
            var index = changedData.rowData.SeqNo;
            switch (index) {
                case 1:
                    orderEntryUI.orderEntryModel.Data.SalesPercentage1(changedData.rowData.SalesSplitPercentage);
                    eventype = 83;
                    break;
                case 2:
                    orderEntryUI.orderEntryModel.Data.SalesPercentage2(changedData.rowData.SalesSplitPercentage);
                    eventype = 84;
                    break;
                case 3:
                    orderEntryUI.orderEntryModel.Data.SalesPercentage3(changedData.rowData.SalesSplitPercentage);
                    eventype = 85;
                    break;
                case 4:
                    orderEntryUI.orderEntryModel.Data.SalesPercentage4(changedData.rowData.SalesSplitPercentage);
                    eventype = 86;
                    break;
                case 5:
                    orderEntryUI.orderEntryModel.Data.SalesPercentage5(changedData.rowData.SalesSplitPercentage);
                    eventype = 87;
                    break;


            }
            //orderEntryUI.SetSalespersonDetails(gridSalesSplit._data);
            orderEntryRepository.SetSalespersonAttribute(orderEntryUI.orderEntryModel.Data, eventype);

        }
        if (changedData.columnName == "IsDeleted") {
            orderEntryUI.SetSalespersonDetails(gridSalesSplit._data);
        }

        //if (changedData.columnName === "SalesSplitPercentage" || changedData.columnName === "SalesPerson" || changedData.columnName === "SalesPerson") {
        //    orderEntryRepository.SetSalespersonAttribute(orderEntryUI.orderEntryModel.Data, eventype);
        //}

    },
    SetSalespersonDetails: function (gridData) {
        orderEntryUI.orderEntryModel.Data.Salesperson1(null);
        orderEntryUI.orderEntryModel.Data.SalespersonName1(null);
        orderEntryUI.orderEntryModel.Data.SalesPercentage1(0);
        orderEntryUI.orderEntryModel.Data.Salesperson2(null);
        orderEntryUI.orderEntryModel.Data.SalespersonName2(null);
        orderEntryUI.orderEntryModel.Data.SalesPercentage2(0);
        orderEntryUI.orderEntryModel.Data.Salesperson3(null);
        orderEntryUI.orderEntryModel.Data.SalespersonName3(null);
        orderEntryUI.orderEntryModel.Data.SalesPercentage3(0);
        orderEntryUI.orderEntryModel.Data.Salesperson4(null);
        orderEntryUI.orderEntryModel.Data.SalespersonName4(null);
        orderEntryUI.orderEntryModel.Data.SalesPercentage4(0);
        orderEntryUI.orderEntryModel.Data.Salesperson5(null);
        orderEntryUI.orderEntryModel.Data.SalespersonName5(null);
        orderEntryUI.orderEntryModel.Data.SalesPercentage5(0);
        for (var i = 0; i < gridData.length; i++) {
            if (i === 0) {
                orderEntryUI.orderEntryModel.Data.Salesperson1(gridData[i].SalesPersonCode);
                orderEntryUI.orderEntryModel.Data.SalespersonName1(gridData[i].SalesPerson);
                orderEntryUI.orderEntryModel.Data.SalesPercentage1(gridData[i].SalesSplitPercentage);
            }
            else if (i === 1) {
                orderEntryUI.orderEntryModel.Data.Salesperson2(gridData[i].SalesPersonCode);
                orderEntryUI.orderEntryModel.Data.SalespersonName2(gridData[i].SalesPerson);
                orderEntryUI.orderEntryModel.Data.SalesPercentage2(gridData[i].SalesSplitPercentage);
            }
            else if (i === 2) {
                orderEntryUI.orderEntryModel.Data.Salesperson3(gridData[i].SalesPersonCode);
                orderEntryUI.orderEntryModel.Data.SalespersonName3(gridData[i].SalesPerson);
                orderEntryUI.orderEntryModel.Data.SalesPercentage3(gridData[i].SalesSplitPercentage);
            }
            else if (i === 3) {
                orderEntryUI.orderEntryModel.Data.Salesperson4(gridData[i].SalesPersonCode);
                orderEntryUI.orderEntryModel.Data.SalespersonName4(gridData[i].SalesPerson);
                orderEntryUI.orderEntryModel.Data.SalesPercentage4(gridData[i].SalesSplitPercentage);
            }
            else if (i === 4) {
                orderEntryUI.orderEntryModel.Data.Salesperson5(gridData[i].SalesPersonCode);
                orderEntryUI.orderEntryModel.Data.SalespersonName5(gridData[i].SalesPerson);
                orderEntryUI.orderEntryModel.Data.SalesPercentage5(gridData[i].SalesSplitPercentage);
            }
        }
    },
    dataChange: function (changedData) {
        var eventype;
        var taxgrid = $('#orderTaxGrid').data("kendoGrid");
        var index = sg.utls.kndoUI.getSelectedRowIndex(taxgrid);
        if (changedData.columnName === "TaxAmount") {
            switch (index) {
                case 0:
                    orderEntryUI.orderEntryModel.Data.TotalTaxAmount1(changedData.rowData.TaxAmount);
                    eventype = 213;
                    break;
                case 1:
                    orderEntryUI.orderEntryModel.Data.TotalTaxAmount2(changedData.rowData.TaxAmount);
                    eventype = 214;
                    break;
                case 2:
                    orderEntryUI.orderEntryModel.Data.TotalTaxAmount3(changedData.rowData.TaxAmount);
                    eventype = 215;
                    break;
                case 3:
                    orderEntryUI.orderEntryModel.Data.TotalTaxAmount4(changedData.rowData.TaxAmount);
                    eventype = 216;
                    break;
                case 4:
                    orderEntryUI.orderEntryModel.Data.TotalTaxAmount5(changedData.rowData.TaxAmount);
                    eventype = 217;
                    break;


            }
            orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, eventype);
        }
        if (changedData.columnName === "TaxBase") {
            switch (index) {
                case 0:
                    orderEntryUI.orderEntryModel.Data.TaxBase1(changedData.rowData.TaxBase);
                    eventype = 101;
                    break;
                case 1:
                    orderEntryUI.orderEntryModel.Data.TaxBase2(changedData.rowData.TaxBase);
                    eventype = 102;
                    break;
                case 2:
                    orderEntryUI.orderEntryModel.Data.TaxBase3(changedData.rowData.TaxBase);
                    eventype = 103;
                    break;
                case 3:
                    orderEntryUI.orderEntryModel.Data.TaxBase4(changedData.rowData.TaxBase);
                    eventype = 104;
                    break;
                case 4:
                    orderEntryUI.orderEntryModel.Data.TaxBase5(changedData.rowData.TaxBase);
                    eventype = 105;
                    break;


            }
            orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, eventype);
        }
        if (changedData.columnName === "CustomerTaxClass") {
            sg.delayOnChange("btnTaxClassField", $("#txtTaxClass"), function() {
                switch (index) {
                case 0:
                    orderEntryUI.orderEntryModel.Data.TaxClass1(changedData.rowData.CustomerTaxClass);
                    eventype = 96;
                    break;
                case 1:
                    orderEntryUI.orderEntryModel.Data.TaxClass2(changedData.rowData.CustomerTaxClass);
                    eventype = 97;
                    break;
                case 2:
                    orderEntryUI.orderEntryModel.Data.TaxClass3(changedData.rowData.CustomerTaxClass);
                    eventype = 98;
                    break;
                case 3:
                    orderEntryUI.orderEntryModel.Data.TaxClass4(changedData.rowData.CustomerTaxClass);
                    eventype = 99;
                    break;
                case 4:
                    orderEntryUI.orderEntryModel.Data.TaxClass5(changedData.rowData.CustomerTaxClass);
                    eventype = 100;
                    break;
                }
                orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, eventype);
            });
        }
        if (changedData.columnName === "TaxReportingAmount") {
            switch (index) {
                case 0:
                    orderEntryUI.orderEntryModel.Data.TrTaxAmount1(changedData.rowData.TaxReportingAmount);
                    eventype = 349;
                    break;
                case 1:
                    orderEntryUI.orderEntryModel.Data.TrTaxAmount2(changedData.rowData.TaxReportingAmount);
                    eventype = 350;
                    break;
                case 2:
                    orderEntryUI.orderEntryModel.Data.TrTaxAmount3(changedData.rowData.TaxReportingAmount);
                    eventype = 351;
                    break;
                case 3:
                    orderEntryUI.orderEntryModel.Data.TrTaxAmount4(changedData.rowData.TaxReportingAmount);
                    eventype = 352;
                    break;
                case 4:
                    orderEntryUI.orderEntryModel.Data.TrTaxAmount5(changedData.rowData.TaxReportingAmount);
                    eventype = 353;
                    break;


            }
            orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, eventype);
        }
        if (changedData.columnName === "RegistrationNumber") {
            switch (index) {
                case 0:
                    orderEntryUI.orderEntryModel.Data.Registration1(changedData.rowData.RegistrationNumber);
                    eventype = 116;
                    break;
                case 1:
                    orderEntryUI.orderEntryModel.Data.Registration2(changedData.rowData.RegistrationNumber);
                    eventype = 117;
                    break;
                case 2:
                    orderEntryUI.orderEntryModel.Data.Registration3(changedData.rowData.RegistrationNumber);
                    eventype = 118;
                    break;
                case 3:
                    orderEntryUI.orderEntryModel.Data.Registration4(changedData.rowData.RegistrationNumber);
                    eventype = 119;
                    break;
                case 4:
                    orderEntryUI.orderEntryModel.Data.Registration5(changedData.rowData.RegistrationNumber);
                    eventype = 110;
                    break;


            }
            orderEntryRepository.SetTaxesAttribute(orderEntryUI.orderEntryModel.Data, eventype);
        }
      


    },
    DetailTaxdataChange: function (changedData) {
        var grid = gridUtility.fetchGrid("#ItemTaxGrid");
        var index = sg.utls.kndoUI.getSelectedRowIndex(grid);
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
         var getSelectedRowvalue = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid('#OrderDetailGrid'));
        
       // var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid('#OrderDetailGrid'));

        var detailNumber = getSelectedRowvalue.DetailNumber;
        var getSelectedRow = ko.utils.arrayFirst(orderEntryUI.orderEntryModel.Data.OrderDetails.Items(), function (item) {
            return detailNumber === item.DetailNumber();
        });
        if (changedData.columnName == "TaxIncluded") {
            //var includevalue = $("#Data_TaxIncluded").data("kendoDropDownList").value();
            //var taxIncludeValue;
            //if (includevalue == "1")
            //    taxIncludeValue = true;
            //else
            //    taxIncludeValue = false;
            switch (index) {
                case 0:
                    getSelectedRow.TaxIncluded1(gridUtility.convertToBoolean(changedData.cellData));
                    break;
                case 1:
                    getSelectedRow.TaxIncluded2(gridUtility.convertToBoolean(changedData.cellData));;
                    break;
                case 2:
                    getSelectedRow.TaxIncluded3(gridUtility.convertToBoolean(changedData.cellData));;
                    break;
                case 3:
                    getSelectedRow.TaxIncluded4(gridUtility.convertToBoolean(changedData.cellData));;
                    break;
                case 4:
                    getSelectedRow.TaxIncluded5(gridUtility.convertToBoolean(changedData.cellData));;
                    break;

            }
        }
        if (changedData.columnName == "CustomerTaxClass") {
            sg.delayOnChange("btnTaxClassField", $("#txtTaxClass"), function () {
                switch (index) {
                    case 0:
                        getSelectedRow.TaxClass1(changedData.rowData.CustomerTaxClass);
                        break;
                    case 1:
                        getSelectedRow.TaxClass2(changedData.rowData.CustomerTaxClass);
                        break;
                    case 2:
                        getSelectedRow.TaxClass3(changedData.rowData.CustomerTaxClass);
                        break;
                    case 3:
                        getSelectedRow.TaxClass4(changedData.rowData.CustomerTaxClass);
                        break;
                    case 4:
                        getSelectedRow.TaxClass5(changedData.rowData.CustomerTaxClass);
                        break;
                }
                var detail = ko.mapping.toJS(getSelectedRow);
                orderEntryRepository.SetOrderItemTax(detail, index, TaxClassChange.TaxClass, true);
            });

        }
        else if (changedData.columnName == "TaxBase" || changedData.columnName == "TaxAmount" || changedData.columnName == "TaxReportingAmount") {
            switch (index) {
                case 0:
                    getSelectedRow.TaxBase1(changedData.rowData.TaxBase);
                    getSelectedRow.TaxAmount1(changedData.rowData.TaxAmount);
                    // getSelectedRow.TaxClass1(changedData.rowData.CustomerTaxClass);
                    getSelectedRow.TRTaxAmount1(changedData.rowData.TaxReportingAmount);
                    break;
                case 1:
                    getSelectedRow.TaxBase2(changedData.rowData.TaxBase);
                    getSelectedRow.TaxAmount2(changedData.rowData.TaxAmount);
                    // getSelectedRow.TaxClass2(changedData.rowData.CustomerTaxClass);
                    getSelectedRow.TRTaxAmount2(changedData.rowData.TaxReportingAmount);
                    break;
                case 2:
                    getSelectedRow.TaxBase3(changedData.rowData.TaxBase);
                    getSelectedRow.TaxAmount3(changedData.rowData.TaxAmount);
                    // getSelectedRow.TaxClass3(changedData.rowData.CustomerTaxClass);
                    getSelectedRow.TRTaxAmount3(changedData.rowData.TaxReportingAmount);
                    break;
                case 3:
                    getSelectedRow.TaxBase4(changedData.rowData.TaxBase);
                    getSelectedRow.TaxAmount4(changedData.rowData.TaxAmount);
                    // getSelectedRow.TaxClass4(changedData.rowData.CustomerTaxClass);
                    getSelectedRow.TRTaxAmount4(changedData.rowData.TaxReportingAmount);
                    break;
                case 4:
                    getSelectedRow.TaxBase5(changedData.rowData.TaxBase);
                    getSelectedRow.TaxAmount5(changedData.rowData.TaxAmount);
                    //  getSelectedRow.TaxClass5(changedData.rowData.CustomerTaxClass);
                    getSelectedRow.TRTaxAmount5(changedData.rowData.TaxReportingAmount);
                    break;
            }
            var detail = ko.mapping.toJS(getSelectedRow);
            if (changedData.columnName == "TaxAmount") {
                orderEntryRepository.SetOrderItemTax(detail, index, TaxClassChange.TaxAmount, true);
            }
            if (changedData.columnName == "TaxBase") {
                orderEntryRepository.SetOrderItemTax(detail, index, TaxClassChange.TaxBase, true);
            }
            if (changedData.columnName == "TaxReportingAmount") {
                orderEntryRepository.SetOrderItemTax(detail, index, TaxClassChange.TaxReportAmt, true);
            }

        } else {
            if (changedData.columnName == "TaxIncluded") {
                var detail = ko.mapping.toJS(getSelectedRow);
                orderEntryRepository.SetOrderItemTax(detail, index, TaxClassChange.TaxInclude, true);
            }
        }


    },
    getTaxGroup: function () {
        orderEntryUI.taxGroup = orderEntryUI.orderEntryModel.Data.TaxGroup();
        return orderEntryUI.taxGroup;
    },
    getTaxamounteditable: function () {
        if (orderEntryUI.orderEntryModel.Data.AutoTaxCalculationStatus() == true) {
            orderEntryUI.taxamounteditable = true;
        } else {
            orderEntryUI.taxamounteditable = false;
        }
        return orderEntryUI.taxamounteditable;


    },
    getTaxrpteditable: function () {

        if (orderEntryUI.orderEntryModel.Data.AutoCalcTaxReportingAmounts() == 1) {
            orderEntryUI.taxreporteditable = true;
        } else {
            orderEntryUI.taxreporteditable = false;
        }

        return orderEntryUI.taxreporteditable;

    },
    getTaxrptcurrency: function () {


        return 2;

    },
    getTaxesfilter: function () {

        var selectedRowData = sg.utls.kndoUI.getSelectedRowData($('#orderTaxGrid').data("kendoGrid"));
        var filters = [[]];
        filters[0][1] = sg.finderHelper.createFilter("TaxAuthorityCode", sg.finderOperator.Equal, selectedRowData["TaxAuthorityCode"]);
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("TransactionType", sg.finderOperator.Equal, "Sales");
        filters[0][2].IsMandatory = true;
        filters[0][3] = sg.finderHelper.createFilter("ClassType", sg.finderOperator.Equal, "Customers");
        filters[0][3].IsMandatory = true;
        filters[0][0] = sg.finderHelper.createFilter("Class", sg.finderOperator.Equal, selectedRowData["CustomerTaxClass"]);
        return filters;

    },
    getItemTaxesfilter: function () {

        var selectedRowData = sg.utls.kndoUI.getSelectedRowData($('#ItemTaxGrid').data("kendoGrid"));
        var filters = [[]];
        filters[0][1] = sg.finderHelper.createFilter("TaxAuthorityCode", sg.finderOperator.Equal, selectedRowData["TaxAuthorityCode"]);
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("TransactionType", sg.finderOperator.Equal, "Sales");
        filters[0][2].IsMandatory = true;
        filters[0][3] = sg.finderHelper.createFilter("ClassType", sg.finderOperator.Equal, "Items");
        filters[0][3].IsMandatory = true;
        filters[0][0] = sg.finderHelper.createFilter("Class", sg.finderOperator.Equal, selectedRowData["CustomerTaxClass"]);
        return filters;

    },
    refreshTaxGridData: function (isdetail) {

        var grid = $('#orderTaxGrid').data("kendoGrid");

        if (isdetail) {
            var hideColumn = ["RegistrationNumber"];
            var grid = $('#ItemTaxGrid').data("kendoGrid");
        }
        else {
            var hideColumn = ["TaxIncluded"];
            var grid = $('#orderTaxGrid').data("kendoGrid");
        }



        if (orderEntryUI.showReportingColumn()) {
            orderTaxGridUI.isTaxRptHidden = true;
            sg.utls.kndoUI.showGridColumns(grid, ["TaxReportingAmount"]);
        } else {
            hideColumn.push("TaxReportingAmount");
        }
        sg.utls.kndoUI.hideGridColumns(grid, hideColumn);
        grid.dataSource.read();
    },
    showReportingColumn: function () {
        if (orderEntryUI.orderEntryModel.Data.TaxGroup() == "" || (orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency() == orderEntryUI.orderEntryModel.Data.OrSourCurr())) {
            return false;
        } else {
            return true;
        }
    },
    //Initialise Tabs
    initTabs: function () {
        sg.utls.kndoUI.initTab("orderEntryTabStrip");
        sg.utls.kndoUI.selectTab("orderEntryTabStrip", "orderTab");

        orderEntryUI.enableDisableTabs(true);
        var tabStrip = $("#orderEntryTabStrip").data("kendoTabStrip");

        if (tabStrip) {
            tabStrip.bind("select", orderEntryUI.onTabSelect);
        }
        orderEntryUI.TabOptionFieldLoad = false;
    },
    onTabSelect: function (e) {        
        
        orderEntryUI.selectedTab = e.item.id;
        if (orderEntryUI.lastTabSelected == orderEntryUI.selectedTab) return;

        e.preventDefault();
        orderEntryUI.tabChanged = true;
        if (orderEntryUI.lastTabSelected == SelectedTabEnum.OptionalFieldTab) {
            //orderEntryUI.TabOptionFieldLoad = false;
            gridUtility.headerOptionalFieldSave();
            return;
        }

        if (orderEntryUI.lastTabSelected == SelectedTabEnum.OrderTab && !orderEntryUI.orderEntryModel.Data.disable()
            && gridUtility.hasNewRecord('#OrderDetailGrid')) {            
            $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
        } else {
            orderEntryUI.tabChanged = false;
            orderEntryUI.changeTab();
        }
    },
    changeTab: function () {
        orderEntryUI.lastTabSelected = orderEntryUI.selectedTab;
        switch (orderEntryUI.selectedTab) {
            case SelectedTabEnum.OrderTab:
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "orderTab");
                break;
            case SelectedTabEnum.CustomerTab:
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "customerTab");
                break;
            case SelectedTabEnum.RatesTab:
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "ratesTab");
                break;
            case SelectedTabEnum.OptionalFieldTab:
                
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "optionalFieldTab");
                if (  orderEntryUI.orderEntryModel.Data.disable()) {
                    optionalFieldUIGrid.isReadOnly = true;
                }
               else if (!orderEntryUI.orderEntryModel.Data.OrderSecurity.HasOFTransRights()) {
                    optionalFieldUIGrid.disableButtons = true;
                } else {
                    optionalFieldUIGrid.isReadOnly = false;
                }
                if (!orderEntryUI.TabOptionFieldLoad) {
                    //    shipToLocationUtility.getOptFieldParamPaging(null, 0, 10, -1);
                    orderEntryUI.initOptionalFields(true);
                    orderEntryUI.selectedOptionalField = orderEntryEnum.optionalFieldType.Header;
                    gridUtility.readGrid("#OrderEntryOptionalFieldGrid");
                    orderEntryUI.TabOptionFieldLoad = true;
                }

                break;
            case SelectedTabEnum.TaxesTab:
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "taxTab");
                    if (orderEntryUI.orderEntryModel.Data.AutoTaxCalculationStatus() && !orderEntryUI.orderEntryModel.Data.disable() && orderEntryUI.orderEntryModel.isModelDirty.isDirty()) {
                        orderEntryUI.orderEntryModel.Data.RecalculateTax(true);
                        orderEntryUI.orderEntryModel.Data.PerformForcedTaxCalculation(true);
                        // orderEntryRepository.SetTaxesAttribute(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data), orderEntryUI.taxEventType);
                        orderEntryRepository.taxProcess(orderEntryUI.orderEntryModel.Data, "1");

                    }

                    orderTaxGridUI.isreadonly = orderEntryUI.orderEntryModel.Data.disable();
                    orderEntryUI.initTaxesGrid(true);
                    orderEntryUI.refreshTaxGridData(false);
              
                break;
            case SelectedTabEnum.SalesTab:
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "salesTab");
                if (orderEntryUI.orderEntryModel.Data.disable()) {
                    saleSplitGridUI.isReadOnly = true;
                }
                orderEntryUI.initSalesSplitGrid();
                orderEntryUI.getGridPagedData("SalesSplitGrid");
                break;
            case SelectedTabEnum.TotalsTab:
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "totalTab");
                if (!orderEntryUI.orderEntryModel.Data.disable() && orderEntryUI.orderEntryModel.isModelDirty.isDirty()) {
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.CalculateTax);
                }
                break;
        }

       
    },
    initOptionalFields: function (initialize) {
        var params = {
            gridId: "OrderEntryOptionalFieldGrid",
            isDefault: false,
            finder: sg.finder.OptionalFieldsFinder,
            modelData: orderEntryUI.orderEntryModel.Data,
            modelName: "OrderOptionalFields",
            newLineItem: gridUtility.newOptionalFieldLineItem,
            isValueSetEditable: false,
            optionalFieldFilter: optionalFieldUI.optionalFieldFilter,
            getOptionalFieldData: orderEntryRepository.getOptionalFieldData,
            getOptionalFieldValue: orderEntryRepository.checkValidOptionalFieldValue,
            deleteUrl: sg.utls.url.buildUrl("OE", "OrderEntry", "DeleteOptionalField"),
            deleteFromServer: true,
            isCheckDuplicateRecord: true,
            saveOptionalField: orderEntryRepository.saveOptionalFields,
            isOptionalFieldExists: orderEntryRepository.isOptionalFieldExist,
            isPopUp: false,
            isCheckValueSet: true,
            isOptionalFieldModel: false,
    };
        optionalFieldUIGrid.init(params, initialize);
    },
    initDetailOptionalFields: function (initialize) {
        if (!optionalFieldUIGrid.modelData) {
            optionalFieldUIGrid.modelData = orderEntryUI.orderEntryModel.Data;
        }
        var params = {
            gridId: "DetailOptionalFieldGrid",
            isDefault: false,
            finder: sg.finder.OptionalFieldsFinder,
            modelData: orderEntryUI.orderEntryModel.Data.DetailLineOptionalFieldData,
            modelName: "OrderDetailOptionalFields",
            newLineItem: gridUtility.newDetailOptionalFieldLineItem,
            isValueSetEditable: false,
            optionalFieldFilter: optionalFieldUI.detaillineOptionalFieldFilter,
            getOptionalFieldData: orderEntryRepository.setDetailOptionalFieldData,
            getOptionalFieldValue: orderEntryRepository.setDetailOptionalFieldDataValue,
            deleteUrl: sg.utls.url.buildUrl("OE", "OrderEntry", "DeleteDetailOptionalField"),
            deleteFromServer: true,
            isCheckDuplicateRecord: true,
            saveOptionalField: orderEntryRepository.saveDetailOptionalFields,
            isOptionalFieldExists: orderEntryRepository.isDeatilOptionalFieldExist,
            isPopUp: true,
            isCheckValueSet: true,
            isOptionalFieldModel: true,
            //checkDuplicateRecord: gridUtility.CheckDuplicateRecord,
        };
        optionalFieldUIGrid.init(params, initialize);
    },
    initPreAuthButtons: function () {
        $("#btnQuickPreAuth").attr("disabled", true);
        $("#btnPreauthorization").bind('click', function () {
            orderEntryRepository.launchProcessCredit(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization),orderEntryEnum.PreAuthMode.PreAuthorization);
        });
        $("#btnPreauthVoid").bind('click', function () {
            orderEntryRepository.launchProcessCredit(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization), orderEntryEnum.PreAuthMode.Void);
        });
    },
    initPreCreditCheckButtons:function() {
        $("#btnProceed").bind("click", function () {
            orderEntryRepository.proceedWithPreCreditCheck(orderEntryUI.orderEntryModel.Data.UserEnteredApprovalAmount(),orderEntryUI.preCreditCheckFormType);
        });
        $("#btnCancel").bind("click", function () {
            $("#preCreditCheckWindow").data("kendoWindow").close();
        });
    },

    quickPreAuth : function () {
        console.log("here..");
        if (gridUtility.hasNewRecord('#OrderDetailGrid') || !$(this).is(':disabled')) {
            sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties) //same as below?
            orderEntryUI.lastActionCntl = orderEntryRepository.QuickPreAuthorize;
            $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            orderEntryRepository.QuickPreAuthorize(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        }
    },

    initButtons: function () {
        sg.exportHelper.setExportEvent("btnOptionExport", sg.dataMigration.OEOrderEntry, false, $.noop);
        sg.importHelper.setImportEvent("btnOptionImport", sg.dataMigration.OEOrderEntry, false, $.noop);
        $("#btnCreateNewEntry").on('click', function () {
            orderEntryUI.checkIsDirty(orderEntryUI.createNewEntry);
        });
        $("#btnPost").on('click', function () {
            if (orderEntryUI.orderEntryModel.WarnNegativeInv == true) {
                var foundNegativeInv = false;
                var grid = gridUtility.fetchGrid("#OrderDetailGrid");
                var items = grid.dataSource.data();

                for (var i = 0; i < items.length; i++) {
                    if (items[i].FoundNegativeInventory == true) {
                        foundNegativeInv = true;
                        break;
                    }
                }
                if (foundNegativeInv == true) {
                    sg.utls.showKendoConfirmationDialog(
                        function () { // Yes
                            gridUtility.headeroptionalFieldEmtyRow();
                            orderEntryRepository.saveDetails(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
                        },
                        function() { // No
                            return;
                        }, orderEntryResources.NegativeInventoryWarning);
                }
                else {
                    gridUtility.headeroptionalFieldEmtyRow();
                    orderEntryRepository.saveDetails(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
                }
            } else {
                gridUtility.headeroptionalFieldEmtyRow();
                orderEntryRepository.saveDetails(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
            }

        });
        $("#btnDeriveRate").bind("click", function (e) {
            orderEntryRepository.taxProcess(orderEntryUI.orderEntryModel.Data, "16");
        });
        $("#btnOrder").bind("click", function (e) {
            orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.PerformMultipleQuotesToOrder;
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.PerformMultipleQuotesToOrder);
        });
        $("#btnPrepayment").bind("click", function () {
             //This was added has  fix for Defect D-29598. Optioanl Feidls Has to be saved before prepay can be Opened.
                if (orderEntryUI.lastTabSelected == SelectedTabEnum.OptionalFieldTab) {
                    //orderEntryUI.TabOptionFieldLoad = false;
                    gridUtility.headerOptionalFieldSave();
                }
            setTimeout(function () {
                if (orderEntryUI.HeaderOptionalFieldError) {
                    return;
                }
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.Prepayment;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryRepository.checkPrepayError(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
                }
            },200);
        });
        $("#btnPreAuthorized").bind('click', function () {                        
            if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.PreAuthorize;
                $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            } else {
                orderEntryRepository.launchPreAuth(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
            }
        });
        $("#btnShipAll").on("click", function () {
            if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.shipAll;
                $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            } else {                
                orderEntryUI.shipAllClicked();                
            }
        });
        $("#btnQuickPreAuth").bind("click", function () {
            quickPreAuth();
        });

        

        $("#btnCalculateTax").bind("click", function (e) {
            if (!$(this).is(':disabled')) {
                orderEntryUI.taxEventType = 229;
                orderEntryUI.orderEntryModel.Data.RecalculateTax(true);
                orderEntryUI.orderEntryModel.Data.PerformForcedTaxCalculation(true);
                orderEntryRepository.taxProcess(orderEntryUI.orderEntryModel.Data, "1");
            }
        });
        $("#btnDistributeTaxes").bind("click", function (e) {
            if (!$(this).is(':disabled')) {
                orderEntryUI.taxEventType = 230;
                orderEntryUI.orderEntryModel.Data.PerformManualTaxDistribution(true);
                orderEntryRepository.SetTaxesAttribute(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data), orderEntryUI.taxEventType);
            }
            
        });
        $("#btnManualDistributeTaxes").bind("click", function (e) {
            if (!$(this).is(':disabled')) {
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.distributeTax;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    orderEntryUI.distributTax();
                }
             }
        });
        $("#btnOrderDetailAddLine").on("click", function () {
            sg.utls.SyncExecute(
                function() {
                    if (!gridUtility.newLineExists("#OrderDetailGrid", "Item")) {
                        orderDetailGridUI.currentDataRow = null;
                        orderEntryUI.removeNewLine();
                        setTimeout(function() {
                            gridUtility.gridAddLine('#OrderDetailGrid', 'OE0500', '#btnOrderDetailDeleteLine');
                        }, 600);
                    }
                });
        });
        $("#btnCommentsInstructionsAddLine").on("click", function () {
            var addLine = true;
            var grid = gridUtility.fetchGrid('#CommentsInstructionGrid');
            var data = grid.dataSource.data();
            if (data != null && data.length > 0) {
                $.each(data, function(index, item) {
                    if ((item.Comments === null || item.Comments === "") && item.IsDeleted !== true) {
                        addLine = false;
                    }
                });
            }

            if (addLine) {
                gridUtility.gridAddLine('#CommentsInstructionGrid', 'OE0180', '#btnCommentsInstructionsDeleteLine');
            }
        });
        $("#btnCommentsInstructionsDeleteLine").on("click", function () {
            gridUtility.deleteLine("#CommentsInstructionGrid", "#selectAllcmtintChk", orderEntryResources.DeleteLineConfirmation, "#btnCommentsInstructionsDeleteLine");
        });
        $("#btnCreateOrderAddLine").on("click", function () {
            if (!gridUtility.newLineExists("#CreateOrderGrid", "QuoteNumber")) {
                sg.utls.SyncExecute(
                    function() { gridUtility.gridAddLine('#CreateOrderGrid', 'OE0526', '#btnCreateOrderDeleteLine'); });
            }
        });
        $("#btnCreateOrderDeleteLine").on("click", function () {
            gridUtility.deleteLine("#CreateOrderGrid", "#CreateOrderSelectAllChk", orderEntryResources.DeleteLinesConfirm, "#btnCreateOrderDeleteLine");
        });
        $("#btnOrderDetailDeleteLine").on("click", function () {
            gridUtility.deleteLine("#OrderDetailGrid", "#OrderDetailSelectAllChk", orderEntryResources.DeleteLineConfirmation, "#btnOrderDetailDeleteLine");
        });
        $('#btnOrderDetailEditColumns').on('click', function () {
            GridPreferences.initialize('#OrderDetailGrid', sg.utls.OEUserPreferencesType.OrderDetailGrid, $(this), orderDetailGridUI.gridConfig.columns);
        });
        GridPreferencesHelper.setGrid("#OrderDetailGrid", orderDetailUserPreferences.detailGrid);
        $("#btnSave").on('click', function () {
            orderEntryUI.orderEntryModel.Data.OrderPrepayment.DepositNumber($("#txtDepositNumber").val());
            orderEntryRepository.savePrepayment(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties),orderEntryUI.numberOfEntries);
        });
        $("#btnDelete").on('click', function () {
            var message = jQuery.validator.format(orderEntryResources.DeleteConfirmMessage, orderEntryResources.Prepayment);
            sg.utls.showKendoConfirmationDialog(function () {
                sg.utls.clearValidations("frmOrderEntry");
                orderEntryRepository.deletePrepayment(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties))
            }, null, message, orderEntryResources.DeleteTitle);
        });
        $("#btnOrderDelete").on('click', function () {
            var message = jQuery.validator.format(orderEntryResources.DeleteOrderConfirmMessage, orderEntryUI.orderEntryModel.Data.OrderNumber());
            sg.utls.showKendoConfirmationDialog(function () {
                sg.utls.clearValidations("frmOrderEntry");
                orderEntryRepository.delete(orderEntryUI.orderEntryModel.Data.OrderNumber());
            }, null, message, orderEntryResources.DeleteTitle);
        });
        $("#btnCharge").on('click', function () {
            orderEntryRepository.launchPrepaymentProcessCreditCard(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment, orderEntryUI.computedProperties), orderEntryEnum.PrepaymentMode.Capture);
        });
        $("#btnQuickCharge").on('click', function () {
            orderEntryRepository.QuickChargePrepayment(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment, orderEntryUI.computedProperties));
        });
        $("#btnComponents").on("click", function () {
            if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.Components;
                $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            } else {
                orderEntryUI.btnComponentClicked();
            }
         });
        $("#btnAddCustomer").on("click", function () {
            sg.utls.SyncExecute(function() {
                var url = sg.utls.url.buildUrl("AR", "Customer", "Index") + "?guid=" + sg.utls.guid();
                if (orderEntryUI.orderEntryModel.Data.CustomerNumber()) {
                    url = url + "&id=" + orderEntryUI.orderEntryModel.Data.CustomerNumber()
                }
                sg.utls.iFrameHelper.openWindow("popupCustomer", "", url);
            });
        });
        $("#btnAddShipToLocCode").on("click", function () {
            var url = sg.utls.url.buildUrl("AR", "ShipToLocation", "Index") + "?guid=" + sg.utls.guid() + "&customerNumber=" + orderEntryUI.orderEntryModel.Data.CustomerNumber();
            if (orderEntryUI.orderEntryModel.Data.ShipToLocationCode()) {
                url = url + "&shipToLocation=" + orderEntryUI.orderEntryModel.Data.ShipToLocationCode()
            }
            sg.utls.iFrameHelper.openWindow("popupShipToLoc", "",  url);
        });
        $("#btnCreatePO").on("click", function () {
            var url = sg.utls.url.buildUrl("PO", "CreatePOsFromOE", "LoadCreatePOFromOE") + "?customerNo=" + orderEntryUI.orderEntryModel.Data.CustomerNumber() + "&orderNo=" + orderEntryUI.orderEntryModel.Data.OrderNumber() + "&guid=" + sg.utls.guid();
            sg.utls.iFrameHelper.openWindow("popupCustomer", "", url);
        });
        $("#btnHistory").on("click", function () {            
            if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.History;
                $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            } else {
                orderEntryUI.openHistoryPopup();
            }
        });
        $("#btnPrint").on("click", function () {
            if (orderEntryUI.orderEntryModel.PrintPrePayReceipt()) {
                orderEntryRepository.getPrepaymentBatchData($("#txtPrepaymentBatchNumber").val(), true);
            } else {
                PrintForm.printClose();
                $("#divPrintForm").data("kendoWindow").close();
            }
        });
        $("#btnPrintClose").on("click", function () {
            orderEntryUI.createNewEntry();
            $("#divPrintForm").data("kendoWindow").close();
        });
        $("#btnOrderRefresh").on("click", function (e) {
            gridUtility.refreshRecords('#OrderDetailGrid');
            orderEntryUI.lastActionCnt = orderEntryUI.headerRefreshType.Refresh;
        });

    },
    initDrillDownButtons: function () {
        $("#btnQuantityOnSOBtn").bind('click', function () {
            var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid(OrderDetailGrid));
            orderEntryUI.documentType = ItemDocumentTypeEnum.DocumentType.QuantityonSO;
            orderEntryUI.setInitialValues(orderEntryUI.documentType,"QuantityonSOGrid");
            orderEntryUI.initQuantityOnSOGrid();
            orderEntryUI.QuantityGridId = "QuantityonSOGrid";
            var windowTitle = $("#quantityOnSoGridWindow").data("kendoWindow");
            if (getSelectedRow) {
                windowTitle.title($.validator.format(quantityGridResources.QuantityonSoTitle, getSelectedRow.Item));
                orderEntryRepository.getUnitOfMeasure(getSelectedRow.Item);
            }
            sg.utls.openKendoWindowPopup('#quantityOnSoGridWindow', null);
            $('#QuantityonSOGrid').data("kendoGrid").dataSource.read();
        });
        $("#btnQuantityOnPOBtn").bind('click', function () {
            var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid(OrderDetailGrid));
            orderEntryUI.documentType = ItemDocumentTypeEnum.DocumentType.QuantityonPO;
            orderEntryUI.setInitialValues(orderEntryUI.documentType, "QuantityonPOGrid");
            orderEntryUI.initQuantityOnPOGrid();
            orderEntryUI.QuantityGridId = "QuantityonPOGrid";
            var windowTitle = $("#quantityOnPoGridWindow").data("kendoWindow");
            if (getSelectedRow) {
                windowTitle.title($.validator.format(quantityGridResources.QuantityonPoTitle, getSelectedRow.Item));
                orderEntryRepository.getUnitOfMeasure(getSelectedRow.Item);
            }
            sg.utls.openKendoWindowPopup('#quantityOnPoGridWindow', null);
            $('#QuantityonPOGrid').data("kendoGrid").dataSource.read();
        });
        $("#btnQuantityOnCommBtn").bind('click', function () {
            var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid(OrderDetailGrid));
            orderEntryUI.documentType = ItemDocumentTypeEnum.DocumentType.QuantityCommitted;
            orderEntryUI.setInitialValues(orderEntryUI.documentType, "QuantityCommittedGrid");
            orderEntryUI.initQuantityCommittedGrid();
            orderEntryUI.QuantityGridId = "QuantityCommittedGrid";
            var windowTitle = $("#quantityCommittedGridWindow").data("kendoWindow");
            if (getSelectedRow) {
                windowTitle.title($.validator.format(quantityGridResources.QuantityCommittedTitle, getSelectedRow.Item));
                orderEntryRepository.getUnitOfMeasure(getSelectedRow.Item);
            }
            sg.utls.openKendoWindowPopup('#quantityCommittedGridWindow', null);
            $('#QuantityCommittedGrid').data("kendoGrid").dataSource.read();
        });
        $("#btnTotalQuantityOnSOBtn").bind('click', function () {
            var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid(OrderDetailGrid));
            orderEntryUI.documentType = ItemDocumentTypeEnum.DocumentType.QuantityonSO;
            orderEntryUI.setInitialValues(orderEntryUI.documentType, "AllLocQuantitySOGrid");
            orderEntryUI.initAllLocQuantitySO();
            orderEntryUI.QuantityGridId = "AllLocQuantitySOGrid";
            var windowTitle = $("#AllLocQuantitySoGridWindow").data("kendoWindow");
            if (getSelectedRow) {
                windowTitle.title($.validator.format(quantityGridResources.QuantityonSoTitle, getSelectedRow.Item));
                orderEntryRepository.getUnitOfMeasure(getSelectedRow.Item);
            }
            sg.utls.openKendoWindowPopup('#AllLocQuantitySoGridWindow', null);
            $('#AllLocQuantitySOGrid').data("kendoGrid").dataSource.read();
        });
        $("#btnTotalQuantityOnPOBtn").bind('click', function () {
            var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid(OrderDetailGrid));
            orderEntryUI.documentType = ItemDocumentTypeEnum.DocumentType.QuantityonPO;
            orderEntryUI.setInitialValues(orderEntryUI.documentType, "AllLocQuantityPOGrid");
            orderEntryUI.initAllLocQuantityPO();
            orderEntryUI.QuantityGridId = "AllLocQuantityPOGrid";
            var windowTitle = $("#AllLocQuantityPoGridWindow").data("kendoWindow");
            if (getSelectedRow) {
                windowTitle.title($.validator.format(quantityGridResources.QuantityonPoTitle, getSelectedRow.Item));
                orderEntryRepository.getUnitOfMeasure(getSelectedRow.Item);
            }
            sg.utls.openKendoWindowPopup('#AllLocQuantityPoGridWindow', null);
            $('#AllLocQuantityPOGrid').data("kendoGrid").dataSource.read();
        });
        $("#btnTotalQuantityOnCommBtn").bind('click', function () {
            var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid(OrderDetailGrid));
            orderEntryUI.documentType = ItemDocumentTypeEnum.DocumentType.QuantityCommitted;
            orderEntryUI.setInitialValues(orderEntryUI.documentType, "AllLocQuantityCommGrid");
            orderEntryUI.initAllLocQuantityCommitted();
            orderEntryUI.QuantityGridId = "AllLocQuantityCommGrid";
            var windowTitle = $("#AllLocQuantityCommittedGridWindow").data("kendoWindow");
            if (getSelectedRow) {
                windowTitle.title($.validator.format(quantityGridResources.QuantityCommittedTitle, getSelectedRow.Item));
                orderEntryRepository.getUnitOfMeasure(getSelectedRow.Item);
            }
            sg.utls.openKendoWindowPopup('#AllLocQuantityCommittedGridWindow', null);
            $('#AllLocQuantityCommGrid').data("kendoGrid").dataSource.read();
        });
    },
    initDropDownList: function () {
       
        var kendoUi = sg.utls.kndoUI;
        var fields = ["ddlOrderType", "ddlCustDiscountLvl", "Data_CommentType"];
        $.each(fields, function (index, field) {
            kendoUi.dropDownList(field);
        });

        $("#ddlOrderType").bind("change", function (e) {
            var ddlOrderType = $("#ddlOrderType").data("kendoDropDownList");

            if (parseInt(ddlOrderType.value()) != orderEntryUI.orderEntryModel.Data.OrderType()) {
                orderEntryUI.lastUpdatedValue = orderEntryUI.orderEntryModel.Data.OrderType();
                orderEntryUI.orderEntryModel.Data.OrderType(parseInt(ddlOrderType.value()));
                orderEntryUISuccess.SetFieldVisibility();
                orderEntryUI.controlToFocus = "#ddlOrderType";
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.OrderType;
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.OrderType);
            }            
        });
        $("#ddlCustDiscountLvl").bind("change", function (e) {
            var ddlCustDiscountLvl = $("#ddlCustDiscountLvl").data("kendoDropDownList");
            orderEntryUI.controlToFocus = "#ddlCustDiscountLvl";
            if (parseInt(ddlCustDiscountLvl.value()) != orderEntryUI.orderEntryModel.Data.CustomerDiscountLevel()) {
                orderEntryUI.orderEntryModel.Data.CustomerDiscountLevel(parseInt(ddlCustDiscountLvl.value()));
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.CustomerDiscountLevel);
            }
        });

       // $("#Data_CommentType").unbind('change');
     
    },
    initFinders: function () {
        var finderTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.OrderNumber);
        sg.finderHelper.setFinder("btnFinderOrderNo", sg.finder.OEFinder, finderOnSuccess.entryNumber, $.noop, finderTitle, orderEntryFilter.getOrderFilter, null, true);

        var rateTypeTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.RateTypeTitle);
        sg.finderHelper.setFinder("btnFinderOrderRateType", sg.finder.CurrencyRateType, finderOnSuccess.orderRateType, finderOnCancel.orderRateType, rateTypeTitle, orderEntryFilter.getOrderRateTypeFilter, null, true);
        sg.finderHelper.setFinder("btnFinderTRRateType", sg.finder.CurrencyRateType, finderOnSuccess.TRRateType, finderOnCancel.TRRateType, rateTypeTitle, orderEntryFilter.getTRRateTypeFilter, null, true);
        sg.finderHelper.setFinder("btnFinderShipmentRateType", sg.finder.CurrencyRateType, finderOnSuccess.shipmentRateType, finderOnCancel.shipmentRateType, rateTypeTitle, orderEntryFilter.getShipmentRateTypeFilter, null, true);
        sg.finderHelper.setFinder("btnFinderTRShipmentRateType", sg.finder.CurrencyRateType, finderOnSuccess.TRShipmentRateType, finderOnCancel.TRShipmentRateType, rateTypeTitle, orderEntryFilter.getTRShipmentRateTypeFilter, null, true);
        sg.finderHelper.setFinder("btnFinderInvoiceRateType", sg.finder.CurrencyRateType, finderOnSuccess.invoiceRateType, finderOnCancel.invoiceRateType, rateTypeTitle, orderEntryFilter.getInvoiceRateTypeFilter, null, true);
        sg.finderHelper.setFinder("btnFinderTRInvoiceRateType", sg.finder.CurrencyRateType, finderOnSuccess.TRInvoiceRateType, finderOnCancel.TRInvoiceRateType, rateTypeTitle, orderEntryFilter.getTRInvoiceRateTypeFilter, null, true);
        sg.finderHelper.setFinder("btnFinderPrepaymentRateType", sg.finder.CurrencyRateType, finderOnSuccess.PrepaymentRateType, finderOnCancel.PrepaymentRateType, rateTypeTitle, orderEntryFilter.getPrepaymentRateTypeFilter, null, true);
        sg.finderHelper.setFinder("btnFinderBankRateType", sg.finder.CurrencyRateType, finderOnSuccess.BankRateType, $.noop, rateTypeTitle, orderEntryFilter.getBankRateTypeFilter, null, true);

        var currencyRateTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.CurrencyRateTitle);
        sg.finderHelper.setFinder("btnFinderOrderExchangeRate", sg.finder.CurrencyRate, finderOnSuccess.orderExchangeRate, finderOnCancel.orderExchangeRate, currencyRateTitle, orderEntryFilter.getOrderExchangeRateFilter, null, true);
        sg.finderHelper.setFinder("btnFinderTRExchangeRate", sg.finder.CurrencyRate, finderOnSuccess.TRExchangeRate, finderOnCancel.TRExchangeRate, currencyRateTitle, orderEntryFilter.getTRExchangeRateFilter, null, true);
        sg.finderHelper.setFinder("btnFinderShipmentExchangeRate", sg.finder.CurrencyRate, finderOnSuccess.shipmentExchangeRate, finderOnCancel.shipmentExchangeRate, currencyRateTitle, orderEntryFilter.getShipmentExchangeRateFilter, null, true);
        sg.finderHelper.setFinder("btnFinderTRShipmentExchangeRate", sg.finder.CurrencyRate, finderOnSuccess.TRShipmentExchangeRate, finderOnCancel.TRShipmentExchangeRate, currencyRateTitle, orderEntryFilter.getTRShipmentExchangeRateFilter, null, true);
        sg.finderHelper.setFinder("btnFinderInvoiceExchangeRate", sg.finder.CurrencyRate, finderOnSuccess.invoiceExchangeRate, finderOnCancel.invoiceExchangeRate, currencyRateTitle, orderEntryFilter.getInvoiceExchangeRateFilter, null, true);
        sg.finderHelper.setFinder("btnFinderTRInvoiceExchangeRate", sg.finder.CurrencyRate, finderOnSuccess.TRInvoiceExchangeRate, finderOnCancel.TRInvoiceExchangeRate, currencyRateTitle, orderEntryFilter.getTRInvoiceExchangeRateFilter, null, true);
        sg.finderHelper.setFinder("btnFinderPrepaymentExchangeRate", sg.finder.CurrencyRate, finderOnSuccess.PrepaymentExchangeRate, finderOnCancel.PrepaymentExchangeRate, currencyRateTitle, orderEntryFilter.getPrepaymentExchangeRateFilter, null, true);
        sg.finderHelper.setFinder("btnFinderBankRate", sg.finder.CurrencyRate, finderOnSuccess.BankExchangeRate, $.noop, currencyRateTitle, orderEntryFilter.getBankExchangeRateFilter, null, true);

        var bankCurrencyTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.BankCurrency);
        sg.finderHelper.setFinder("btnBankRateCurrencyFinder", sg.finder.BankCurrencyCode, finderOnSuccess.BankCurrency, $.noop, bankCurrencyTitle, orderEntryFilter.getBankRateCurrencyFilter, null, true);

        var paymentCode = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.PaymentCode);
        sg.finderHelper.setFinder("btnPaymentCodeFinder", sg.finder.PaymentCode, finderOnSuccess.PrepaymentPaymentCode, $.noop, paymentCode, orderEntryFilter.getPaymentCodeFilter, null, true);

        var processingCode = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ProcessingCode);
        sg.finderHelper.setFinder("btnProcessingCodeFinder", sg.finder.CSPaymentProcessingCode, finderOnSuccess.PrepaymentProcessingCode, $.noop, processingCode, orderEntryFilter.processingCodeFilter, null, true);

        var finderTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ManufacturerItemNumberTitle);
        sg.finderHelper.setFinder("btnManufacturerItemFinder", sg.finder.ICManufacturerItemNumber, finderOnSuccess.manufacturerItem,
           detailGridfinderOnSuccess.manufactureItemCancel, finderTitle, orderEntryFilter.getManufacturerFieldFilter);


        var priceListCodeTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.CustomerPriceList);
        sg.finderHelper.setFinder("btnFinderPriceList", sg.finder.PriceListCode, finderOnSuccess.PriceListCodes, finderOnCancel.PriceListCodes, priceListCodeTitle, orderEntryFilter.getPriceListFilter, null, true);

        var taxGroupTitle = window.jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.TaxGroup);
        sg.finderHelper.setFinder("btnFinderTaxGroup", sg.finder.TaxGroup, finderOnSuccess.TaxGroup, finderOnCancel.TaxGroup, taxGroupTitle, orderEntryFilter.getTaxGroupFilter, null, true);

        var accountSetTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.AccountSet);
        sg.finderHelper.setFinder("btnFinderAccountSet", sg.finder.ARAccountSet, finderOnSuccess.AccountSet, finderOnCancel.AccountSet, accountSetTitle, orderEntryFilter.getAccountSetFilter);

        var termsCodeitle = $.validator.format(orderEntryResources.FinderTitle, orderEntryResources.TermsCode);
        sg.finderHelper.setFinder("btnFinderTermsCode", sg.finder.TermsCode, finderOnSuccess.TermsCode, finderOnCancel.TermsCode, termsCodeitle, orderEntryFilter.getTermsCodeFilter, null, true);

        //Template Finder
        var templatecodeTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.TemplateCodeTitle);
        sg.finderHelper.setFinder("btnFinderTemplateCode", sg.finder.OETemplate, finderOnSuccess.TemplateCode, finderOnCancel.Template, templatecodeTitle, sg.finderHelper.createDefaultFunction("tbTemplateCode", "TemplateCode", sg.finderOperator.StartsWith), null, true);
        //Ship Via Finder
        finderTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ShipViaCodeTitle);

        sg.finderHelper.setFinder("btnFinderShipViaCode", sg.finder.OEShipViaCode,
            finderOnSuccess.ShipViaCode,
            // Reset the focus to  perticular field
            finderOnCancel.ShipViaCode,
            finderTitle,
            sg.finderHelper.createDefaultFunction("tbShipViaCode", "Code", sg.finderOperator.StartsWith)
        );
        //Location Finder
        var finderTitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.LocationTitle);
        sg.finderHelper.setFinder(

            "btnFinderLocCode",
            sg.finder.Location,
            finderOnSuccess.Location,
            // Reset the focus to  perticular field
            finderOnCancel.Location,
            finderTitle,
            sg.finderHelper.createDefaultFunction("tbLocCode", "Location", sg.finderOperator.StartsWith)
        );
        // Ship To Location Finder
        var title = window.jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ShipToLocation);
        sg.finderHelper.setFinder("btnFinderShipToLocCode", sg.finder.ARShipToLocationFinder, finderOnSuccess.ShipToLocation, finderOnCancel.ShipToLocation, title, orderEntryFilter.getShipToLocationFinderFilter, null, true);
        //Customer finder
        var title = $.validator.format(orderEntryResources.FinderTitle, orderEntryResources.CustomerNumber);
        sg.finderHelper.setFinder("btnFinderCustomerNo", sg.finder.ARCustomerFinder, finderOnSuccess.CustomerNumber, $.noop, title, sg.finderHelper.createDefaultFunction("Data_CustomerNumber", "CustomerNumber", sg.finderOperator.StartsWith), null, true);
        var itemFindertitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ItemNumber);
        sg.finderHelper.setFinder(
         "btnItemsFieldFinder",
         sg.finder.Items,
        detailGridfinderOnSuccess.itemSuccess,
         $.noop(),
         itemFindertitle,
         detailGridfilter.alternateItemFilter, null, true
     );

        sg.finderHelper.setFinder(
            "btnItemNumberFieldFinder",
            sg.finder.Items,
            detailGridfinderOnSuccess.itemSuccess,
            $.noop(),
            itemFindertitle,
            detailGridfilter.itemFilter, null, true
        );


    },
    initPreAuthFinder: function () {
        // Payment Code Finder 
        var title = window.jQuery.validator.format(orderEntryResources.FinderTitle, "Payment Code");
        sg.finderHelper.setFinder("btnFinderPaymentCodePreAuth", sg.finder.PaymentCode, finderOnSuccess.PaymentCode, finderOnCancel.PaymentCode, title, orderEntryFilter.getPaymentCodePreAuthFilter, null, true);

        // Payment Processing Code Finder
        var title = window.jQuery.validator.format(orderEntryResources.FinderTitle, "Processing Code");
        sg.finderHelper.setFinder("btnFinderProcessingCode", sg.finder.CSPaymentProcessingCode, finderOnSuccess.ProcessingCode, finderOnCancel.ProcessingCode, title, orderEntryFilter.getProcessingCodeFilter, null, true);
    },
    initPopUpWindows: function() {
        sg.utls.intializeKendoWindowPopup('#customerBillToAddressWindow', orderEntryResources.CustomerBillToAddress, function() {
            orderEntryRepository.readHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        });
        sg.utls.intializeKendoWindowPopup('#shipToAddressWindow', orderEntryResources.ShipToAddress, function() {
            orderEntryRepository.readHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        });
        sg.utls.intializeKendoWindowPopup('#bankRateWindow', orderEntryResources.BankRate,
        function (e) {
            if (orderEntryUI.bankRatePopupClose == true) {
                e.preventDefault();
            }
            else if (orderEntryUI.bankRatePopupClose == false) {
                $("#bankRateMessage").empty();
            }
              
        });
        sg.utls.intializeKendoWindowPopup('#createOrderFromQuotesWindow', orderEntryResources.CreateOrderFromQuotes, function (e) {
            if (!orderEntryUI.quotePopUpClose) {
                e.preventDefault();                              
                if (!$.trim($("#quoteWindowMessage").html())) {
                    orderEntryUI.quotePopUpClose = true;
                    //$('#CreateOrderGrid').data("kendoGrid").dataSource.read();
                    gridUtility.refreshRecords('#CreateOrderGrid');
                    $("#createOrderFromQuotesWindow").data("kendoWindow").close();
                }
            } else {
                orderEntryUI.quotePopUpClose = false;
            }
        });
        sg.utls.intializeKendoWindowPopup('#preCreditCheckWindow', orderEntryResources.PreCreditCheck,function() {
              orderEntryUI.displayApprovedAmount=true;
        })
        sg.utls.intializeKendoWindowPopup('#prepaymentWindow', orderEntryResources.OEPrepayments,
            function (e) {
                if (orderEntryUI.prepaymentPopUpClose == true) {
                    e.preventDefault();
                }
                else if (orderEntryUI.prepaymentPopUpClose == false) {
                    orderEntryRepository.CheckIfPrepayExists();
                    orderEntryRepository.UnloadPrepayment(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
                    captionChangeAfterPrepayment();
                    $("#prepaymentMessage").empty();
                }
              
            });
        sg.utls.intializeKendoWindowPopup('#DetailTaxWindow', orderEntryResources.DetailTaxes, function (e) {
            if (orderEntryUI.DetailTaxPopUpClose == true) {
                e.preventDefault();
            } else if (orderEntryUI.DetailTaxPopUpClose == false) {
                //orderEntryUI.UpdateHeaderTax();
                $("#detailTaxWindowMessage").empty();
            }
        });
        sg.utls.intializeKendoWindowPopup('#OrderToShipmentDrillDownWindow', orderEntryResources.OrderToShipmentTtitle);
        sg.utls.intializeKendoWindowPopup('#PreauthorizeWindow', orderEntryResources.PreauthorizationTitle,
        function (e) {
            if (orderEntryUI.preAuthorizePopUpClose == true) {
                e.preventDefault();
            }
            else if (orderEntryUI.preAuthorizePopUpClose == false) {
                orderEntryRepository.UnloadPreAuth();
                $("#preAuthorizeMessage").empty();
            }
        });
        sg.utls.intializeKendoWindowPopup('#quantityOnSoGridWindow', "Quantity on SO");
        sg.utls.intializeKendoWindowPopup('#quantityOnPoGridWindow', "Quantity on PO");
        sg.utls.intializeKendoWindowPopup('#quantityCommittedGridWindow', "Quantity Committed");
        sg.utls.intializeKendoWindowPopup('#AllLocQuantitySoGridWindow', "All Loc Quantity SO");
        sg.utls.intializeKendoWindowPopup('#AllLocQuantityPoGridWindow', "All Loc Quantity PO");
        sg.utls.intializeKendoWindowPopup('#AllLocQuantityCommittedGridWindow', "All Loc Quantity Committed");
        sg.utls.intializeKendoWindowPopup('#CommentsInstructionWindow', orderEntryResources.CommentInstruction,
           function (e) {
               if (!onPopUpWindowClose.closeWindow) {
                   e.preventDefault();
                   onPopUpWindowClose.saveCommentsInstructions();
               } else {
                   onPopUpWindowClose.closeWindow = false;
               }
           });
        sg.utls.intializeKendoWindowPopup('#detailOptionalField', orderEntryResources.OptionalFieldPopUPTitle,  function (e) {
            if (!orderEntryUI.optionalFieldPopUpClose) {
                e.preventDefault();
                $("#lineOptFieldWindowMessage").empty();
                var hasModified = optionalFieldUIGrid.save();
                if (!hasModified) {
                    orderEntryUI.optionalFieldPopUpClose = true;
                    $("#detailOptionalField").data("kendoWindow").close();
                }
            } else {
                orderEntryUI.optionalFieldPopUpClose = false;
            }
        });
        sg.utls.intializeKendoWindowPopup('#divPrintForm', orderEntryResources.ConfirmationTitle);
        // kitting components starts
        sg.utls.intializeKendoWindowPopup('#kittingComponentPopUpWindow', kittingGridResources.KittingComponents,
                function (e) {
                    if (!onPopUpWindowClose.closeWindow) {
                        e.preventDefault();
                        onPopUpWindowClose.saveKittingItems();                       
                    } else {
                        onPopUpWindowClose.closeWindow = false;
                    }
                });
        // kitting components ends
    },
    initPreAuthNumericTextBoxDecimal: function () {
        if (orderEntryUI.orderEntryModel.OrderCurrencyDecimal()) {
            orderEntryUI.orderCurrencyDecimal = orderEntryUI.orderEntryModel.OrderCurrencyDecimal();
        }
        orderEntryUtility.setNumericTextBox("#txPreAuthAmount", 13, orderEntryUI.orderCurrencyDecimal, 0);
    },
    initPreCreditNumericTextBoxDecimal: function () {
        if (orderEntryUI.orderEntryModel.OrderCurrencyDecimal()) {
            orderEntryUI.orderCurrencyDecimal = orderEntryUI.orderEntryModel.OrderCurrencyDecimal();
        }
        orderEntryUtility.setNumericTextBox("#Data_UserEnteredApprovalAmount", 13, orderEntryUI.orderCurrencyDecimal, -9999999999999.99);
    },
    initPreAuthNumericTextBox: function () {
        $("#txPreAuthAmount").on('change', function (e) {
            if (e.target.value === "" || e.target.value === null) {
                orderEntryUI.preAuthorizationModel.OrderPreauthorization.PreAuthAmount(0);
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.PreauthorizationAmt;
                orderEntryRepository.refreshPreAuth(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization), orderEntryUI.headerRefreshType.PreauthorizationAmt);
            }
            if (e.target.value != orderEntryUI.orderEntryModel.Data.OrderDiscountPercentage()) {
                orderEntryUI.preAuthorizationModel.OrderPreauthorization.PreAuthAmount(e.target.value);
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.PreauthorizationAmt;
                orderEntryRepository.refreshPreAuth(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization), orderEntryUI.headerRefreshType.PreauthorizationAmt);
            }
        });
    },
    initNumericTextBoxDecimal: function () {

        if (orderEntryUI.orderEntryModel.OrderCurrencyDecimal()) {
            orderEntryUI.orderCurrencyDecimal = orderEntryUI.orderEntryModel.OrderCurrencyDecimal();
        }
        orderEntryUtility.setNumericTextBox("#Data_OrderDiscountAmount", 13, orderEntryUI.orderCurrencyDecimal, -9999999999999.99);
        orderEntryUtility.setNumericTextBox("#Data_OrderPrepayment_ReceiptAmount", 13, orderEntryUI.orderPrepaymentCurrencyDecimal, -9999999999999.99);
    },
    initNumericTextBox: function () {
        orderEntryUtility.setNumericTextBox("#Data_OrRate", 8, 7, 0);
        orderEntryUtility.setNumericTextBox("#Data_TrRate", 8, 7, 0);
        orderEntryUtility.setNumericTextBox("#Data_ShipmentRate", 8, 7, 0);
        orderEntryUtility.setNumericTextBox("#Data_TrShipmentRate", 8, 7, 0);
        orderEntryUtility.setNumericTextBox("#Data_InRate", 8, 7, 0);
        orderEntryUtility.setNumericTextBox("#Data_TrInvoiceRate", 8, 7, 0);
        orderEntryUtility.setNumericTextBox("#Data_OrderDiscountPercentage", 3, 5, 0);
        orderEntryUtility.setNumericTextBox("#OrderPrepayment_BankRate", 8, 7, 0);
        orderEntryUtility.setNumericTextBox("#Data_BankExchangeRate", 8, 7, 0);



        $("#Data_OrRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.OrRate, orderEntryUI.headerRefreshType.orderExchangeRate, orderEntryUI.orderEntryModel.Data.OrRateType, orderEntryUI.orderEntryModel.Data.OrSourCurr, orderEntryUI.orderEntryModel.Data.OrRateDate,orderEntryUI.orderEntryModel.Data.Orhomecurr)
        });

        $("#Data_TrRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.TrRate, orderEntryUI.headerRefreshType.trRate, orderEntryUI.orderEntryModel.Data.TrRateType, orderEntryUI.orderEntryModel.Data.OrSourCurr, orderEntryUI.orderEntryModel.Data.TrRateDate, orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency)
        });

        $("#Data_ShipmentRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.ShipmentRate, orderEntryUI.headerRefreshType.shipmentExchangeRate, orderEntryUI.orderEntryModel.Data.ShipmentRateType, orderEntryUI.orderEntryModel.Data.OrSourCurr, orderEntryUI.orderEntryModel.Data.ShipmentRateDate,orderEntryUI.orderEntryModel.Data.Orhomecurr)
        });

        $("#Data_TrShipmentRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.TrShipmentRate, orderEntryUI.headerRefreshType.trShipmentExchangeRate, orderEntryUI.orderEntryModel.Data.TrShipmentRateType, orderEntryUI.orderEntryModel.Data.OrSourCurr, orderEntryUI.orderEntryModel.Data.TrShipmentRateDate, orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency)
        });

        $("#Data_InRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.InRate, orderEntryUI.headerRefreshType.invoiceExchangeRate, orderEntryUI.orderEntryModel.Data.Inratetype, orderEntryUI.orderEntryModel.Data.OrSourCurr, orderEntryUI.orderEntryModel.Data.InRateDate, orderEntryUI.orderEntryModel.Data.Orhomecurr)
        });

        $("#Data_TrInvoiceRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.TrInvoiceRate, orderEntryUI.headerRefreshType.trInvoiceExchangeRate, orderEntryUI.orderEntryModel.Data.TrInvoiceRateType, orderEntryUI.orderEntryModel.Data.OrSourCurr,orderEntryUI.orderEntryModel.Data.TrInvoiceRateDate, orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency)
        });
        $("#OrderPrepayment_BankRate").on('change', function (e) {
            orderEntryUtility.refreshExchangeRate(e, orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate, orderEntryUI.headerRefreshType.PrepaymentBankRate, orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateType, orderEntryUI.orderEntryModel.Data.OrSourCurr, orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateDate, orderEntryUI.orderEntryModel.Data.Orhomecurr)
        });

        $("#Data_OrderDiscountPercentage").on('change', function(e) {
            orderEntryUI.orderEntryModel.Data.RecalculateTax(1);
            orderEntryUI.orderEntryModel.Data.PerformTaxCalculation(1);
            orderEntryUI.controlToFocus = "#Data_OrderDiscountPercentage";
            if (e.target.value === "" || e.target.value === null) {
                orderEntryUI.orderEntryModel.Data.OrderDiscountPercentage(0);
            }
            if (e.target.value != orderEntryUI.orderEntryModel.Data.OrderDiscountPercentage()) {
                orderEntryUI.orderEntryModel.Data.OrderDiscountPercentage(e.target.value);
            } else return;
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.orderDiscountPercentage);
        });

        $("#Data_OrderDiscountAmount").on('change', function (e) {
            orderEntryUI.controlToFocus = "#Data_OrderDiscountAmount";
            orderEntryUI.orderEntryModel.Data.RecalculateTax(1);
            orderEntryUI.orderEntryModel.Data.PerformTaxCalculation(1);
            if (e.target.value === "" || e.target.value === null) {
                orderEntryUI.orderEntryModel.Data.OrderDiscountAmount(0);
             }
            else if (e.target.value != orderEntryUI.orderEntryModel.Data.OrderDiscountAmount()) {
                orderEntryUI.orderEntryModel.Data.OrderDiscountAmount(e.target.value);
            } else return;
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.orderDiscountAmount);
        });

    },
    checkIsDirty: function (functionToCall) {
        var message = $.validator.format(orderEntryResources.UnsavedChangesPostMessage, orderEntryResources.Order, orderEntryUI.OrderNumber);
        if (orderEntryUI.orderEntryModel.isModelDirty && orderEntryUI.orderEntryModel.isModelDirty.isDirty()
            && orderEntryUI.orderEntryModel.Data.OrderNumber()) {
            sg.utls.showKendoConfirmationDialog(
                function () { // Yes
                    functionToCall.call();
                },
                function () { // No
                    if (orderEntryUI.OrderNumber != orderEntryUI.orderEntryModel.Data.OrderNumber()) {
                        orderEntryUI.orderEntryModel.Data.OrderNumber(orderEntryUI.OrderNumber);
                    }
                    return;
                }, message);
        } else {
            functionToCall.call();
        }
    },    
    //function to read grid based on grid id
    getGridPagedData: function (gridId) {
        var grid = $("#" + gridId).data("kendoGrid");
        grid.dataSource.data([]);
        grid.dataSource.page(1);
    },
    initSalesSplitGrid: function () {
        var params = {
            gridId: "SalesSplitGrid",
            modelData: orderEntryUI.orderEntryModel.Data,
            items: orderEntryUI.orderEntryModel,
            salesperchange: orderEntryUI.salesperChange,
            deletesaleperson: orderEntryRepository.DeleteSalesperson

        };
        saleSplitGridUI.init(params);
    },
    initTaxesGrid: function (initalise) {
        var params = {
            gridId: "orderTaxGrid",
            modelData: orderEntryUI.orderEntryModel.Data,
            btnEditColumnsId: "btnEditColumnsTaxes",
            currentRowTaxGroup: orderEntryUI.getTaxGroup,
            preferencesTypeId: sg.utls.OEUserPreferencesType.TaxesGridPreferenceKey,
            taxclassFilter: orderEntryUI.getTaxesfilter,
            taxeschange: orderEntryUI.dataChange,
            taxamounteditable: orderEntryUI.getTaxamounteditable(),
            taxreporteditable: orderEntryUI.getTaxrpteditable(),
            taxfromcurrency: orderEntryUI.orderEntryModel.OrderCurrencyDecimal(),
            taxtocurrency: orderEntryUI.TaxReportCurryDecimal,
            viewModel: orderEntryUI.orderEntryModel,
            isReadOnly: false

        };
        orderTaxGridUI.init(params, initalise);
    },
    initDetailtTaxGrid: function (initalise) {
        var getSelectedRow = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid('#OrderDetailGrid'));
        var detailNumber = getSelectedRow.DetailNumber;

        var detailData = ko.utils.arrayFirst(orderEntryUI.orderEntryModel.Data.OrderDetails.Items(), function (item) {
            return detailNumber === item.DetailNumber();
        });
        var detail = ko.mapping.toJS(detailData);
       
        var params = {
            gridId: "ItemTaxGrid",
            modelData: detail,
            btnEditColumnsId: "btnDetailTaxEditColumns",
            currentRowTaxGroup: orderEntryUI.getTaxGroup,
            taxclassFilter: orderEntryUI.getItemTaxesfilter,
            preferencesTypeId: sg.utls.OEUserPreferencesType.DetailTaxesGridPreferenceKey,
            taxeschange: orderEntryUI.DetailTaxdataChange,
            taxamounteditable: orderEntryUI.getTaxamounteditable(),
            taxreporteditable: orderEntryUI.getTaxrpteditable(),
            taxfromcurrency: orderEntryUI.orderEntryModel.OrderCurrencyDecimal(),
            taxtocurrency: orderEntryUI.TaxReportCurryDecimal,
            viewModel: orderEntryUI.orderEntryModel,
            taxIncludedYesNo: dropDownList.taxExemptDropdown,

        };
        orderTaxGridUI.init(params, initalise);
    },
    setItemTaxData: function () {
        var grid = gridUtility.fetchGrid(OrderDetailGrid);
        var index = sg.utls.kndoUI.getSelectedRowIndex(grid);
        var rowData = orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[index];

        orderEntryRepository.UpdatItemTax(rowData);
    },
    enableDisableTabs: function (disable) {
        var tabStrip = $("#orderEntryTabStrip").data("kendoTabStrip");

        //$(tabStrip.items()[5]).show();
        //tabStrip.enable($("#ratesTab"), true);
        //orderEntryUI.orderEntryModel.Data.isRatesTabVisible(true);
        //if (orderEntryViewModel && !orderEntryViewModel.IsMulticurrrency) {
        //    //$(tabStrip.items()[5]).hide();
        //    //tabStrip.disable($("#ratesTab"), true);
        //    orderEntryUI.orderEntryModel.Data.isRatesTabVisible(false);
        //}
        
        if (disable) {
            sg.utls.kndoUI.selectTab("orderEntryTabStrip", "orderTab");
            orderEntryUI.lastTabSelected = SelectedTabEnum.OrderTab;
            tabStrip.disable($("#customerTab"), true);
            tabStrip.disable($("#taxTab"), true);
            tabStrip.disable($("#optionalFieldTab"), true);
            tabStrip.disable($("#salesTab"), true);
            tabStrip.disable($("#ratesTab"), true);
            tabStrip.disable($("#totalTab"), true);
        } else {
            tabStrip.enable($("#customerTab"), true);
            tabStrip.enable($("#taxTab"), true);
            tabStrip.enable($("#optionalFieldTab"), true);
            tabStrip.enable($("#salesTab"), true);
            tabStrip.enable($("#ratesTab"), true);
            tabStrip.enable($("#totalTab"), true);
        }
    },
    createNewEntry: function() {
        sg.utls.clearValidations("frmOrderEntry");
        orderEntryUI.orderEntryModel.isModelDirty.reset();
        orderEntryRepository.createHeader();
    },
    initKittingGrid: function (initialize) {
        var orderDetailGrid = gridUtility.fetchGrid("#OrderDetailGrid");
        var orderDetail = sg.utls.kndoUI.getSelectedRowData(orderDetailGrid);

        var params = {
            gridId: "KittingComponentGrid",
            btnEditColumnsId: "btnKittingItemsEditColumns",
            preferencesTypeId: sg.utls.OEUserPreferencesType.KittingComponentsPopupGridPreferenceKey,
            preferences: KittingItemPreferences.detailGrid,
            kittingGridchange: orderEntryUI.kittingItemGridchange,
            keyFieldValue: orderDetail.LineNumber,
            headerModel: orderEntryUI.orderEntryModel.Data,
            dbName: orderEntryUI.orderEntryModel.DbName(),
            QuantityOnSOGridPreferencesTypeId: sg.utls.OEUserPreferencesType.QuantityOnSOGridPreferenceKey,
            QuantityOnPOGridPreferencesTypeId: sg.utls.OEUserPreferencesType.QuantityOnPOGridPreferenceKey,
            QuantityCommittedGridPreferencesTypeId: sg.utls.OEUserPreferencesType.QuantityCommittedGridPreferenceKey,
            AllLocQuantitySOGridPreferencesTypeId: sg.utls.OEUserPreferencesType.AllLocQuantitySOGridPreferenceKey,
            AllLocQuantityPOGridPreferencesTypeId: sg.utls.OEUserPreferencesType.AllLocQuantityPOGridPreferenceKey,
            AllLocQuantityCommittedGridPreferencesTypeId: sg.utls.OEUserPreferencesType.AllLocQuantityCommittedGridPreferenceKey,
            stockItem: orderDetail.StockItem,
            IsDisabled: orderDetail.DetailCompleted == detailItemCompleted.Yes || orderEntryUI.orderEntryModel.Data.disable(),
            FractionalQuantityDecimals: orderEntryUI.NumberOfDecimalsForQty,

            QuantityonSOGridId: "QuantityonSOGrid",
            QuantityonPOGridId: "QuantityonPOGrid",
            QuantityCommittedGridId: "QuantityCommittedGrid",
            AllLocQuantitySOGridId: "AllLocQuantitySOGrid",
            AllLocQuantityPOGridId: "AllLocQuantityPOGrid",
            AllLocQuantityCommGridId: "AllLocQuantityCommGrid",

            quantityOnSoGridWindow: "quantityOnSoGridWindow",
            quantityOnPoGridWindow: "quantityOnPoGridWindow",
            quantityCommittedGridWindow: "quantityCommittedGridWindow",
            AllLocQuantitySoGridWindow: "AllLocQuantitySoGridWindow",
            AllLocQuantityPoGridWindow: "AllLocQuantityPoGridWindow",
            AllLocQuantityCommittedGridWindow: "AllLocQuantityCommittedGridWindow",

            QuantityonHand: "txtKittingQuantityonHand",
            QuantityonSo: "txtKittingQuantityonSo",
            QuantityonPO: "txtKittingQuantityonPO",
            QuantityCommitted: "txtKittingQuantityCommitted",
            QuantityAvailable: "txtKittingQuantityAvailable",

            TotalQuantityonHand: "txtKittingTotalQuantityonHand",
            TotalQuantityonSo: "txtKittingTotalQuantityonSo",
            TotalQuantityonPO: "txtKittingTotalQuantityonPO",
            TotalQuantityCommitted: "txtKittingTotalQuantityCommitted",
            TotalQuantityAvailable: "txtKittingTotalQuantityAvailable",
        };
        kittingGridUI.init(params, initialize);
    },
    kittingItemGridchange: function (changedData) {
        var eventType;

        switch (changedData.columnName) {
            case "WeightUnitOfMeasure":

                eventType = orderEntryUI.kittingRefreshType.WeightUnitOfMeasure;
                break;
            case "UnitWeight":
                eventType = orderEntryUI.kittingRefreshType.UnitWeight;
                break;
            case "CostingUnitCost":                
                eventType = orderEntryUI.kittingRefreshType.CostingUnitCost;
                break;
            case "ExtendedWeight":                
                eventType = orderEntryUI.kittingRefreshType.ExtendedWeight;
                break;
            case "NonstockClearingAccount":
                eventType = orderEntryUI.kittingRefreshType.NonstockClearingAccount;
                break;
        }

        if (eventType && !orderEntryUI.kittingItemChanged) {
            var gridKittingItem = gridUtility.fetchGrid('#KittingComponentGrid');
            var selectedDetail = sg.utls.kndoUI.getSelectedRowData(gridKittingItem);
            orderEntryRepository.setKittingItem(selectedDetail, eventType);
        } else {
            orderEntryUI.kittingItemChanged = false;
        }
    },
    shipAllClicked: function() {
        if (orderEntryUI.orderEntryModel.Data.NoLinesQtyShipped() > 0) {
            sg.utls.showKendoConfirmationDialog(function () {
                orderEntryUI.shipAll();
            }, null, orderEntryResources.ShipAllMessage, orderEntryResources.WarningTitle);
        } else {
            orderEntryUI.shipAll();
        }
    },
    shipAll: function() {
        sg.utls.clearValidations("frmOrderEntry");
        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.shipAll);
        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.shipAll;
    },
    QuickPreAuth: function () {
        sg.utls.clearValidations("frmOrderEntry");
        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.QuickPreAuth);
        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.shipAll;
    },
    openHistoryPopup: function() {
        var url = sg.utls.url.buildUrl("OE", "SalesHistory", "Index") + "?customerNumber=" + orderEntryUI.orderEntryModel.Data.CustomerNumber() + "&guid=" + sg.utls.guid();
        sg.utls.iFrameHelper.openWindow("popupSalesHistory", "", url);
    },
    hasShippedItems: function () {
        var model = orderEntryUI.orderEntryModel.Data;
        var hasShippedItems = (model.NoLinesQtyShipped() > 0 || model.NoMiscChargesLines() > 0);
        if (!hasShippedItems) {
            for (var i = 0; i < model.OrderDetails.TotalResultsCount() ; i++) {
                if (model.OrderDetails.Items()[i] && model.OrderDetails.Items()[i].QuantityShipped() > 0) {
                    hasShippedItems = true;
                    break
                }
            }
        }
        return hasShippedItems;
    },
    btnComponentClicked: function() {
        var itemGrid = gridUtility.fetchGrid("#OrderDetailGrid");
        var selectedData = sg.utls.kndoUI.getSelectedRowData(itemGrid);
        if (selectedData.KittingBOM == OrderDetailItemType.Kitting) {
            orderEntryUI.kittingItemData = null;
            orderEntryUI.initKittingGrid(true);
            var grid = gridUtility.fetchGrid('#KittingComponentGrid');
            grid.dataSource.read();
            sg.utls.openKendoWindowPopup('#kittingComponentPopUpWindow', null);
        }
        else if (selectedData.KittingBOM == OrderDetailItemType.BOM) {
            var guid = sg.utls.guid();
            var url = sg.utls.url.buildUrl("OE", "OrderEntry", "BomComponent") + "?guid=" + guid + "&uniquifier=" + selectedData.OrderUniquifier + "&detailLineNo=" + selectedData.LineNumber + "&item=" + selectedData.Item + "&kitBomNo=" + selectedData.KitBOMNumber + "&quantity=" + selectedData.QuantityOrdered + "&pageSize=" + sg.utls.gridPageSize;
            sg.utls.iFrameHelper.openWindow(guid, bomComponentsResources.BomComponents, url, 463);
        }

    },
    distributTax: function() {
        orderEntryUI.taxEventType = 230;
        orderEntryUI.orderEntryModel.Data.PerformManualTaxDistribution(true);
        orderEntryRepository.SetTaxesAttribute(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data), orderEntryUI.taxEventType);
    },
    removeNewLine: function () {
        var grid = gridUtility.fetchGrid("#OrderDetailGrid");
        //Remove lines from grid
        $.each(grid.dataSource.data(), function (index, item) {
            if (item != undefined) {
                if ((item.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && (item.Item === null || item.Item === "")) ||
                (item.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Miscellaneous && (item.MiscellaneousChargesCode === null || item.MiscellaneousChargesCode === ""))) {
                    grid.dataSource.remove(item);
                    return;
                }
            }
     
        });
        //Remove rows from model
        var emptyItem = sg.utls.ko.arrayFirstItemOf(orderEntryUI.orderEntryModel.Data.OrderDetails.Items(), function (item) {
            return (item.LineType() == OrderDetailGridTypeEnum.lineTypeEnum.Item && (item.Item() == null || item.Item() == "")) ||
                (item.LineType() == OrderDetailGridTypeEnum.lineTypeEnum.Miscellaneous && (item.MiscellaneousChargesCode() === null || item.MiscellaneousChargesCode() === ""));
        });
        orderEntryUI.orderEntryModel.Data.OrderDetails.Items.remove(emptyItem);
    },
    createInvoice: function(checked) {
        if (orderEntryUI.hasShippedItems()) {
            orderEntryUI.orderEntryModel.Data.InvoiceWillBeProduced(checked);
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.invoiceWillBeProduced);
        } else if (checked) {
            sg.utls.showMessageInfo(sg.utls.msgType.ERROR, orderEntryResources.CreateInvoiceErrorMsg);
        }
    },
    checkOrderNumberExists: function () {
        if (orderEntryUI.orderEntryModel.Data.entryPosted()) {
            orderEntryUI.checkIsDirty(orderEntryUI.getOrderById);
        }
        var data = { orderNo: orderEntryUI.orderEntryModel.Data.OrderNumber() };
        var url = sg.utls.url.buildUrl("OE", "OrderEntry", "CheckIfOrderNoExists");
        sg.utls.ajaxPost(url, data, function (result) {
            if (result) {
                if ((orderEntryUI.orderEntryModel.Data.CustomerNumber() && !($("#tbCustNo").is(':disabled'))) && orderEntryUI.orderEntryModel.Data.entryPosted() == false) {
                    orderEntryUI.orderEntryModel.isModelDirty.isDirty(true);
                }
                orderEntryUI.checkIsDirty(orderEntryUI.getOrderById);
            } else {
                if (orderEntryUI.orderEntryModel.Data.CustomerNumber() == null || orderEntryUI.orderEntryModel.Data.CustomerNumber() == '') {
                    orderEntryUI.getOrderById();
                }
            }
        });
    },


};

var gridUtility = {
    headeroptionalFieldEmtyRow: function () {
      //Remove rows from model
        var emptyItem = sg.utls.ko.arrayFirstItemOf(orderEntryUI.orderEntryModel.Data.OrderOptionalFields.Items(), function (item) {
            return item.OptionalField() === null || item.OptionalField() === "";
        });
        orderEntryUI.orderEntryModel.Data.OrderOptionalFields.Items.remove(emptyItem);
      
    },
    setOrderEntryDetailGridData: function(successData) {
        var gridData = [];
        if (successData && !successData.Data) {
            if (successData.OrderDetails) {
                var isDirty = orderEntryUI.orderEntryModel.isModelDirty.isDirty();
                orderDetailGridUI.itemError = false;
                var custNo = $("#tbCustNo").val();
                var orderNo = $("#tbOrderNo").val();
                var ponumber = $("#tbPONumber").val();
                var template = $("#tbTemplateCode").val();
                var shipToLocCode = $("#tbShipToLocCode").val();
                var locCode = $("#tbLocCode").val();
                var shipViaCode = $("#tbShipViaCode").val();

                var calculateTaxChecked = orderEntryUI.orderEntryModel.Data.AutoTaxCalculationStatus();
                var createInvoice = $("#chkCreateInvoice").val();
                var createInvoiceTotal = $("#chkInvoiceProduced").val();
                
                if (orderEntryUI.lastActionCntl) {
                    if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.invoiceWillBeProduced || orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.invoiceWillBeProducedTotal) {
                        //successData.InvoiceWillBeProduced = createInvoice;
                    } else if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.CalculateTax) {
                        successData.AutoTaxCalculationStatus = calculateTaxChecked;
                        successData.RecalculateTax = calculateTaxChecked;
                        successData.PerformForcedTaxCalculation = calculateTaxChecked;
                    } else if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.orderNo) {
                        successData.OrderNumber = orderNo;
                    } else if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.PONumber) {
                        successData.PurchaseOrderNumber = ponumber;

                    } else if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.templatecode) {
                        successData.TemplateCode = template;

                    } else if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.shipToLoc) {
                        successData.ShipToLocationCode = shipToLocCode;

                    } else if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.Location) {
                        successData.DefaultLocationCode = locCode;
                    } else if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.ShipViaCode) {
                        successData.ShipViaCode = shipViaCode;
                    }
                }

                if (orderEntryUI.lastActionCnt == orderEntryUI.headerRefreshType.Refresh) {
                    ko.mapping.fromJS(successData, {}, orderEntryUI.orderEntryModel.Data);
                } else {
                    ko.mapping.fromJS(successData.OrderDetails, {}, orderEntryUI.orderEntryModel.Data.OrderDetails);
                }
              

                orderDetailGridUI.currentDataRow = null;
                orderEntryUI.orderEntryModel.Data.selectedOrderDetailRow(null);

                gridData.data = successData.OrderDetails.Items;
                gridData.totalResultsCount = successData.OrderDetails.TotalResultsCount;
                if (gridData.totalResultsCount > 0 && gridData.data[0] && gridData.data[0].Item && gridData.data[0].Location) {
                    orderEntryRepository.getLocationQuantityDetail(gridData.data[0].Item, gridData.data[0].Location);
                }
                if (orderEntryUI.tabChanged) {
                    orderEntryUI.changeTab();
                    orderEntryUI.tabChanged = false;
                }

                if (!isDirty) {
                    orderEntryUI.orderEntryModel.isModelDirty.reset();
                }

                if (orderEntryUI.lastActionCntl != null) {
                    switch (orderEntryUI.lastActionCntl) {
                    case orderEntryUI.headerRefreshType.invoiceWillBeProduced:
                        orderEntryUI.createInvoice(createInvoice);
                        break;
                    case orderEntryUI.headerRefreshType.invoiceWillBeProducedTotal:
                        orderEntryUI.createInvoice(createInvoiceTotal);
                            break;
                    case orderEntryUI.headerRefreshType.Customer:
                        orderEntryUI.orderEntryModel.Data.CustomerNumber(custNo);
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.Customer);
                        break;
                    case orderEntryUI.headerRefreshType.shipAll:
                        orderEntryUI.shipAllClicked();
                        break;
                    case orderEntryUI.headerRefreshType.Prepayment:
                        orderEntryRepository.checkPrepayError(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
                        break;
                    case orderEntryUI.headerRefreshType.PreAuthorize:
                        orderEntryRepository.launchPreAuth(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
                        break;
                    case orderEntryUI.headerRefreshType.CreateOrderFromQuotes:
                        sg.utls.openKendoWindowPopup('#createOrderFromQuotesWindow', null);
                        break;
                    case orderEntryUI.headerRefreshType.History:
                        orderEntryUI.openHistoryPopup();
                        break;
                    case orderEntryUI.headerRefreshType.ItemTax:
                        gridUtility.registerSettingsEventClick();
                        break;
                    case orderEntryUI.headerRefreshType.Components:
                        orderEntryUI.btnComponentClicked();
                        break;
                    case orderEntryUI.headerRefreshType.CalculateTax:
                        orderEntryUI.calculateTax(calculateTaxChecked);
                        break;
                    case orderEntryUI.headerRefreshType.distributeTax:
                        orderEntryUI.distributTax();
                        break;
                    case orderEntryUI.headerRefreshType.orderNo:
                        orderEntryUI.checkOrderNumberExists();
                        //orderEntryUI.checkIsDirty(orderEntryUI.getOrderById);
                        break;
                    case orderEntryUI.headerRefreshType.templatecode:
                        orderEntryUI.orderEntryModel.Data.TemplateCode(template);
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.templatecode);
                        break;
                    case orderEntryUI.headerRefreshType.PONumber:
                        orderEntryUI.orderEntryModel.Data.PurchaseOrderNumber(ponumber);
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.PONumber);
                        break;
                    case orderEntryUI.headerRefreshType.shipToLoc:
                        orderEntryUI.orderEntryModel.Data.ShipToLocationCode(shipToLocCode);
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.shipToLoc);
                        break;
                    case orderEntryUI.headerRefreshType.Location:
                        orderEntryUI.orderEntryModel.Data.DefaultLocationCode(locCode);
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.Location);
                        break;
                    case orderEntryUI.headerRefreshType.ShipVia:
                        orderEntryUI.orderEntryModel.Data.ShipViaCode(shipViaCode);
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ShipVia);
                        break;
                    case orderEntryUI.headerRefreshType.PreCheck:
                        orderEntryUI.preCreditCheckFormType = orderEntryEnum.PreCreditCheckFormType.PreCheck;
                        orderEntryRepository.launchPreCreditCheck(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
                        break;
                    }

                    orderEntryUI.lastActionCntl = null;
                    sg.controls.Focus($(orderEntryUI.controlToFocus));                   
                }
            }
        } else {
            if (orderEntryUI.lastActionCntl) {
                if (orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.invoiceWillBeProduced || orderEntryUI.lastActionCntl == orderEntryUI.headerRefreshType.invoiceWillBeProducedTotal) {
                    orderEntryUI.orderEntryModel.Data.InvoiceWillBeProduced(false);
                }

                sg.controls.Focus($(orderEntryUI.controlToFocus));
            }

            orderEntryUI.lastActionCntl = null;
            var data = ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderDetails);
            $.each(data.Items, function(index, item) {
                if (item.QuantityShippedtodate > 0) {
                    item.IsDeleted = false;
                }
            });
            ko.mapping.fromJS(data, {}, orderEntryUI.orderEntryModel.Data.OrderDetails);

            //var data = ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderDetails);
            gridData.data = data.Items;
            gridData.totalResultsCount = data.TotalResultsCount;
            orderEntryUtility.insertedIndex--;
        }
        
        if (successData && successData.Warnings && successData.Warnings.length > 0) {
            var userMessage = sg.utls.convertEntityErrorsToUserMessage(successData.Warnings);
            sg.utls.showMessageInEnumerableResponse(userMessage, null, true);
        } else {
            sg.utls.showMessage(successData);
        }
        return gridData;
    },
    setOrderEntryDetailGridLineEditable: function (e) {
        var gridDiv = $("#" + e.sender.element[0].id);
        var detailGrid = gridDiv.data("kendoGrid");
        var index = orderDetailColumnIndex.ItemOrMisc;
        var cell = detailGrid.tbody.find(">tr:first >td:eq(" + index + ")");
        //To disable the header checkbox when there items in the grid are cleared using Clear button
        if (orderEntryUI.orderEntryModel.Data.OrderDetails.Items() && orderEntryUI.orderEntryModel.Data.OrderDetails.Items().length === 0) {
            $("#OrderDetailSelectAllChk").attr("disabled", true);
        } else {
            $("#OrderDetailSelectAllChk").attr("disabled", false);
        }

        //Make the ItemOrMisc column editable and first line selected when Add line is clicked
        if (orderEntryUtility.addLineClicked) {
            var editableRow = orderEntryUtility.insertedIndex + 1;
            if (detailGrid.dataSource.data().length === 1) {
                editableRow = 0;
            }
            index = orderDetailColumnIndex.ItemOrMisc;
            cell = detailGrid.tbody.find(">tr:eq(" + editableRow + ") >td:eq(" + index + ")");
            detailGrid.editCell(cell);
            orderEntryUtility.setFirstLineEditable = false;
        }
        if (orderEntryUtility.moveToNextPage) {
            orderEntryUtility.moveToNextPage = false;
            orderEntryUtility.createNewRecord = true;
            detailGrid.dataSource.page(detailGrid.dataSource.page() + 1);
        }
        if (orderEntryUtility.createNewRecord) {
            gridUtility.gridAddLine("#" + e.sender.element[0].id, 'OE0500', '#btnOrderDetailDeleteLine');
            orderEntryUtility.createNewRecord = false;
            detailGrid.editCell(cell);
        }
        if (orderEntryUtility.setFirstLineEditable) {
            detailGrid.editCell(cell);
        }
        gridUtility.registerSettingsEvent();
        if (!lastSelection)
            lastSelection = e.sender.select().attr("data-uid");
    },
    setCreateOrderGridData: function (successData) {
        var gridData = [];
        if (successData && !successData.Data) {
            if (successData.OrderfromQuotes) {
                var isDirty = orderEntryUI.orderEntryModel.isModelDirty.isDirty();
                ko.mapping.fromJS(successData, {}, orderEntryUI.orderEntryModel.Data);
                gridData.data = successData.OrderfromQuotes.Items;
                gridData.totalResultsCount = successData.OrderfromQuotes.TotalResultsCount;                
                if (!isDirty) {
                    orderEntryUI.orderEntryModel.isModelDirty.reset();
                }
            }
        } else {
            var data = ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderfromQuotes);
            gridData.data = data.Items;
            gridData.totalResultsCount = data.TotalResultsCount;
            orderEntryUtility.insertedIndex--;            
        }
        $("#quoteWindowMessage").empty();
        sg.utls.showMessagePopup(successData, "#quoteWindowMessage");
        return gridData;
    },
    setCreateOrderGridLineEditable: function (e) {
        var gridDiv = $("#" + e.sender.element[0].id);
        var detailGrid = gridDiv.data("kendoGrid");
        var cell = detailGrid.tbody.find(">tr:first >td:eq(" + 1 + ")");
        //To disable the header checkbox when there items in the grid are cleared using Clear button
        if (orderEntryUI.orderEntryModel.Data.OrderfromQuotes.Items() && orderEntryUI.orderEntryModel.Data.OrderfromQuotes.Items().length === 0) {
            $("#CreateOrderSelectAllChk").attr("disabled", true);
        } else {
            $("#CreateOrderSelectAllChk").attr("disabled", false);
        }
        if (orderEntryUtility.addLineClicked) {
            var editableRow = orderEntryUtility.insertedIndex + 1;
            if (detailGrid.dataSource.data().length === 1) {
                editableRow = 0;
            }
            cell = detailGrid.tbody.find(">tr:eq(" + editableRow + ") >td:eq(" + 1 + ")");
            detailGrid.editCell(cell);
            orderEntryUtility.setFirstLineEditable = false;
        }
        if (orderEntryUtility.moveToNextPage) {
            orderEntryUtility.moveToNextPage = false;
            orderEntryUtility.createNewRecord = true;
            detailGrid.dataSource.page(detailGrid.dataSource.page() + 1);
        }
        if (orderEntryUtility.createNewRecord) {
            gridUtility.gridAddLine("#" + e.sender.element[0].id, 'OE0526', '#btnCreateOrderDeleteLine');
            orderEntryUtility.createNewRecord = false;
            detailGrid.editCell(cell);
        }
        if (orderEntryUtility.setFirstLineEditable) {
            detailGrid.editCell(cell);
        }


    },
    gridAddLine: function (gridName, entityName, btnDeleteline) {
        orderEntryUtility.addLineClicked = true;
        commentsInstructionGridUI.addLineClicked = true;
        var data = orderEntryUI.orderEntryModel.Data;
        var detailsGrid = gridUtility.fetchGrid(gridName);
        var pageNumber = detailsGrid.dataSource.page();
        var pageSize = detailsGrid.dataSource.pageSize();
        var dataRows = detailsGrid.items();
        orderEntryUtility.insertedIndex = dataRows.index(detailsGrid.select());
        if (orderEntryUtility.insertedIndex < 0) {
            orderEntryUtility.insertedIndex = 0;
        }
        if (orderEntryUI.orderEntryModel.isModelDirty && orderEntryUI.orderEntryModel.isModelDirty.isDataDirty && orderEntryUI.orderEntryModel.isModelDirty.isDataDirty()) {
            orderEntryUI.orderEntryModel.Data.HasChanged(true);
        }
        if (entityName == 'OE0500') {
            if (orderDetailGridUI.itemError) {
                return;
            }
            orderDetailGridUI.gridConfig.pageUrl = sg.utls.url.buildUrl("OE", "OrderEntry", "CreateDetail");
            orderDetailGridUI.gridConfig.param = {
                model: ko.mapping.toJS(data),
                entityName: entityName,
                index: orderEntryUtility.createNewRecord ? pageSize : orderEntryUtility.insertedIndex,
                pageNumber: pageNumber - 1,
                pageSize: pageSize,
            };
        }
        if (entityName == 'OE0526') {
            createOrderGridUI.gridConfig.pageUrl = sg.utls.url.buildUrl("OE", "OrderEntry", "CreateDetail");
            createOrderGridUI.gridConfig.param = {
                model: ko.mapping.toJS(data),
                entityName: entityName,
                index: orderEntryUtility.createNewRecord ? pageSize : orderEntryUtility.insertedIndex,
                pageNumber: pageNumber - 1,
                pageSize: pageSize,
            };
        }
        if (entityName == 'OE0180') {
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);
            orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items(orderEntryUI.orderEntryModel.commentInstructions.Items());
            orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.TotalResultsCount(orderEntryUI.orderEntryModel.commentInstructions.TotalResultsCount());

            commentsInstructionGridUI.CommentsInstructionGridConfig.pageUrl = sg.utls.url.buildUrl("OE", "OrderEntry", "CreateDetail");
            commentsInstructionGridUI.CommentsInstructionGridConfig.param = {
                model: ko.mapping.toJS(data),
                entityName: entityName,
                index: orderEntryUtility.createNewRecord ? pageSize : orderEntryUtility.insertedIndex,
                pageNumber: pageNumber - 1,
                pageSize: pageSize,
                detailParentId: currentRowGrid.LineNumber,
                detailParentNo: currentRowGrid.DetailNumber,
                commentType: orderEntryUI.CommentType
            };
        }
        if (orderEntryUtility.insertedIndex === (pageSize - 1)) {
            orderEntryUtility.addLineClicked = false;
            orderEntryUtility.moveToNextPage = true;
            commentsInstructionGridUI.addLineClicked = false;
        }
        detailsGrid.dataSource.read();
        detailsGrid.tbody.find(".selectChk").each(function (index) {
            if (!($(this).is(':checked'))) {
                sg.controls.disable(btnDeleteline);
                return;
            }
            else {
                sg.controls.enable(btnDeleteline);
            }
        });
    },
    deleteLine: function (gridId, chkAllId, confirmationMsg, btnDeleteId) {
        var resetToFirstPage = $(chkAllId).is(":checked");
        if ($('.selectChk:checked').length > 1) {
            confirmationMsg = orderEntryResources.DeleteLinesConfirm;
        } else {
            confirmationMsg = orderEntryResources.DeleteLineConfirm;
        }
        sg.utls.showKendoConfirmationDialog(
                        //Click on Yes
                        function () {
                            var grid = $(gridId).data("kendoGrid");
                            var pageNumber = grid.dataSource.page();
                            var pageSize = grid.dataSource.pageSize();
                            var total = grid.dataSource.total();
                            grid.tbody.find(":checked").closest("tr").each(function (index) {
                                grid.removeRow($(this));
                            });
                            if (gridId == "#CreateOrderGrid") {
                                orderEntryUtility.deleteLineClicked = true;
                                createOrderGridUI.gridConfig.pageUrl = sg.utls.url.buildUrl("OE", "OrderEntry", "GetDetails");
                                createOrderGridUI.gridConfig.param = {
                                    model: sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties),
                                    pageSize: pageSize,
                                    pageNumber: pageNumber - 1,
                                    entityName: "OE0526"
                                };
                            }
                            if (gridId == "#CommentsInstructionGrid") {
                                var detailgrid = gridUtility.fetchGrid('#OrderDetailGrid');
                                var selectedRow = sg.utls.kndoUI.getSelectedRowData(detailgrid);
                                var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(detailgrid);
                                orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items(orderEntryUI.orderEntryModel.commentInstructions.Items());
                                orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.TotalResultsCount(orderEntryUI.orderEntryModel.commentInstructions.TotalResultsCount());
                                if (orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items()) {
                                    gridUtility.removeEmptyComments(orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items);
                                }
                                commentsInstructionGridUI.CommentsInstructionGridConfig.pageUrl = sg.utls.url.buildUrl("OE", "OrderEntry", "GetDetails");
                                commentsInstructionGridUI.CommentsInstructionGridConfig.param = {
                                    model: ko.mapping.toJS(orderEntryUI.orderEntryModel.Data),
                                    entityName: "OE0180",
                                    pageNumber: pageNumber - 1,
                                    pageSize: pageSize,
                                    detailParentId: selectedRow.LineNumber,
                                    detailParentNo: selectedRow.DetailNumber,
                                    commentType: orderEntryUI.CommentType

                                };
                            }
                            grid.dataSource.read();
                            if (resetToFirstPage) {
                                if (pageNumber > (total / pageSize)) {
                                    grid.dataSource.page(grid.dataSource.page() - 1);
                                } else {
                                    grid.dataSource.page(grid.dataSource.page());
                                }

                            }
                            if (grid.dataSource.total() == 0) {
                                sg.controls.disable(chkAllId);
                                if (gridId == "#OrderDetailGrid") {
                                    orderEntryRepository.getLocationQuantityDetail(null, null);
                                }
                            }
                            else {
                                sg.controls.enable(chkAllId);
                            }
                            $(chkAllId).attr("checked", false).parent().attr("class", "icon checkBox");
                            sg.controls.disable(btnDeleteId);
                        },
                            // Click on No
                            function () { },
                            confirmationMsg, globalResource.DeleteTitle);
        return false;
    },
    multiSelectInit: function (gridId, selectAllChk, selectChk, btnDeleteId) {
        if ($(gridId)) {
            $(document).on("change", selectAllChk, function () {
                
                var grid = gridUtility.fetchGrid(gridId);
                var checkbox = $(this);
                var rows = grid.tbody.find("tr");
                rows.find("td:first input")
                    .prop("checked", checkbox.is(":checked")).applyCheckboxStyle();
                if ($(selectAllChk).is(":checked") && !gridUtility.disableDeleteBtn(btnDeleteId)) {
                    rows.addClass("k-state-active");
                    sg.controls.enable(btnDeleteId);
                } else {
                    rows.removeClass("k-state-active");
                    sg.controls.disable(btnDeleteId);
                }

            });

            $(document).on("change", selectChk, function () {
                var grid = gridUtility.fetchGrid(gridId);
                var allChecked = true;
                var hasChecked = false;
                $(this).closest("tr").toggleClass("k-state-active");
                grid.tbody.find(".selectChk").each(function (index) {
                    if (!($(this).is(':checked'))) {
                        $(selectAllChk).prop("checked", false).applyCheckboxStyle();
                        allChecked = false;
                        return;
                    } else {
                        hasChecked = true;
                    }
                });
                if (allChecked) {
                    $(selectAllChk).prop("checked", true).applyCheckboxStyle();
                }

                if (hasChecked && !gridUtility.disableDeleteBtn(btnDeleteId)) {
                    sg.controls.enable(btnDeleteId);

                } else {
                    sg.controls.disable(btnDeleteId);
                }
            });
        }
    },
    disableDeleteBtn: function(btnDeleteId) {
        if (btnDeleteId == "#btnOrderDetailDeleteLine") {
            return orderEntryUI.orderEntryModel.Data.disable();
        }
        else if (btnDeleteId == "#btnCreateOrderDeleteLine") {
           return orderEntryUI.orderEntryModel.Data.disableAddMultipleQuote();           
        }
        else if (btnDeleteId == "#btnCommentsInstructionsDeleteLine") {
            return orderEntryUI.orderEntryModel.Data.disableDetailControls();
        }

        return false;
    },
    getLineType: function (fieldValue) {
        if (fieldValue != null) {
            if (fieldValue != "N") {
                return $.grep(ko.mapping.toJS(orderEntryUI.orderEntryModel.LineTypeList), function (n, i) {
                    return n["Value"] == fieldValue ? n["Text"] : "";
                })[0]["Text"];
            } else {
                return $.grep(ko.mapping.toJS(orderEntryUI.orderEntryModel.LineTypeList), function (n, i) {
                    return n["Value"] == fieldValue ? n["Text"] : "";
                })[0]["Text"];
            }
        }
    },
    getPriceBy: function (fieldValue,type) {
        if (fieldValue != null && type == OrderDetailGridTypeEnum.lineTypeEnum.Item) {
            if (fieldValue != "N") {
                return $.grep(ko.mapping.toJS(orderEntryUI.orderEntryModel.PriceByList), function (n, i) {
                    return n["Value"] == fieldValue ? n["Text"] : "";
                })[0]["Text"];
            } else {
                return $.grep(ko.mapping.toJS(orderEntryUI.orderEntryModel.PriceByList), function (n, i) {
                    return n["Value"] == fieldValue ? n["Text"] : "";
                })[0]["Text"];
            }
        } else {
            return "";
        }
    },
    getFormattedValue: function (fieldValue, type,decimal) {
        if (fieldValue != null && type == OrderDetailGridTypeEnum.lineTypeEnum.Item) {
            var val = sg.utls.kndoUI.getFormattedDecimal(fieldValue, decimal);
            return  val ;
        }
        else if (type == OrderDetailGridTypeEnum.lineTypeEnum.Miscellaneous) {
            return "";
        }
        else
          return  "";
            

    },
    getPriceApproval: function (fieldValue) {
        if (fieldValue != null ) {
            return (fieldValue === "1" || fieldValue === 1) ? orderEntryResources.Yes : orderEntryResources.No;
        }
    },
    getFormattedDateTemplate: function (fieldValue, type) {
        if (fieldValue != null && type == OrderDetailGridTypeEnum.lineTypeEnum.Item) {
            return sg.utls.kndoUI.getFormattedDate(fieldValue);
        } else return "";
    },
    getCommentsInstructions: function (fieldValue) {
        if (isNaN(fieldValue)) {
            return fieldValue === "Yes" ? orderEntryResources.Yes : orderEntryResources.No;
        }
        else {
            return (fieldValue === "1" || fieldValue === 1) ? orderEntryResources.Yes : orderEntryResources.No;
        }

    },
    getDetailCompleted: function (fieldValue) {
        if (isNaN(fieldValue)) {
            return fieldValue === "Yes" ? orderEntryResources.Yes : orderEntryResources.No;
        }
        else {
            return (fieldValue === "1" || fieldValue === 1||fieldValue === "2" || fieldValue === 2 || fieldValue === "3" || fieldValue === 3) ? orderEntryResources.Yes : orderEntryResources.No;
        }
    },
    setColumnNonEditable: function (container, grid) {
        sg.utls.kndoUI.nonEditable(grid, container);
    },
    fetchGrid: function (gridId) {
        return $(gridId).data("kendoGrid");
    },

    readGrid: function (gridName) {
        var grid = gridUtility.fetchGrid(gridName);
        grid.dataSource.data([]);
        grid.dataSource.page(1);
    },
    newOptionalFieldLineItem: function () {
        var newOptFieldLine = {
            "OrderUniquifier": orderEntryUI.orderEntryModel.Data.OrderUniquifier(),
            "DisplayIndex": sg.utls.generatekey(),
        };
        return newOptFieldLine;
    },
    newDetailOptionalFieldLineItem: function () {
        var newdetailOptFieldLine = {
            "OrderUniquifier": orderEntryUI.orderEntryModel.Data.OrderUniquifier(),
            "LineNumber": orderEntryUI.LineNumber,
            "DisplayIndex": sg.utls.generatekey(),
        };
        return newdetailOptFieldLine;
    },
    resetFocus: function (gridName, dataItem, columnName) {
        var index = window.GridPreferencesHelper.getColumnIndex(gridName, columnName);
        var detailsGrid = gridUtility.fetchGrid(gridName);
        var row = sg.utls.kndoUI.getRowForDataItem(dataItem);
        detailsGrid.closeCell();
        setTimeout(function () {
            detailsGrid.editCell(row.find(">td").eq(index));
        }, 30);
    },
    registerSettingsEvent: function () {
        $("input[name='btnItemTaxSettings']").unbind('click');
        $("input[name='btnItemTaxSettings']").click(function () {
            var rowIndex = parseInt($(this).attr('tag'));
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var gridData = sg.utls.kndoUI.getRowByKey(grid.dataSource.data(), "LineNumber", rowIndex);
            var row = sg.utls.kndoUI.getRowForDataItem(gridData);
            var colIndex = window.GridPreferencesHelper.getColumnIndex('#OrderDetailGrid', "DetailAccountTax");
            grid.editCell(row.find(">td:eq(" + colIndex + ")"));
            if (gridData.Item != null && gridData.Item != "") {
                if (gridData.DetailCompleted == detailItemCompleted.Yes || orderEntryUI.orderEntryModel.Data.disable() ) {
                    orderTaxGridUI.isreadonly = true;
                } else {
                    orderTaxGridUI.isreadonly = false;
                }
                               
                if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                    orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.ItemTax;
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
                } else {
                    gridUtility.registerSettingsEventClick();
                }
            }           
        });
    },
    registerSettingsEventClick: function() {
        orderEntryRepository.readHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        orderEntryUI.initDetailtTaxGrid(true);
        orderEntryUI.refreshTaxGridData(true);
        sg.utls.openKendoWindowPopup('#DetailTaxWindow', null);
    },
    getSettings: function (container, btnid) {
        var html = '<div class="edit-cell inpt-finder"><input class="icon edit-field cmntinstPopup" id="' + btnid + '" name="' + btnid + '" type="button"></input></div>';
        var div = $(html);
        var button = div.find('input[type=button]')[0];
        button.id = button.id + container;
        $(button).attr('tag', container);
        return div.html();
    },
    getObservable: function (observableArray, key, value) {
        return ko.utils.arrayFirst(observableArray(), function (item) {
            if ($.isFunction(item[key])) {
                return item[key]() === value;
            } else {
                return item[key] === value;
            }
        });
    },
    getDropDownConversion: function (fieldValue) {
        var result = "";
        if (fieldValue == 0) {
            result = "No";
        } else {
            result = "Yes";
        }
        return result;
    },
    getLocationQuantityDecimal: function (fieldValue) {
        if (fieldValue !== null && fieldValue !== "") {
            var locationQuantityDecimals = orderEntryUI.NumberOfDecimalsForQty;

            fieldValue = sg.utls.kndoUI.getFormattedDecimalNumber(fieldValue, locationQuantityDecimals);
            return fieldValue;
        }
        return fieldValue;
    },
    newLineExists: function (gridName, field) {
        var grid = gridUtility.fetchGrid(gridName);
        var items = grid.dataSource.data();       
        var exists = false;
        
        for (var i = 0; i < items.length; i++) {
            if (items[i].IsNewLine == true && (items[i].Item == "" || items[i].Item == null)) {
                exists = true;
                gridUtility.resetFocus(gridName, sg.utls.kndoUI.getSelectedRowData(grid), field);
                break;
            }
        }

        return exists;
    },
    hasNewRecord: function (gridName) {
        var grid = gridUtility.fetchGrid(gridName);
        var items = grid.dataSource.data();
        var changed = false;

        for (var i = 0; i < items.length; i++) {
            if (items[i].IsNewLine) {
                changed = true;
                break;
            }
        }

        return changed;
    },
    hasRecordsChanged: function (gridName) {
        var grid = gridUtility.fetchGrid(gridName);
        var items = grid.dataSource.data();
        var changed = false;

        for (var i = 0; i < items.length; i++) {
            if (items[i].IsNewLine || items[i].HasChanged) {
                changed = true;
                break;
            }
        }

        return changed;
    },
    refreshRecords: function(gridName) {
        if (gridUtility.hasRecordsChanged(gridName)) {
            $(gridName).data("kendoGrid").dataSource.read();
        }
    },
    convertToBoolean: function (value) {
        switch (value.toString().toLowerCase()) {
            case "true": case "yes": case "1": return true;
            case "false": case "no": case "0": case null: return false;
            default: return Boolean(value);
        }
    },
    headerOptionalFieldSave: function () {
      orderEntryRepository.saveOptionalFields(orderEntryUI.orderEntryModel.Data.OrderOptionalFields.Items);
    },
    removeEmptyComments: function (data) {
        var itemNull = sg.utls.ko.arrayFirstItemOf(data(), function (dataItem) {
            return (dataItem.Comments() === null || dataItem.Comments() === "");
        });

        data.remove(itemNull);
        return data;
    },
};
var detailGridfinderOnSuccess = {
    itemSuccess: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid('#OrderDetailGrid');
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);
            var data = orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex];
            orderEntryRepository.getItems(rowdata.UnformattedItemNumber.toUpperCase(), orderEntryUI.orderEntryModel.Data.CustomerNumber(), data);
        }

    },
    getItemTypeSuccess: function (jsonResult) {
        sg.utls.SyncExecute(function () {
            sg.ic.utls.setItemTypeResponse(jsonResult, "#btnManufacturerItemFinder", finderOnSuccess.manufacturerItem);
        });
    },
    onMiscellaneousChargeSelection: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid('#OrderDetailGrid');
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("MiscellaneousChargesCode", rowdata.MiscellaneousChargeCode);
            }
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);
            var data = orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex];
            orderEntryRepository.getMiscellaneousCharge(data);
        }
    },
    manufactureItemCancel: function () {
        var grid = gridUtility.fetchGrid('#OrderDetailGrid');
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        sg.ic.utls.getDefaultItemNumber(currentRowGrid.Item.toUpperCase(), finderOnSuccess.manufacturerItem);
    },
    PriceListCode: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("PriceList", rowdata.PriceListCodeName);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "PriceList");
        }
    },
    Locationsuccess: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("Location", rowdata.LOCATION);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "Location");
        }
    },
    OrderUnitOfMeasuresuccess: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("OrderUnitOfMeasure", rowdata.UnitOfMeasure);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "OrderUnitOfMeasure");
        }
    },
    OrderWeightUOMsuccess: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("OrderWeightUOM", rowdata.WeightUnitsOfMeasure);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "OrderWeightUOM");
        }
    },
    Categorysuccess: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("Category", rowdata.CategoryCode);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "OrderWeightUOM");
        }
    },
    ShipViaCodesuccess: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("ShipViaCode", rowdata.Code);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "ShipViaCode");
        }
    },
    KittingNumber:
         function (rowdata) {
             if ($('#OrderDetailGrid')) {
                 $("#message").empty();
                 var grid = gridUtility.fetchGrid("#OrderDetailGrid");
                 var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                 if (currentRowGrid) {
                     currentRowGrid.set("KitBOMNumber", rowdata.KittingNumber);
                 }
                 gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "KitBOMNumber");
             }
         },
    NonStockclrAccount:
          function (rowdata) {
              if ($('#OrderDetailGrid')) {
                  $("#message").empty();
                  var grid = gridUtility.fetchGrid("#OrderDetailGrid");
                  var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                  if (currentRowGrid) {
                      currentRowGrid.set("NonstockClearingAccount", rowdata.AccountNumber);
                  }
                  gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "NonstockClearingAccount");
              }
          },
    onItemPricingSuccess: function (rowdata) {
        if ($('#OrderDetailGrid') && rowdata) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowGrid) {
                currentRowGrid.set("PricingUnitPrice", rowdata.KeyPrice);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "PricingUnitPrice");
        }
    },
};
var detailGridfilter = {
    getItemFilter: function () {
        var filters = [[], [], []];
        var item = $("#txtItem").val();
        filters[0][0] = sg.finderHelper.createFilter("ItemNumber", sg.finderOperator.StartsWith, item);
        return filters;
    },
    misceChargeCodeFilter: function () {
        var filters = [[]];
        var miscChargeCode = sg.finderHelper.createFilter("MiscellaneousChargeCode", sg.finderOperator.StartsWith, $("#txtMiscCharge").val());
        var currencyCode = sg.finderHelper.createFilter("Currency", sg.finderOperator.Equal, sg.controls.GetString(orderEntryUI.orderEntryModel.Data.OrSourCurr()));
        filters[0][0] = currencyCode;
        filters[0][0].IsMandatory = true;
        filters[0][1] = miscChargeCode;
        return filters;
    },
    //orderdetail grid pricelist finder
    priceListCodeFilter: function () {
        var priceListCodeFilters = [[]];
        var filter = sg.finderHelper.createFilter("PriceListCodeName", sg.finderOperator.StartsWith, $("#txtPriceListCode").val());

        priceListCodeFilters[0][0] = filter;
        return priceListCodeFilters;
    },

    unitofMeasureFilter: function () {
        var grid = $('#OrderDetailGrid').data("kendoGrid");
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        var filters = [[]];
        var unitofmeasure = $("#txtUnitOfMeasure").val();
        filters[0][0] = window.sg.finderHelper.createFilter("UnitOfMeasure", window.sg.finderOperator.StartsWith, unitofmeasure);
        filters[0][1] = window.sg.finderHelper.createFilter("ItemNumber", window.sg.finderOperator.Equal, currentRowGrid["UnformattedItemNumber"]);
        filters[0][1].IsMandatory = true;
        return filters;

    },
    locationFilter: function () {
        var grid = $('#OrderDetailGrid').data("kendoGrid");
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        var filters = [[]];
        var unformattedItem = currentRowGrid["UnformattedItemNumber"];
        var location = $("#txtLocation").val();
        filters[0][1] = sg.finderHelper.createFilter("ItemNumber", sg.finderOperator.Equal, unformattedItem);
        filters[0][0] = sg.finderHelper.createFilter("LOCATION", sg.finderOperator.StartsWith, location);

        return filters;
    },
    getKittingNumberFilter: function () {
        var grid = $('#OrderDetailGrid').data("kendoGrid");
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        var filter = [[], []];
        filter[0][0] = sg.finderHelper.createFilter("KittingNumber", sg.finderOperator.StartsWith, currentRowGrid["KitBOMNumber"]);
        filter[0][1] = sg.finderHelper.createFilter("UnformattedItemNumber", sg.finderOperator.Equal, currentRowGrid["UnformattedItemNumber"]);
        filter[0][1].IsMandatory = true;


        return filter;
    },
    alternateItemFilter: function () {
        var itemFilters = [[]];
        var selectedRowData = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid("#OrderDetailGrid"));
        itemFilters[0][0] = sg.finderHelper.createFilter("ItemNumber", sg.finderOperator.StartsWith, $("#txtItem").val());
        itemFilters[0][1] = sg.finderHelper.createFilter("AlternateItemSetNumber", sg.finderOperator.Equal, selectedRowData.AlternateItemSetNumber);
        itemFilters[0][1].IsMandatory = true;
        return itemFilters;
    },

    itemFilter: function () {
        var itemFilters = [[]];
        var selectedRowData = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid("#OrderDetailGrid"));
        var filter = sg.finderHelper.createFilter("ItemNumber", sg.finderOperator.StartsWith, selectedRowData.Item);
        itemFilters[0][0] = filter;
        return itemFilters;
    },
    itemPricingFilter: function () {
        var grid = gridUtility.fetchGrid("#OrderDetailGrid");
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);

        var filters = [[]];
        var unformattedItem = currentRowGrid.Item.replace(/[^a-zA-Z0-9]/g, '');
        filters[0][1] = sg.finderHelper.createFilter("Item", sg.finderOperator.Equal, unformattedItem);
        filters[0][1].IsMandatory = true;
        filters[0][0] = sg.finderHelper.createFilter("Currency", sg.finderOperator.Equal, sg.controls.GetString(orderEntryUI.orderEntryModel.Data.OrSourCurr()));
        filters[0][0].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("PriceList", sg.finderOperator.Equal, currentRowGrid.PriceList);
        filters[0][2].IsMandatory = true;
        filters[0][3] = sg.finderHelper.createFilter("OrderDate", sg.finderOperator.Equal, sg.controls.GetString(orderEntryUI.orderEntryModel.Data.OrderDate()));
        filters[0][3].IsMandatory = true;

        var filterstr = [[]];
        //filterstr[0][0] = sg.finderHelper.createFilter("filterQuery", sg.finderOperator.Equal, "(0000042205USD1200        CALIF       STATE       COUNTY                                          0000100001000000000000000A1-103/0                USA   1     Ea.       lbs.      1 A1    0.000000                29.208000               0.000000                0.000000                29.064955               26.981333               000010000100000000000000000000000000000000000000001.0000                  )");
        //                                                                                    (     42173USD        1200       CALIF       STATE      COUNTY                                        1    1    0    0    0                A1-103/0   USA     1       Ea.      lbs.    1    A1                       0                       0                       0                       0                       0                       0    1    1    0    0    0falsefalsefalsefalsefalse                        )
        filterstr[0][0] = sg.finderHelper.createFilter("filterQuery", sg.finderOperator.Equal, utility.getItemPriceFilter());
        filterstr[0][0].IsMandatory = true;
        filters = filters.concat(filterstr);

        return filters;
    },
};
var orderDetailGridOnSuccess = {
    changeFromServer: false,
    refreshGridModel: function (row) {
        var grid = gridUtility.fetchGrid("#OrderDetailGrid");
        var gridData = sg.utls.kndoUI.getRowByKey(grid.dataSource.data(), "DetailNumber", row.DetailNumber);
        //sg.utls.kndoUI.getSelectedRowData(grid);
        //if (orderDetailGridUI.currentDataRow && !row.IsNewLine) {
        //    gridData = sg.utls.kndoUI.getRowByKey(grid.dataSource.data(), "DetailNumber", orderDetailGridUI.currentDataRow.DetailNumber);
        //    orderDetailGridUI.currentDataRow = null;
        //}
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("LineType", sg.controls.GetString(row.LineType));
        gridData.set("IsNewLine", row.IsNewLine);
        gridData.set("ReturnType", sg.controls.GetString(row.ReturnType));
        if (row.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item) {
            orderDetailGridOnSuccess.changeFromServer = true;
            gridData.set("Item", sg.controls.GetString(row.Item));
        } else {
            orderDetailGridOnSuccess.changeFromServer = true;
            gridData.set("Item", sg.controls.GetString(row.MiscellaneousChargesCode));
        }
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("MiscellaneousChargesCode", sg.controls.GetString(row.MiscellaneousChargesCode));
        gridData.set("KittingBOM", sg.controls.GetString(row.KittingBOM));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("KitBOMNumber", sg.controls.GetString(row.KitBOMNumber));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("Description", sg.controls.GetString(row.Description));
        gridData.set("StockItem", sg.controls.GetString(row.StockItem));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("UnformattedItemNumber", sg.controls.GetString(row.UnformattedItemNumber));
        gridData.set("PriceList", sg.controls.GetString(row.PriceList));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("Location", sg.controls.GetString(row.Location));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("UnitPriceNoOfDecimals", sg.controls.GetString(row.UnitPriceNoOfDecimals));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("OrderWeightUOM", sg.controls.GetString(row.OrderWeightUOM));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("OrderUnitOfMeasure", sg.controls.GetString(row.OrderUnitOfMeasure));
        gridData.set("PriceBy", sg.controls.GetString(row.PriceBy));
        gridData.set("PricingUnitOfMeasure", sg.controls.GetString(row.PricingUnitOfMeasure));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("PricingUnitPrice", sg.controls.GetString(row.PricingUnitPrice));
        gridData.set("PriceApprovalNeeded", sg.controls.GetString(row.PriceApprovalNeeded));
        gridData.set("ShipmentDate", sg.controls.GetString(row.ShipmentDate));
        gridData.set("QuantityperLot", sg.controls.GetString(row.QuantityperLot));
        gridData.set("QuantityShipped", sg.controls.GetString(row.QuantityShipped));
        gridData.set("QuantityBackordered", sg.controls.GetString(row.QuantityBackordered));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("UnitWeight", sg.controls.GetString(row.UnitWeight));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("ExtendedWeight", sg.controls.GetString(row.ExtendedWeight));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("ExtendedAmount", sg.controls.GetString(row.ExtendedAmount));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("DiscountPercent", sg.controls.GetString(row.DiscountPercent));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("OrderDiscountAmount", sg.controls.GetString(row.OrderDiscountAmount));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("DiscountedExtendedAmount", sg.controls.GetString(row.DiscountedExtendedAmount));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("Category", sg.controls.GetString(row.Category));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("OrderUnitCost", sg.controls.GetString(row.OrderUnitCost));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("CostingUnitCost", sg.controls.GetString(row.CostingUnitCost));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("CostingUnitOfMeasure", sg.controls.GetString(row.CostingUnitOfMeasure));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("ExtendedOrderCost", sg.controls.GetString(row.ExtendedOrderCost));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("UseCommentsInstructions", sg.controls.GetString(row.UseCommentsInstructions));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("ShipViaCode", sg.controls.GetString(row.ShipViaCode));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("ShipViaCodeDescription", sg.controls.GetString(row.ShipViaCodeDescription));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("ShipmentTrackingNumber", sg.controls.GetString(row.ShipmentTrackingNumber));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("ManufacturersItemNumber", sg.controls.GetString(row.ManufacturersItemNumber));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("CustomerItemNumber", sg.controls.GetString(row.CustomerItemNumber));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("NonstockClearingAccount", sg.controls.GetString(row.NonstockClearingAccount));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("QuantityShippedtodate", sg.controls.GetString(row.QuantityShippedtodate));
        gridData.set("TaxAuthority1", sg.controls.GetString(row.TaxAuthority1));
        gridData.set("TaxAuthority2", sg.controls.GetString(row.TaxAuthority2));
        gridData.set("TaxAuthority3", sg.controls.GetString(row.TaxAuthority3));
        gridData.set("TaxAuthority4", sg.controls.GetString(row.TaxAuthority4));
        gridData.set("TaxAuthority5", sg.controls.GetString(row.TaxAuthority5));
        orderDetailGridOnSuccess.changeFromServer = true;
        gridData.set("OptionalFields", sg.controls.GetString(row.OptionalFields));
        gridData.set("QuantityCommitted", sg.controls.GetString(row.QuantityCommitted));
        gridData.set("DetailCompleted", sg.controls.GetString(row.DetailCompleted));
        gridData.set("OptionalFieldString", sg.controls.GetString(row.OptionalFieldString));
        gridData.set("AlternateItemNumber", row.AlternateItemNumber);
        gridData.set("AlternateItemSetNumber", row.AlternateItemSetNumber);
        gridData.set("Attributes", row.Attributes);
        gridData.set("FoundNegativeInventory", row.FoundNegativeInventory);
        
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        
        switch (orderEntryUI.lastupdatedcolumn) {
            case "Item":
                if (row.KittingBOM == 0) {
                    setTimeout(function () { gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "Description"); });
                } else {
                    setTimeout(function () { gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "KitBOMNumber"); });
                }
                break;
            case "MiscellaneousChargesCode":
                setTimeout(function () { gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "Description"); });
                break;
            case "KitBOMNumber":
                setTimeout(function () { gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "Description"); });
                break;
            case "Description":
                setTimeout(function () { gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "PriceList"); });
                break;
        }

        orderDetailGridOnSuccess.changeFromServer = false;
    },
};



var orderDetailHeader = {
    LineTitle: $(orderDetailGridColumns.headerLineNumber).text(),
    LineHidden: $(orderDetailGridColumns.headerLineNumber).attr("hidden") ? $(orderDetailGridColumns.headerLineNumber).attr("hidden") : false,
    LineTypeTitle: $(orderDetailGridColumns.headerLineType).text(),
    LineTypeHidden: $(orderDetailGridColumns.headerLineType).attr("hidden") ? $(orderDetailGridColumns.headerLineType).attr("hidden") : false,
    ItemTitle: $(orderDetailGridColumns.headerItemTitile).text(),
    ItemHidden: $(orderDetailGridColumns.headerItem).attr("hidden") ? $(orderDetailGridColumns.headerItem).attr("hidden") : false,
    KitBOMNumberTitle: $(orderDetailGridColumns.headerKitBOMNumber).text(),
    KitBOMNumberHidden: $(orderDetailGridColumns.headerKitBOMNumber).attr("hidden") ? $(orderDetailGridColumns.headerKitBOMNumber).attr("hidden") : false,
    DescriptionTitle: $(orderDetailGridColumns.headerDescription).text(),
    DescriptionHidden: $(orderDetailGridColumns.headerDescription).attr("hidden") ? $(orderDetailGridColumns.headerDescription).attr("hidden") : false,
    PriceListTitle: $(orderDetailGridColumns.headerPriceList).text(),
    PriceListHidden: $(orderDetailGridColumns.headerPriceList).attr("hidden") ? $(orderDetailGridColumns.headerPriceList).attr("hidden") : false,
    LocationTitle: $(orderDetailGridColumns.headerLocation).text(),
    LocationHidden: $(orderDetailGridColumns.headerLocation).attr("hidden") ? $(orderDetailGridColumns.headerLocation).attr("hidden") : false,
    DeliverByTitle: $(orderDetailGridColumns.headerDeliverBy).text(),
    DeliverByHidden: $(orderDetailGridColumns.headerDeliverBy).attr("hidden") ? $(orderDetailGridColumns.headerDeliverBy).attr("hidden") : false,
    ExpShipDateTitle: $(orderDetailGridColumns.headerExpShipDate).text(),
    ExpShipDateHidden: $(orderDetailGridColumns.headerExpShipDate).attr("hidden") ? $(orderDetailGridColumns.headerExpShipDate).attr("hidden") : false,
    QtyOrderedTitle: $(orderDetailGridColumns.headerQtyOrdered).text(),
    QtyOrderedHidden: $(orderDetailGridColumns.headerQtyOrdered).attr("hidden") ? $(orderDetailGridColumns.headerQtyOrdered).attr("hidden") : false,
    OrderUOMTitle: $(orderDetailGridColumns.headerOrderUOM).text(),
    OrderUOMHidden: $(orderDetailGridColumns.headerOrderUOM).attr("hidden") ? $(orderDetailGridColumns.headerOrderUOM).attr("hidden") : false,
    OrderWeightUOMTitle: $(orderDetailGridColumns.headerOrderWeightUOM).text(),
    OrderWeightUOMHidden: $(orderDetailGridColumns.headerOrderWeightUOM).attr("hidden") ? $(orderDetailGridColumns.headerOrderWeightUOM).attr("hidden") : false,
    PriceByTitle: $(orderDetailGridColumns.headerPriceBy).text(),
    PriceByHidden: $(orderDetailGridColumns.headerPriceBy).attr("hidden") ? $(orderDetailGridColumns.headerPriceBy).attr("hidden") : false,
    PricingUOMTitle: $(orderDetailGridColumns.headerPricingUOM).text(),
    PricingUOMHidden: $(orderDetailGridColumns.headerPricingUOM).attr("hidden") ? $(orderDetailGridColumns.headerPricingUOM).attr("hidden") : false,
    UnitPriceTitle: $(orderDetailGridColumns.headerUnitPrice).text(),
    UnitPriceHidden: $(orderDetailGridColumns.headerUnitPrice).attr("hidden") ? $(orderDetailGridColumns.headerUnitPrice).attr("hidden") : false,
    PriceApprovalTitle: $(orderDetailGridColumns.headerPriceApproval).text(),
    PriceApprovalHidden: $(orderDetailGridColumns.headerPriceApproval).attr("hidden") ? $(orderDetailGridColumns.headerPriceApproval).attr("hidden") : false,
    QtyShippedTitle: $(orderDetailGridColumns.headerQtyShipped).text(),
    QtyShippedHidden: $(orderDetailGridColumns.headerQtyShipped).attr("hidden") ? $(orderDetailGridColumns.headerQtyShipped).attr("hidden") : false,
    QtyBOTitle: $(orderDetailGridColumns.headerQtyBOTitle).text(),
    QtyBOHidden: $(orderDetailGridColumns.headerQtyBO).attr("hidden") ? $(orderDetailGridColumns.headerQtyBO).attr("hidden") : false,
    UnitWeightTitle: $(orderDetailGridColumns.headerUnitWeight).text(),
    UnitWeightHidden: $(orderDetailGridColumns.headerUnitWeight).attr("hidden") ? $(orderDetailGridColumns.headerUnitWeight).attr("hidden") : false,
    ExtendedWeightTitle: $(orderDetailGridColumns.headerExtendedWeight).text(),
    ExtendedWeightHidden: $(orderDetailGridColumns.headerExtendedWeight).attr("hidden") ? $(orderDetailGridColumns.headerExtendedWeight).attr("hidden") : false,
    ExtendedPriceTitle: $(orderDetailGridColumns.headerExtendedPrice).text(),
    ExtendedPriceHidden: $(orderDetailGridColumns.headerExtendedPrice).attr("hidden") ? $(orderDetailGridColumns.headerExtendedPrice).attr("hidden") : false,
    DiscountTitle: $(orderDetailGridColumns.headerDiscount).text(),
    DiscountHidden: $(orderDetailGridColumns.headerDiscount).attr("hidden") ? $(orderDetailGridColumns.headerDiscount).attr("hidden") : false,
    DiscountAmountTitle: $(orderDetailGridColumns.headerDiscountAmount).text(),
    DiscountAmountHidden: $(orderDetailGridColumns.headerDiscountAmount).attr("hidden") ? $(orderDetailGridColumns.headerDiscountAmount).attr("hidden") : false,
    DiscountExtAmountTitle: $(orderDetailGridColumns.headerDiscountExtAmount).text(),
    DiscountExtAmountHidden: $(orderDetailGridColumns.headerDiscountExtAmount).attr("hidden") ? $(orderDetailGridColumns.headerDiscountExtAmount).attr("hidden") : false,
    CategoryTitle: $(orderDetailGridColumns.headerCategory).text(),
    CategoryHidden: $(orderDetailGridColumns.headerCategory).attr("hidden") ? $(orderDetailGridColumns.headerCategory).attr("hidden") : false,
    UnitCostTitle: $(orderDetailGridColumns.headerUnitCostTitle).text(),
    UnitCostHidden: $(orderDetailGridColumns.headerUnitCost).attr("hidden") ? $(orderDetailGridColumns.headerUnitCost).attr("hidden") : false,
    CostUOMTitle: $(orderDetailGridColumns.headerCostUOM).text(),
    CostUOMHidden: $(orderDetailGridColumns.headerCostUOM).attr("hidden") ? $(orderDetailGridColumns.headerCostUOM).attr("hidden") : false,
    ExtenedCostTitle: $(orderDetailGridColumns.headerExtendedCost).text(),
    ExtenedCostHidden: $(orderDetailGridColumns.headerExtendedCost).attr("hidden") ? $(orderDetailGridColumns.headerExtendedCost).attr("hidden") : false,
    CommentsInstructionsTitle: $(orderDetailGridColumns.headerCommentsInstctTitle).text(),
    CommentsInstructionsHidden: $(orderDetailGridColumns.headerCommentsInstructions).attr("hidden") ? $(orderDetailGridColumns.headerCommentsInstructions).attr("hidden") : false,
    ShipViaTitle: $(orderDetailGridColumns.headerShipVia).text(),
    ShipViaHidden: $(orderDetailGridColumns.headerShipVia).attr("hidden") ? $(orderDetailGridColumns.headerShipVia).attr("hidden") : false,
    ShipViaDescriptionTitle: $(orderDetailGridColumns.headerShipViaDescTitle).text(),
    ShipViaDescriptionHidden: $(orderDetailGridColumns.headerShipViaDescription).attr("hidden") ? $(orderDetailGridColumns.headerShipViaDescription).attr("hidden") : false,
    TrackingNumberTitle: $(orderDetailGridColumns.headerTrackingNumber).text(),
    TrackingNumberHidden: $(orderDetailGridColumns.headerTrackingNumber).attr("hidden") ? $(orderDetailGridColumns.headerTrackingNumber).attr("hidden") : false,
    OriginalOrderTitle: $(orderDetailGridColumns.headerOriginalOrder).text(),
    OriginalOrderHidden: $(orderDetailGridColumns.headerOriginalOrder).attr("hidden") ? $(orderDetailGridColumns.headerOriginalOrder).attr("hidden") : false,
    ShippedToDateTitle: $(orderDetailGridColumns.headerShippedToDate).text(),
    ShippedToDateHidden: $(orderDetailGridColumns.headerShippedToDate).attr("hidden") ? $(orderDetailGridColumns.headerShippedToDate).attr("hidden") : false,
    QuantityCommittedTitle: $(orderDetailGridColumns.headerQuantityCommitted).text(),
    QuantityCommittedHidden: $(orderDetailGridColumns.headerQuantityCommitted).attr("hidden") ? $(orderDetailGridColumns.headerQuantityCommitted).attr("hidden") : false,
    CompletedTitle: $(orderDetailGridColumns.headerCompleted).text(),
    CompletedHidden: $(orderDetailGridColumns.headerCompleted).attr("hidden") ? $(orderDetailGridColumns.headerCompleted).attr("hidden") : false,
    ManufItemNoTitle: $(orderDetailGridColumns.headerManufItemNo).text(),
    ManufItemNoHidden: $(orderDetailGridColumns.headerManufItemNo).attr("hidden") ? $(orderDetailGridColumns.headerManufItemNo).attr("hidden") : false,
    CustItemNoTitle: $(orderDetailGridColumns.headerCustItemNo).text(),
    CustItemNoHidden: $(orderDetailGridColumns.headerCustItemNo).attr("hidden") ? $(orderDetailGridColumns.headerCustItemNo).attr("hidden") : false,
    NonStockClearingAccountTitle: $(orderDetailGridColumns.headerNonStockClearingAccount).text(),
    NonStockClearingAccountHidden: $(orderDetailGridColumns.headerNonStockClearingAccount).attr("hidden") ? $(orderDetailGridColumns.headerNonStockClearingAccount).attr("hidden") : false,
    OptionalFieldsTitle: $(orderDetailGridColumns.headerOptionalFields).text(),
    OptionalFieldsHidden: $(orderDetailGridColumns.headerOptionalFields).attr("hidden") ? $(orderDetailGridColumns.headerOptionalFields).attr("hidden") : false,

};

var orderDetailGridUI = {
    currentDataRow: null,
    itemError:false,
    init: function () {
        gridUtility.multiSelectInit("#OrderDetailGrid", "#OrderDetailSelectAllChk", "#OrderDetailSelectChk", "#btnOrderDetailDeleteLine");
    },
    itemBind: function (jsonResult) {
        var grid = gridUtility.fetchGrid("#OrderDetailGrid");
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        if (jsonResult) {
            if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
                var formattedItemNumber = jsonResult.Data.Item;
                orderDetailGridOnSuccess.refreshGridModel(jsonResult.Data);
                orderDetailGridUI.itemError = false;
                orderDetailGridUI.loadItemQuantity(formattedItemNumber, jsonResult.Data.Location);

                // NOTE: Existing items won't get any messages (such as warnings) that would
                //       trigger the asynchronous parts of the showMessage call later on.
                sg.utls.showInventoryItemNotes(formattedItemNumber);
            }
            else {
                orderDetailGridUI.itemError = true;
                gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, orderEntryUI.lastupdatedcolumn);
            } 
        }
        sg.utls.showMessage(jsonResult);
    },
    miscellaneousBind: function (jsonResult) {
        var grid = gridUtility.fetchGrid("#OrderDetailGrid");
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        if (jsonResult) {
            if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
                orderDetailGridOnSuccess.refreshGridModel(jsonResult.Data);
                $("#message").empty();
                currentRowGrid.set("MiscellaneousChargesCode", jsonResult.Data.MiscellaneousChargesCode)
            }
            sg.utls.showMessage(jsonResult);
        } else {
            sg.utls.showMessageInfo(sg.utls.msgType.ERROR, jQuery.validator.format(orderEntryResources.RecordDoesNotExist, orderEntryResources.ItemNumber, currentRowGrid.Item.toUpperCase()));
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "Item");
        }
    },
    commentsInstructionBind: function (jsonResult) {
        if (!jsonResult.Data) {
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel.commentInstructions.Items);
            onPopUpWindowClose.closeWindow = true;
            $("#commentsInstructionsWindowMessage").empty();
            $("#CommentsInstructionWindow").data("kendoWindow").close();
        }
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#CommentsInstructionWindow");
    },
    loadItemQuantity: function (item, location) {        
            orderEntryRepository.getLocationQuantityDetail(item, location);        
    },
    refreshDetail: function (result) {
        if (result.UserMessage.IsSuccess) {
            if (orderEntryUI.orderEntryModel.WarnNegativeInv == true && result.Data.FoundNegativeInventory) {
                sg.utls.showKendoConfirmationDialog(
                    function() { // Yes
                        result.Data.FoundNegativeInventory = false;
                        orderDetailGridUI.refreshGridDetails(result);
                    },
                    function() { // No
                        orderDetailGridUI.refreshGridDetails(result);
                    }, orderEntryResources.NegativeInventoryWarning);
            } else {
                orderDetailGridUI.refreshGridDetails(result);
            }
        } else {
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            if (orderEntryUI.changeLineNumber != null) {
                currentRowGrid = sg.utls.kndoUI.getRowByKey(grid.dataSource.data(), "LineNumber", orderEntryUI.changeLineNumber);
            }
            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, orderEntryUI.lastupdatedcolumn);
        }
        if (orderEntryUI.lastupdatedcolumn != OrderDetailGridEnum.None) {
            sg.utls.showMessage(result);
        }
       
    },
    refreshGridDetails: function (result) {
        orderDetailGridOnSuccess.refreshGridModel(result.Data);
        if (orderEntryUI.lastupdatedcolumn == "QuantityShipped") {
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            grid.refresh();
        }
        
        if (!result.Data.IsNewLine && (orderEntryUI.lastupdatedcolumn == "QuantityOrdered" || orderEntryUI.lastupdatedcolumn == "PricingUnitPrice" || orderEntryUI.lastupdatedcolumn == "QuantityShipped")) {
            orderEntryRepository.readHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        }

        if (orderEntryUI.lastupdatedcolumn == "Item" || orderEntryUI.lastupdatedcolumn == "Location") {
            sg.utls.SyncExecute(function () {
                orderDetailGridUI.loadItemQuantity(result.Data.Item, result.Data.Location);
            });
        }
    },
    gridConfig: {
        autoBind: true,
        pageSize: sg.utls.gridPageSize,
        pageable: {
            input: true,
            numeric: false
        },
        scrollable: true,
        navigatable: true, //enable grid cell tabbing for safari browser
        resizable: true,
        selectable: true,
        reorderable: sg.utls.reorderable,
        isServerPaging: true,
        //Param will be null during Get and will contain the data that needs to be passed to the server on create
        param: null,
        //URL to get the data from the server. 
        pageUrl: sg.utls.url.buildUrl("OE", "OrderEntry", "GetDetails"),
        getParam: function () {
            var grid = $('#OrderDetailGrid').data("kendoGrid");
            var parameters = {
                pageNumber: grid.dataSource.page() - 1,
                pageSize: sg.utls.gridPageSize,
                model: sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties),
                entityName: "OE0500",
            };
            return parameters;
        },
        //Call back function when Get is successfull. In this, the data for the grid and the total results count are to be set along with updating knockout
        buildGridData: gridUtility.setOrderEntryDetailGridData,
        //Call back function after data is bound to the grid. Is used to set the added line as editable
        afterDataBind: gridUtility.setOrderEntryDetailGridLineEditable,

        // Column Reorder
        columnReorder: function (e) {
            GridPreferencesHelper.saveColumnOrder(e, '#OrderDetailGrid', sg.utls.OEUserPreferencesType.OrderDetailGrid);
        },
        schema: {
            model: {
                fields: {
                    Delete: { editable: false },
                }
            }
        },
        columns: [
        {
            field: "Delete",
            headerAttributes: { "class": "w50 first-cell newcontrol" },
            attributes: { "class": "w50 first-cell newcontrol", sg_Customizable: false },
            template: sg.controls.ApplyCheckboxStyle("<input type='checkbox' class='selectChk' id='OrderDetailSelectChk'/>"),
            headerTemplate: sg.controls.ApplyCheckboxStyle("<input type='checkbox' id='OrderDetailSelectAllChk'/>"),
            reorderable: false,
            editor: function (container, options) {
                var grid = gridUtility.fetchGrid('#OrderDetailGrid');
                grid.select(container.closest("tr"));
                gridUtility.setColumnNonEditable(container, grid);
            }
        },
          {
              field: "DetailAccountTax",
              title: "Taxes",
              headerAttributes: { "class": "w80" },
              attributes: { "class": "w80", sg_Customizable: false},
              template: "#= gridUtility.getSettings(LineNumber,'btnItemTaxSettings') #",
              editor: function (container, options) {
                  var grid = $('#OrderDetailGrid').data("kendoGrid");
                  sg.utls.kndoUI.nonEditable(grid, container);
                  gridUtility.registerSettingsEvent();
              }
          },
        {
            field: "SequenceNo",
            title: orderDetailHeader.LineTitle,
            hidden: orderDetailHeader.LineHidden,
            attributes: { "class": "w140 align-right ", sg_Customizable: false },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
            }
        },
         {
             field: "UnformattedItemNumber",
             hidden: true,
             attributes: { sg_Customizable: false }
         },
        {
            field: "LineType",
            title: orderDetailHeader.LineTypeTitle,
            hidden: orderDetailHeader.LineTypeHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getLineType(LineType) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.LineType && !options.model.Item) {
                    var html = orderdropDownList.LineTypeDropdown;
                    var dropdownContainer = $(html).appendTo(container);
                    sg.utls.kndoUI.dropDownListForGrid(dropdownContainer, orderEntryUI.orderEntryModel.LineTypeList, options.model.LineType);

                    var lineTypeDropdown = $("#Data_LineType").data('kendoDropDownList');
                    if (lineTypeDropdown) {
                        lineTypeDropdown.bind("change", function () {
                            var grid;
                            if ($('#OrderDetailGrid')) {
                                grid = gridUtility.fetchGrid('#OrderDetailGrid');
                                var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                                currentRowGrid.set("LineType", this.value());
                              
                            }
                        });
                    }
                }
                else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
          {
              field: "AlternateItemNumber",
              //headerAttributes: { "class": "w140" },
              attributes: { sg_Customizable: false },
              hidden: true,
              //editor: function (container, options) {
              //    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
              //}
          },
            {
                field: "AlternateItemSetNumber",
                //headerAttributes: { "class": "w140" },
                attributes: { sg_Customizable: false },
                hidden: true,
                //editor: function (container, options) {
                //    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                //}
            },
        {
            field: "Item",
            title: orderDetailHeader.ItemTitle,
            hidden: orderDetailHeader.ItemHidden,
            attributes: { "class": "w160 txt-upper" },
            headerAttributes: { "class": "w160" },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.Item) {
                    if (options.model.LineType && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item) {
                        options.model.Item = options.model.Item != null ? options.model.Item : "";
                        var txtItem = orderDetailFields.txtItem;
                        var finderItem = '<input title="Finder" type="button" class="icon btn-search" id="btnItemField"/></div>';
                        var finderAlternateItems = '<input title="Finder" type="button" class="icon btn-search" id="btnAlternateItemsField"/>';
                        var html;
                        if (options.model.AlternateItemNumber) {
                            finderItem = '<input title="Finder" type="button" style="display:none" class="icon btn-search" id="btnItemField"/>';
                            html = txtItem + '' + finderAlternateItems + '' + finderItem;
                        } else {
                            finderAlternateItems = '<input title="Finder" type="button" style="display:none" class="icon btn-search" id="btnAlternateItemsField"/>';
                            html = txtItem + '' + finderItem + '' + finderAlternateItems;
                        }
                        orderEntryUI.lastupdatedcolumn = "Item";
                        $(html).appendTo(container);
                        if ($('#btnAlternateItemsField').length) {
                            $('#btnAlternateItemsField').off('click').on('click', function () {

                                sg.utls.showKendoConfirmationDialog(
                                                        //Click on Yes
                                                        function () {
                                                            $("#btnItemsFieldFinder").trigger("click");
                                                        },
                                                        //Click on No
                                                        function () { $("#btnItemNumberFieldFinder").trigger("click"); }, orderEntryResources.DisplayAlternates, "YesNoCancel");
                            });
                        }
                        var itemFindertitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ItemNumber);
                        sg.finderHelper.setFinder("btnItemField", sg.finder.Items, detailGridfinderOnSuccess.itemSuccess, $.noop, itemFindertitle, detailGridfilter.getItemFilter, null, true);

                    }
                } else if (options.model.Attributes != null && !options.model.Attributes.MiscellaneousChargesCode) {

                    var htmlMiscCharge = orderDetailFields.misccharge + '' + orderDetailFields.miscchargefinder;
                    $(htmlMiscCharge).appendTo(container);
                    var miscChargefinderTitle = $.validator.format(orderEntryResources.FinderTitle, orderEntryResources.MiscCharge);
                    sg.finderHelper.setFinder("btnMiscChargeField", sg.finder.MiscellaneousChargeFinder, detailGridfinderOnSuccess.onMiscellaneousChargeSelection, $.noop, miscChargefinderTitle, detailGridfilter.misceChargeCodeFilter, null, true);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }

        },
        {
            field: "KitBOMNumber",
            title: orderDetailHeader.KitBOMNumberTitle,
            hidden: orderDetailHeader.KitBOMNumberHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                    if ((options.model.Item != "") || (options.model.Attributes != null && !options.model.Attributes.KitBOMNumber) && !orderEntryUI.orderEntryModel.Data.disable()) {
                        if (options.model.KittingBOM == OrderDetailItemType.Kitting && options.model.IsNewLine) {
                            var htmlkitting = orderDetailFields.kittingField + '' + orderDetailFields.Kittingfinder;
                            $(htmlkitting).appendTo(container);
                            var finderTitle = $.validator.format(orderEntryResources.FinderTitle, orderEntryResources.kittingNumber);
                            sg.finderHelper.setFinder("btnKittingNum",
                                sg.finder.ICKittingItemFinder,
                                detailGridfinderOnSuccess.KittingNumber,
                                finderOnCancel.KittingItem,
                                finderTitle,
                                detailGridfilter.getKittingNumberFilter, null, true);
                        } 
                    } else {
                        gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                    }
            }
        },
        {
            field: "Description",
            title: orderDetailHeader.DescriptionTitle,
            hidden: orderDetailHeader.DescriptionHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
               
                    if ((!orderEntryUI.orderEntryModel.Data.disable() && (options.model.Item != "") && (options.model.Attributes != null && !options.model.Attributes.Description))) {
                        if (options.model.DetailCompleted == detailItemCompleted.Yes || options.model.DetailCompleted == detailItemCompleted.DayEnd) {
                            gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                        } else {
                            var html = orderDetailFields.Description;
                            $(html).appendTo(container);
                        }


                    } else {

                        gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                    }
              
            }
        },
        {
            field: "PriceList",
            title: orderDetailHeader.PriceListTitle,
            hidden: orderDetailHeader.PriceListHidden,
            attributes: { "class": "w140 txt-upper " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.PriceList && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.txtpriceList + '' + orderDetailFields.finderpricelist;
                    $(html).appendTo(container);
                    var finderTitle = $.validator.format(orderEntryResources.FinderTitle, orderEntryResources.CustomerPriceList);
                    sg.finderHelper.setFinder("btnPriceListCode", sg.finder.PriceListCode, detailGridfinderOnSuccess.PriceListCode, $.noop,
                        finderTitle, detailGridfilter.priceListCodeFilter, null, true);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "Location",
            title: orderDetailHeader.LocationTitle,
            hidden: orderDetailHeader.LocationHidden,
            attributes: { "class": "w140 txt-upper " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.Location && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.txtlocation + '' + orderDetailFields.finderlocation;
                    $(html).appendTo(container);
                    var finderTitle = $.validator.format(orderEntryResources.FinderTitle, orderEntryResources.LocationTitle);
                    sg.finderHelper.setFinder("btnLocation", sg.finder.LocationQuantity, detailGridfinderOnSuccess.Locationsuccess,
                        $.noop, finderTitle, detailGridfilter.locationFilter, null, true);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "DateRequested",
            title: orderEntryResources.DeliverBy,
            hidden: orderDetailHeader.DeliverByHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedDateTemplate(DateRequested, LineType) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.DateRequested && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.dateRequestedDate;
                    $(html).appendTo(container);
                    sg.utls.kndoUI.datePicker("txtDateRequestDate");
                    var datePicker = $("#txtDateRequestDate").data("kendoDatePicker");
                    datePicker.bind("change", function () {
                        var value = this.value();
                        var validdate = sg.utls.kndoUI.checkForValidDate(value);
                        if (value != null) {
                            var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);;
                            currentRowGrid.set("DateRequested", validdate);
                            orderEntryUI.lastupdatedcolumn = "DateRequested";
                            orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.DateRequested);
                        }

                    });
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "ExpectedShipmentDate",
            title: orderDetailHeader.ExpShipDateTitle,
            hidden: orderDetailHeader.ExpShipDateHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedDateTemplate(ExpectedShipmentDate, LineType) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.ExpectedShipmentDate && (options.model.Item != "") && !orderEntryUI.orderEntryModel.Data.disable()) {
                    if (options.model.DetailCompleted == detailItemCompleted.Yes || options.model.DetailCompleted == detailItemCompleted.DayEnd) {
                        gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                    } else {
                        var html = orderDetailFields.expectedShipmentDate;
                        $(html).appendTo(container);
                        sg.utls.kndoUI.datePicker("txtExpShipmentDate");
                        var datePicker = $("#txtExpShipmentDate").data("kendoDatePicker");
                        datePicker.bind("change", function () {
                            var value = this.value();
                            var validdate = sg.utls.kndoUI.checkForValidDate(value);
                            if (value != null) {
                                orderEntryUI.lastupdatedcolumn = OrderDetailGridEnum.ExpectedShipmentDate;
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("ExpectedShipmentDate", validdate);
                                orderEntryUI.lastupdatedcolumn = "ExpectedShipmentDate";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.ExpectedShipmentDate);
                            }
                        });
                    }

                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "QuantityOrdered",
            title: orderDetailHeader.QtyOrderedTitle,
            hidden: orderDetailHeader.QtyOrderedHidden,
            attributes: { "class": "w140  align-right" },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(QuantityOrdered,LineType,orderEntryUI.NumberOfDecimalsForQty) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.QuantityOrdered && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.txtquantityOrder;
                    $(html).appendTo(container);
                    var minValue = sg.utls.getMinValue("9", orderEntryUI.NumberOfDecimalsForQty, 16, true);
                    var maxValue = sg.utls.getMaxVale("9", orderEntryUI.NumberOfDecimalsForQty, 16, true);
                    var quantityOrder = $("#txtquantityOrder").kendoNumericTextBox({
                        format: "n" + orderEntryUI.NumberOfDecimalsForQty,
                        spinners: false,
                        step: 0,
                        decimals: orderEntryUI.NumberOfDecimalsForQty,
                        min: minValue,
                        max: maxValue,
                    }).data("kendoNumericTextBox");
                    var numerals = 16 - orderEntryUI.NumberOfDecimalsForQty;
                    if (orderEntryUI.NumberOfDecimalsForQty == 0) {
                        numerals = 14;
                    }
                    sg.utls.kndoUI.restrictDecimals(quantityOrder, orderEntryUI.NumberOfDecimalsForQty, numerals);
                  
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }


            }
        },
        {
            field: "OrderUnitOfMeasure",
            title: orderDetailHeader.OrderUOMTitle,
            hidden: orderDetailHeader.OrderUOMHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.OrderUnitOfMeasure && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.UnitOfMeasure + '' + orderDetailFields.finderUnitOfMeasure;
                    var unitOfMeasureFindertitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.OrderUOM);
                    $(html).appendTo(container);
                    sg.finderHelper.setFinder("btnUnitOfMeasure", window.sg.finder.ICItemUnitOfMeasure, detailGridfinderOnSuccess.OrderUnitOfMeasuresuccess, $.noop(),
                        unitOfMeasureFindertitle, detailGridfilter.unitofMeasureFilter, null, true);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "OrderWeightUOM",
            title: orderDetailHeader.OrderWeightUOMTitle,
            hidden: orderDetailHeader.OrderWeightUOMHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.OrderWeightUOM && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.WeightUnitOfMeasure + '' + orderDetailFields.finderwieghtUnitOfMeasure;
                    var unitOfMeasureFindertitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.OrderWeightUOM);
                    $(html).appendTo(container);
                    sg.finderHelper.setFinder("btnWeightUnitOfMeasure", sg.finder.WeightUnitOfMeasure, detailGridfinderOnSuccess.OrderWeightUOMsuccess, $.noop(),
                        unitOfMeasureFindertitle, sg.finderHelper.createDefaultFunction("txtWeightUnitOfMeasure", "WeightUnitsOfMeasure", sg.finderOperator.StartsWith), null, true);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "PriceBy",
            title: orderDetailHeader.PriceByTitle,
            hidden: orderDetailHeader.PriceByHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getPriceBy(PriceBy,LineType) #',
            editor: function (container, options) {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
               }
        },
        {
            field: "PricingUnitOfMeasure",
            title: orderDetailHeader.PricingUOMTitle,
            hidden: orderDetailHeader.PricingUOMHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
            }
        },
        {
            field: "PricingUnitPrice",
            title: orderDetailHeader.UnitPriceTitle,
            hidden: orderDetailHeader.UnitPriceHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(PricingUnitPrice,LineType,UnitPriceNoOfDecimals) #',
            editor: function(container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.PricingUnitPrice && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.OrderUnitpriceField;
                    if (options.model.PriceList != undefined && options.model.PriceList != null && options.model.PriceList != "" && 
                        options.model.PricingUnitPrice != undefined && options.model.PricingUnitPrice != null && options.model.PricingUnitPrice != "" && options.model.PricingUnitPrice > 0) {
                        html = html + '' + orderDetailFields.OrderUnitpricefinder;
                    }
                    $(html).appendTo(container);

                    var title = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ItemPricing);
                    sg.finderHelper.setFinder("btnUnitprice", sg.finder.OEItemPricingFinder, detailGridfinderOnSuccess.onItemPricingSuccess, $.noop(), title, detailGridfilter.itemPricingFilter);

                    var unitprice = $("#txtUnitprice").kendoNumericTextBox({
                        format: "n" + options.model.UnitPriceNoOfDecimals,
                        spinners: false,
                         step: 0,
                        decimals: options.model.UnitPriceNoOfDecimals
                    }).data("kendoNumericTextBox");
                    var numerals = 16 - options.model.UnitPriceNoOfDecimals;
                    if (options.model.UnitPriceNoOfDecimals == 0) {
                        numerals = 10;
                    }
                    sg.utls.kndoUI.restrictDecimals(unitprice, options.model.UnitPriceNoOfDecimals, numerals);

                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "PriceApprovalNeeded",
            title: orderDetailHeader.PriceApprovalTitle,
            hidden: orderDetailHeader.PriceApprovalHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getPriceApproval(PriceApprovalNeeded) #',
            editor: function (container, options) {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
            }
        },
        {
            field: "QuantityShipped",
            title: orderDetailHeader.QtyShippedTitle,
            hidden: orderDetailHeader.QtyShippedHidden,
            attributes: { "class": "w140 align-right" },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(QuantityShipped,LineType,orderEntryUI.NumberOfDecimalsForQty) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.QuantityShipped && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.txtquantityShipped;
                    $(html).appendTo(container);
                    var quantityshipped = $("#txtquantityShipped").kendoNumericTextBox({
                        format: "n" + orderEntryUI.NumberOfDecimalsForQty,
                        step: 0,
                        spinners: false,
                        decimals: orderEntryUI.NumberOfDecimalsForQty,
                    }).data("kendoNumericTextBox");
                    var numerals = 16 - orderEntryUI.NumberOfDecimalsForQty;
                    if (orderEntryUI.NumberOfDecimalsForQty == 0) {
                        numerals = 14;
                    }
                    sg.utls.kndoUI.restrictDecimals(quantityshipped, orderEntryUI.NumberOfDecimalsForQty, numerals);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }


            }
        },
        {
            field: "QuantityBackordered",
            title: orderDetailHeader.QtyBOTitle,
            hidden: orderDetailHeader.QtyBOHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(QuantityBackordered,LineType,orderEntryUI.NumberOfDecimalsForQty) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.QuantityBackordered && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.QuantityBackOrder;
                    $(html).appendTo(container);
                    var minValue = sg.utls.getMinValue("9", 4, 15, true);
                    var maxValue = sg.utls.getMaxVale("9", 4, 15, true);
                    $("#txtQuantBackOrder").kendoNumericTextBox({
                        spinners: false,
                        format: "n" + orderEntryUI.NumberOfDecimalsForQty,
                        decimals: orderEntryUI.NumberOfDecimalsForQty,
                        min: minValue,
                        max: maxValue,
                        step: 0,
                        change: function (e) {
                            var value = this.value();
                            if (value != null) {
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("QuantityBackordered", value)
                                orderEntryUI.lastupdatedcolumn = "QuantityBackordered";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.QuantityBackordered);

                            }

                        }
                    });
                    var quantityBackOrder = $("#txtQuantBackOrder").data("kendoNumericTextBox")
                    var numerals = 16 - orderEntryUI.NumberOfDecimalsForQty;
                    if (orderEntryUI.NumberOfDecimalsForQty == 0) {
                        numerals = 14;
                    }
                    sg.utls.kndoUI.restrictDecimals(quantityBackOrder, orderEntryUI.NumberOfDecimalsForQty, numerals);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "UnitWeight",
            title: orderDetailHeader.UnitWeightTitle,
            hidden: orderDetailHeader.UnitWeightHidden,
            attributes: { "class": "w140 align-right  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(UnitWeight,LineType,4) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.UnitWeight && options.model.KittingBOM != 1 && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.unitWeight;
                    $(html).appendTo(container);
                    $("#txtunitWeight").kendoNumericTextBox({
                        spinners: false,
                        format: "n4",
                        decimals: 4,
                        step: 0,
                        change: function (e) {
                            var value = this.value();
                            if (value != null) {
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("UnitWeight", value)
                                orderEntryUI.lastupdatedcolumn = "UnitWeight";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.UnitWeight);

                            }

                        }
                    });
                    var unitweight = $("#txtunitWeight").data("kendoNumericTextBox");
                    sg.utls.kndoUI.restrictDecimals(unitweight, 4, 12);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "ExtendedWeight",
            title: orderDetailHeader.ExtendedWeightTitle,
            hidden: orderDetailHeader.ExtendedWeightHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(ExtendedWeight,LineType,4) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.ExtendedWeight && options.model.KittingBOM != 1 && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.ExtendedWeight;
                    $(html).appendTo(container);
                    $("#txtExtendedWeight").kendoNumericTextBox({
                        spinners: false,
                        decimals: 4,
                        step: 0,
                        format: "n4",
                        change: function (e) {
                            var value = this.value();
                            if (value != null) {
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("ExtendedWeight", value)
                                orderEntryUI.lastupdatedcolumn = "ExtendedWeight";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.ExtendedWeight);

                            }

                        }
                    });
                    var extendweight = $("#txtExtendedWeight").data("kendoNumericTextBox");
                    sg.utls.kndoUI.restrictDecimals(extendweight, 4, 12);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "ExtendedAmount",
            title: orderDetailHeader.ExtendedPriceTitle,
            hidden: orderDetailHeader.ExtendedPriceHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= sg.utls.kndoUI.getFormattedDecimal(ExtendedAmount,orderEntryUI.orderEntryModel.OrderCurrencyDecimal()) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.ExtendedAmount && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var decimals = orderEntryUI.orderEntryModel.OrderCurrencyDecimal();
                    var html = orderDetailFields.ExtendedAmounfield;
                    $(html).appendTo(container);
                    $("#txtExtendAmt").kendoNumericTextBox({
                        spinners: false,
                        format: "n" + decimals,
                        step: 0,
                        decimals: decimals,
                        change: function (e) {
                            var value = this.value();
                            if (value != null) {
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("ExtendedAmount", value)
                                orderEntryUI.lastupdatedcolumn = "ExtendedAmount";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.ExtendedAmount);

                            }

                        }
                    });
                    var extendAmt = $("#txtExtendAmt").data("kendoNumericTextBox");
                    
                    sg.utls.kndoUI.restrictDecimals(extendAmt, decimals, 16 - decimals);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "DiscountPercent",
            title: orderDetailHeader.DiscountTitle,
            hidden: orderDetailHeader.DiscountHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= sg.utls.kndoUI.getFormattedDecimal(DiscountPercent,5) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.DiscountPercent && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.Discountpercent;
                    $(html).appendTo(container);
                    $("#txtDiscountper").kendoNumericTextBox({
                        spinners: false,
                        decimals: 5,
                        step: 0,
                        format: "n5",
                        change: function (e) {
                            var value = this.value();
                            if (value != null) {
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("DiscountPercent", value)
                                orderEntryUI.lastupdatedcolumn = "DiscountPercent";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.DiscountPercent);

                            }

                        }
                    });
                    var discpercent = $("#txtDiscountper").data("kendoNumericTextBox");
                    sg.utls.kndoUI.restrictDecimals(discpercent, 5, 3);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "OrderDiscountAmount",
            title: orderDetailHeader.DiscountAmountTitle,
            hidden: orderDetailHeader.DiscountAmountHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= sg.utls.kndoUI.getFormattedDecimal(OrderDiscountAmount,orderEntryUI.orderEntryModel.OrderCurrencyDecimal()) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.OrderDiscountAmount && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var decimals = orderEntryUI.orderEntryModel.OrderCurrencyDecimal();
                    var html = orderDetailFields.DiscountAmount;
                    $(html).appendTo(container);
                    $("#txtDiscountAmt").kendoNumericTextBox({
                        format: "n" + decimals,
                        spinners: false,
                        step: 0,
                        decimals: decimals,
                        change: function (e) {
                            var value = this.value();
                            if (value != null) {
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("OrderDiscountAmount", value);
                                orderEntryUI.lastupdatedcolumn = "OrderDiscountAmount";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.OrderDiscountAmount);

                            }

                        }
                    });
                    var discpercent = $("#txtDiscountAmt").data("kendoNumericTextBox");
                    sg.utls.kndoUI.restrictDecimals(discpercent, decimals, 13 - decimals);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "DiscountedExtendedAmount",
            title: orderDetailHeader.DiscountExtAmountTitle,
            hidden: orderDetailHeader.DiscountExtAmountHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= sg.utls.kndoUI.getFormattedDecimal(DiscountedExtendedAmount,orderEntryUI.orderEntryModel.OrderCurrencyDecimal()) #',
            editor: function (container, options) {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
            }
        },
        {
            field: "Category",
            title: orderDetailHeader.CategoryTitle,
            hidden: orderDetailHeader.CategroyHidden,
            attributes: { "class": "w140 txt-upper " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.Category && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.Category + '' + orderDetailFields.finderCategory;
                    var CategoryFindertitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.CategoryFinderTitle);
                    $(html).appendTo(container);
                    sg.finderHelper.setFinder("btnCategoryfield", sg.finder.Category, detailGridfinderOnSuccess.Categorysuccess, $.noop(), CategoryFindertitle, sg.finderHelper.createDefaultFunction("txtCategoryfield", "CategoryCode", sg.finderOperator.StartsWith), null, true);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "CostingUnitCost",
            title: orderDetailHeader.UnitCostTitle,
            hidden: orderDetailHeader.UnitCostHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
                template: '#= gridUtility.getFormattedValue(CostingUnitCost,LineType,6) #',
            editor: function (container, options) {
                if (options.model.Attributes != "" && !options.model.Attributes.CostingUnitCost && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.unitcost;
                                var UnitCostNumeric = $(html).appendTo(container).kendoNumericTextBox({
                                    format: "n6",
                                    spinners: false,
                                    step: 0,
                                    decimals: 6
                                }).data("kendoNumericTextBox");
                                sg.utls.kndoUI.restrictDecimals(UnitCostNumeric, 6, 10);
                } else {
                      gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
              
            }
        },
        {
            field: "CostingUnitOfMeasure",
            title: orderDetailHeader.CostUOMTitle,
            hidden: orderDetailHeader.CostUOMHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
            }
        },
        {
            field: "ExtendedOrderCost",
            title: orderEntryResources.ExtendedCostX,
            hidden: orderDetailHeader.ExtenedCostHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(ExtendedOrderCost,LineType,orderEntryUI.orderEntryModel.FuctionalCurrencyDecimal()) #',
            editor: function (container, options) {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
            }
        },
        {
            field: "UseCommentsInstructions",
            title: orderDetailHeader.CommentsInstructionsTitle,
            hidden: orderDetailHeader.CommentsInstructionsHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getCommentsInstructions(UseCommentsInstructions) #',
            editor: function (container, options) {
                var html = orderdropDownList.UseComments + "" + orderDetailFields.CommentsInstructionIcon;
                $(html).appendTo(container);
                if (!options.model.Attributes.UseCommentsInstructions && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var commentsInstructionDropDown = sg.utls.kndoUI.dropDownList("Data_UseComments");
                    commentsInstructionDropDown.bind("change", function () {
                            var grid = null;
                        if ($('#OrderDetailGrid')) {
                            grid = gridUtility.fetchGrid('#OrderDetailGrid');
                            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                            currentRowGrid.set("UseCommentsInstructions", commentsInstructionDropDown.val());
                            orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.UseCommentsInstructions);
                        }

                    });
                } else {
                    var commentsInstructionDropDown = sg.utls.kndoUI.dropDownList("Data_UseComments");
                    commentsInstructionDropDown.enable(false);
                    if (options.model.UseCommentsInstructions == orderEntryEnum.HaveCommentInst.Yes) {
                        sg.controls.enable('#btncmtinst');
                    } else {
                        sg.controls.disable('#btncmtinst');
                    }
                }
                $("#btncmtinst").on("click", function () {
                    var grid = gridUtility.fetchGrid('#OrderDetailGrid');
                    var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                    if (currentRowGrid.Item) {
                        if (currentRowGrid.UseCommentsInstructions == orderEntryEnum.HaveCommentInst.No) {
                            currentRowGrid.set("UseCommentsInstructions", orderEntryEnum.HaveCommentInst.Yes);
                            orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.UseCommentsInstructions);
                        }
                        commentsInstructionGridUI.addLineClicked = false;
                        orderEntryUI.orderEntryModel.commentInstructions.Items(null);
                        CommentsInstructionGridUtility.initCommentsInstructionsControls();
                        sg.utls.openKendoWindowPopup('#CommentsInstructionWindow', null);
                        $("#CommentsInstructionWindow").data("kendoWindow").center();
                        gridUtility.readGrid("#CommentsInstructionGrid");

                        commentsInstructionGridUI.isreadonly = options.model.DetailCompleted == detailItemCompleted.Yes;
                        orderEntryUI.orderEntryModel.Data.isDetailCompleted(options.model.DetailCompleted);
                    }
                });
            }
        },
        {
            field: "ShipViaCode",
            title: orderDetailHeader.ShipViaTitle,
            hidden: orderDetailHeader.ShipViaHidden,
            attributes: { "class": "w140 txt-upper " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.ShipViaCode && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.shipviacode + '' + orderDetailFields.findershipviacode;
                    var shipViaFindertitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.ShipViaCodeTitle);
                    $(html).appendTo(container);
                    sg.finderHelper.setFinder("btnshipviafield", sg.finder.OEShipViaCode, detailGridfinderOnSuccess.ShipViaCodesuccess, $.noop(), shipViaFindertitle, sg.finderHelper.createDefaultFunction("txtshipviafield", "Code", sg.finderOperator.StartsWith), null, true);
                    orderEntryUI.lastupdatedcolumn = "ShipViaCode";
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "ShipViaCodeDescription",
            title: orderDetailHeader.ShipViaDescriptionTitle,
            hidden: orderDetailHeader.ShipViaDescriptionHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.ShipViaCodeDescription && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.shipviacodeDesc;
                    $(html).appendTo(container);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "ShipmentTrackingNumber",
            title: orderDetailHeader.TrackingNumberTitle,
            hidden: orderDetailHeader.TrackingNumberHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.ShipmentTrackingNumber && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.ShipmentTrackingNum;
                    $(html).appendTo(container);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "OriginalQuantityOrdered",
            title: orderDetailHeader.OriginalOrderTitle,
            hidden: orderDetailHeader.OriginalOrderHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(OriginalQuantityOrdered,LineType,orderEntryUI.NumberOfDecimalsForQty) #',
            editor: function (container, options) {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
            }
        },
        {
            field: "QuantityShippedtodate",
            title: orderDetailHeader.ShippedToDateTitle,
            hidden: orderDetailHeader.ShippedToDateHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(QuantityShippedtodate,LineType,orderEntryUI.NumberOfDecimalsForQty) #',
            editor: function (container, options) {
                if (options.model.LineType && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.QuantityShippedToDate + orderDetailFields.QuantityShipIcon;
                    $(html).appendTo(container);
                    $("#btnQuantityShipToDate").bind("click", function () {
                        if (options.model.Item) {
                            orderEntryUI.orderEntryModel.orderShipment.Items(null);
                            var shipmentGrid = gridUtility.fetchGrid('#OrderShipmentGrid');
                            if (shipmentGrid) {
                                shipmentGrid.dataSource.data([]);
                            }
                            sg.utls.openKendoWindowPopup('#OrderToShipmentDrillDownWindow', null);
                            shipmentGrid.dataSource.read();
                        }

                    });
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "QuantityCommitted",
            title: orderDetailHeader.QuantityCommittedTitle,
            hidden: orderDetailHeader.QuantityCommittedHidden,
            attributes: { "class": "w140 align-right " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getFormattedValue(QuantityCommitted,LineType,orderEntryUI.NumberOfDecimalsForQty) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.QuantityCommitted && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.QuantityCommitted;
                    $(html).appendTo(container);
                    $("#txtQuantCommitted").kendoNumericTextBox({
                        spinners: false,
                        format: "n" + orderEntryUI.NumberOfDecimalsForQty,
                        decimals: orderEntryUI.NumberOfDecimalsForQty,
                        step: 0,
                        change: function (e) {
                            var value = this.value();
                            if (value != null) {
                                var currentRowGrid = sg.utls.kndoUI.getRowByKey(gridUtility.fetchGrid("#OrderDetailGrid").dataSource.data(), "LineNumber", options.model.LineNumber);
                                currentRowGrid.set("QuantityCommitted", value)
                                orderEntryUI.lastupdatedcolumn = "QuantityCommitted";
                                orderEntryRepository.refreshDetail(currentRowGrid, OrderDetailGridEnum.QuantityCommitted);

                            }

                        }
                    });
                    var quantitycomiited = $("#txtQuantCommitted").data("kendoNumericTextBox");
                    var numerals = 16 - orderEntryUI.NumberOfDecimalsForQty;
                    if (orderEntryUI.NumberOfDecimalsForQty == 0) {
                        numerals = 14;
                    }
                    sg.utls.kndoUI.restrictDecimals(quantitycomiited, orderEntryUI.NumberOfDecimalsForQty, numerals);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "DetailCompleted",
            title: orderDetailHeader.CompletedTitle,
            hidden: orderDetailHeader.CompletedHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            template: '#= gridUtility.getDetailCompleted(DetailCompleted) #',
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.DetailCompleted && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && options.model.Item != "" && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderdropDownList.ddlDetailCompleted;
                    var dropdownContainer = $(html).appendTo(container);
                    if (options.model.DetailCompleted != detailItemCompleted.Yes) {
                        sg.utls.kndoUI.dropDownListForGrid(dropdownContainer, orderEntryUI.orderEntryModel.DetailCompletedList, options.model.DetailCompleted);

                        var completedDropdown = $("#Dta_DetailCompleted").data('kendoDropDownList');
                        if (completedDropdown) {
                            completedDropdown.bind("change", function() {
                                var grid;
                                if ($('#OrderDetailGrid')) {
                                    grid = gridUtility.fetchGrid('#OrderDetailGrid');
                                    var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                                    currentRowGrid.set("DetailCompleted", this.value());

                                }
                            });

                        }
                    } else {
                        //var completedDropDown = sg.utls.kndoUI.dropDownList("Data_DetailCompleted");
                        //completedDropDown.enable(false);
                          gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                    }

                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "ManufacturersItemNumber",
            title: orderDetailHeader.ManufItemNoTitle,
            hidden: orderDetailHeader.ManufItemNoHidden,
            attributes: { "class": "w140 txt-upper " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.ManufacturersItemNumber && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.ManufacturersItemNum;
                    $(html).appendTo(container);

                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "CustomerItemNumber",
            title: orderDetailHeader.CustItemNoTitle,
            hidden: orderDetailHeader.CustItemNoHidden,
            attributes: { "class": "w140 txt-upper " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.CustomerItemNumber && options.model.LineType == OrderDetailGridTypeEnum.lineTypeEnum.Item && !orderEntryUI.orderEntryModel.Data.disable()) {
                    var html = orderDetailFields.CustomerItemNum;
                    $(html).appendTo(container);
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }
            }
        },
        {
            field: "NonstockClearingAccount",
            title: orderDetailHeader.NonStockClearingAccountTitle,
            hidden: orderDetailHeader.NonStockClearingAccountHidden,
            attributes: { "class": "w140 txt-upper " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Attributes != null && !options.model.Attributes.NonstockClearingAccount && options.model.KittingBOM != 1) {
                    var html = orderDetailFields.NonStockClrAccount + '' + orderDetailFields.NonStockClrAccountfinder;
                    $(html).appendTo(container);
                    var finderTitle = $.validator.format(orderEntryResources.FinderTitle, orderEntryResources.AccountFinderTitle);
                    sg.finderHelper.setFinder("btnNonStockClrAccount", sg.finder.BKOptionsAccountFinder, detailGridfinderOnSuccess.NonStockclrAccount,
                        $.noop, finderTitle, sg.finderHelper.createDefaultFunction("txtNonStockClrAccount", "AccountNumber", sg.finderOperator.StartsWith));
                } else {
                    gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderDetailGrid'));
                }

            }
        },
        {
            field: "OptionalFieldString",
            title: orderDetailHeader.OptionalFieldsTitle,
            hidden: orderDetailHeader.OptionalFieldsHidden,
            attributes: { "class": "w140  " },
            headerAttributes: { "class": "w140 " },
            editor: function (container, options) {
                if (options.model.Item) {
                    var html = orderDetailFields.txtOptionalFieldString + orderDetailFields.finderOptionalFieldString;                   
                    $(html).appendTo(container);
                    if (options.model.OptionalFields <= 0 && (options.model.DetailCompleted == detailItemCompleted.Yes || options.model.DetailCompleted == detailItemCompleted.DayEnd)) {
                        sg.controls.disable('#btnDetailOptionalfldFinder');

                    } else {
                        sg.controls.enable('#btnDetailOptionalfldFinder');
                    }
                    $("#btnDetailOptionalfldFinder").on("click", function () {
                        $("#message").hide();
                       var grid= gridUtility.fetchGrid("#OrderDetailGrid")
                       var selectedData = sg.utls.kndoUI.getRowByKey(grid.dataSource.data(), "LineNumber", options.model.LineNumber);
                        orderEntryUI.LineNumber = selectedData.LineNumber;
                        //var model = $.extend(true, {}, selectedData);
                        //model.OrderDetailOptionalFields.Items = ko.observableArray([]);
                        //model.OrderDetailOptionalFields.TotalResultsCount = ko.observable(0);
                        orderEntryUI.lastupdatedcolumn = OrderDetailGridEnum.None;
                        orderEntryRepository.refreshDetail(selectedData, OrderDetailGridEnum.None);
                        orderEntryUI.selectedOptionalField = orderEntryEnum.optionalFieldType.LineDetail;
                        //model.Location = ko.observable(model.Location);
                        //orderEntryUI.orderEntryModel.Data.DetailLineOptionalFieldData = model;
                        sg.utls.openKendoWindowPopup('#detailOptionalField', null);
                        $("#detailOptionalField").data("kendoWindow").center();
                         $("#windowmessage").empty();
                         if (options.model.DetailCompleted == detailItemCompleted.Yes ||options.model.DetailCompleted == detailItemCompleted.DayEnd|| orderEntryUI.orderEntryModel.Data.disable()) {
                            optionalFieldUIGrid.isReadOnly = true;
                         } else if (!orderEntryUI.orderEntryModel.Data.OrderSecurity.HasOFTransRights()) {
                             optionalFieldUIGrid.disableButtons = true;
                         } else {
                             optionalFieldUIGrid.isReadOnly = false;
                         }
                        orderEntryUI.initDetailOptionalFields(false);
                        gridUtility.readGrid("#DetailOptionalFieldGrid");
                        orderEntryUI.orderEntryModel.Data.isDetailCompleted(options.model.DetailCompleted);
                    });
                } else {
                    var grid = gridUtility.fetchGrid('#OrderDetailGrid');
                    gridUtility.setColumnNonEditable(container, grid);
                }
               
            }
        }
        ],
        editable: {
            mode: "incell",
            confirmation: false,
            createAt: "bottom"
        },
        edit: function (e) {            
            this.select(e.container.closest("tr"));
            //var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            //var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            //enable disable buttons
        },
        dataChange: function (changedData) {
            var data;
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            //orderEntryUI.lastupdatedcolumn = changedData.columnName;
            if (changedData.columnName === "LineType") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.LineType);
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "QuantityOrdered") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    
                    if (changedData.cellData == null) {
                        data = sg.utls.kndoUI.getRowByKey(grid.dataSource.data(), "LineNumber", changedData.rowData["LineNumber"]);
                        orderDetailGridOnSuccess.changeFromServer = true;
                        data.set("QuantityOrdered", 0);
                    } else {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.QuantityOrdered);
                    }
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }

            }
            if (changedData.columnName === "QuantityShipped") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    if (changedData.cellData != null && changedData.cellData != "" && changedData.cellData > 0
                        && orderEntryUI.orderEntryModel.CreateInvoiceWhenQtyShipped() == true && orderEntryUI.orderEntryModel.Data.InvoiceWillBeProduced() == false)
                    {
                        orderEntryUI.orderEntryModel.Data.InvoiceWillBeProduced(true);
                    }
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.QuantityShipped);
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "PriceList") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnPriceListCode", $("#txtPriceListCode"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.PriceList);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "Location") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnLocation", $("#txtLocation"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.Location);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "KitBOMNumber") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnKittingNum", $("#txtkittingField"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.KitBOmNumber);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "OrderUnitOfMeasure") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnUnitOfMeasure", $("#txtUnitOfMeasure"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.OrderUnitofMeasure);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }

            }

            if (changedData.columnName === "OrderWeightUOM") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnWeightUnitOfMeasure", $("#txtWeightUnitOfMeasure"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.OrderWeightUOM);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "Category") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnCategoryfield", $("#txtCategoryfield"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.Category);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
                }
                  if (changedData.columnName === "CostingUnitCost") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                   if (!changedData.rowData.CostingUnitCost) {
                        orderDetailGridOnSuccess.changeFromServer  = true;
                        gridData.set("CostingUnitCost", 0);
                    } else {
                       orderEntryUI.lastupdatedcolumn = changedData.columnName;
                       orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.OrderUnitCost);
                        }
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "ShipViaCode") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnshipviafield", $("#txtshipviafield"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.ShipViaCode);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "Description") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.Description);
                    } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "ShipViaCodeDescription") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.ShipViaCodeDesc);
                   } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "NonstockClearingAccount") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    sg.delayOnChange("btnNonStockClrAccount", $("#txtNonStockClrAccount"), function () {
                        orderEntryUI.lastupdatedcolumn = changedData.columnName;
                        orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.NonstockClearingAccount);
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "ManufacturersItemNumber") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetailSync(changedData.rowData, OrderDetailGridEnum.ManufacturersItemNumber);
                    } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "CustomerItemNumber") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.CustomerItemNumber);
                    } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }

            if (changedData.columnName === "ShipmentTrackingNumber") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.ShipmentTrackingNumber);
                    } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "PricingUnitPrice") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.OrderUnitPrice);
                    } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "DetailCompleted") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    orderEntryRepository.refreshDetail(changedData.rowData, OrderDetailGridEnum.DetailCompleted);
                    } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "Item") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                   var itemCode = null;
                        if (changedData.rowData.Item) {
                            var itemCode = changedData.rowData.Item.toUpperCase();
                        }
                        orderEntryUI.manufactureItemNumber = itemCode;
                    sg.delayOnChange("btnItemField", $("#txtItem"), function() {
                        var grid = gridUtility.fetchGrid('#OrderDetailGrid');
                        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                        sg.utls.SyncExecute(
                            function() {
                                if (itemCode) {
                                    sg.ic.utls.getItemType(itemCode, detailGridfinderOnSuccess.getItemTypeSuccess);
                                } else {
                                    sg.utls.showMessageInfo(sg.utls.msgType.ERROR, jQuery.validator.format(orderEntryResources.BlankMessage, orderEntryResources.ItemNumber));
                                    gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "Item");
                                }
                            });
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
            if (changedData.columnName === "MiscellaneousChargesCode") {
                if (!orderDetailGridOnSuccess.changeFromServer) {
                    orderEntryUI.lastupdatedcolumn = changedData.columnName;
                    sg.delayOnChange("btnMiscChargeField", $("#txtMiscchargeCode"), function () {
                        var itemCode = changedData.rowData.MiscellaneousChargesCode;
                        var grid = gridUtility.fetchGrid('#OrderDetailGrid');
                        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
                        var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);
                        var data = orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex];
                        if (itemCode) {
                            orderEntryRepository.getMiscellaneousCharge(data);
                        } else {
                            sg.utls.showMessageInfo(sg.utls.msgType.ERROR, jQuery.validator.format(orderEntryResources.BlankMessage, orderEntryResources.MiscCharge));
                            gridUtility.resetFocus("#OrderDetailGrid", currentRowGrid, "Item");
                        }
                    });
                } else {
                    orderDetailGridOnSuccess.changeFromServer = false;
                }
            }
        },

        change: function (e) {
            var grid = gridUtility.fetchGrid("#OrderDetailGrid");
            var currentRowData = sg.utls.kndoUI.getSelectedRowData(grid);
            if (currentRowData.Item != null && currentRowData.Item != "" && currentRowData.Location != null && currentRowData.Location != "") {
                orderEntryUI.changeLineNumber = currentRowData.LineNumber;
                orderEntryUI.orderEntryModel.Data.selectedOrderDetailRow(currentRowData);
            }

            var currentSelection = e.sender.select().attr("data-uid");
            if (lastSelection && currentSelection != lastSelection) {                
                var row = grid.tbody.find("tr[data-uid='" + lastSelection + "']");
                var prevSelectedRowData = sg.utls.kndoUI.getDataItemForRow(row, grid);
                if (prevSelectedRowData) {
                    if (prevSelectedRowData.Item != null && prevSelectedRowData.Item != "") {
                        if (prevSelectedRowData.IsNewLine === true) {
                            orderEntryUI.changeLineNumber = prevSelectedRowData.LineNumber;
                            orderDetailGridUI.currentDataRow = prevSelectedRowData;
                            orderEntryRepository.refreshDetailSync(orderDetailGridUI.currentDataRow, OrderDetailGridEnum.Insert);
                        }
                    } else {
                        orderEntryUI.removeNewLine();
                        
                    }
                }                
                orderDetailGridUI.loadItemQuantity(currentRowData.Item, currentRowData.Location);                
                lastSelection = currentSelection;
            }
        }
    },
    currentRecord: { LineNo: null },
};

var orderDetailColumnIndex = {
    get ItemOrMisc() { return window.GridPreferencesHelper.getColumnIndex('#OrderDetailGrid', "LineType"); },
};

var createOrderGridUIHeader = {
    QuoteNumberTitle: $(createOrderGridColumns.quoteNumber).text(),
    QuoteNumberHidden: $(createOrderGridColumns.quoteNumber).attr("hidden") ? $(createOrderGridColumns.quoteNumber).attr("hidden") : false,
};

var createOrderGridUI = {
    init: function () {
        gridUtility.multiSelectInit("#CreateOrderGrid", "#CreateOrderSelectAllChk", "#CreateOrderSelectChk", "#btnCreateOrderDeleteLine");
    },
    gridConfig: {
        autoBind: false,
        pageSize: sg.utls.gridPageSize,
        pageable: {
            input: true,
            numeric: false
        },
        scrollable: true,
        navigatable: true, //enable grid cell tabbing
        resizable: true,
        selectable: true,
        reorderable: sg.utls.reorderable,
        //Turns server side paging on
        isServerPaging: true,
        //Param will be null during Get and will contain the data that needs to be passed to the server on create
        param: null,

        //URL to get the data from the server. 
        pageUrl: sg.utls.url.buildUrl('OE', 'OrderEntry', 'GetDetails'),
        getParam: function () {
            var grid = $('#CreateOrderGrid').data("kendoGrid");
            var parameters = {
                pageNumber: grid.dataSource.page() - 1,
                pageSize: sg.utls.gridPageSize,
                model: sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties),
                entityName: "OE0526",
            };
            return parameters;
        },
        //Call back function when Get is successfull. In this, the data for the grid and the total results count are to be set along with updating knockout
        buildGridData: gridUtility.setCreateOrderGridData,
        //Call back function after data is bound to the grid. Is used to set the added line as editable
        afterDataBind: gridUtility.setCreateOrderGridLineEditable,
        editable: {
            mode: "incell",
            confirmation: false,
            createAt: "bottom"
        },
        schema: {
            model: {
                fields: {
                    Delete: { editable: false },
                }
            }
        },
        columns: [
            {
                field: "Delete",
                headerAttributes: { "class": "w50 first-cell newcontrol" },
                attributes: { "class": "first-cell newcontrol", sg_Customizable: false },
                template: sg.controls.ApplyCheckboxStyle("<input type='checkbox' class='selectChk' id='CreateOrderSelectChk'/>"),
                headerTemplate: sg.controls.ApplyCheckboxStyle("<input type='checkbox' id='CreateOrderSelectAllChk'/>"),
                reorderable: false,
                editor: function (container, options) {
                    var grid = gridUtility.fetchGrid('#CreateOrderGrid');
                    grid.select(container.closest("tr"));
                    gridUtility.setColumnNonEditable(container, grid);
                }
            }, {
                field: "QuoteNumber",
                hidden: createOrderGridUIHeader.QuoteNumberHidden,
                title: createOrderGridUIHeader.QuoteNumberTitle,
                attributes: { "class": "txt-upper" },
                editor: function(container, options) {
                    if (options.model.IsNewLine) {
                        options.model.QuoteNumber = options.model.QuoteNumber != null ? options.model.QuoteNumber : "";
                        var txtQuoteNumber = createOrderFields.txtQuoteNumber;
                        var finderQuoteNumber = '<input title="Finder" type="button" class="icon btn-search" id="btnQuoteNumberField"/></div>';
                        var html = txtQuoteNumber + '' + finderQuoteNumber;
                        var quoteNumberFindertitle = jQuery.validator.format(orderEntryResources.FinderTitle, orderEntryResources.OrderFinderTitle);
                        $(html).appendTo(container);
                        sg.finderHelper.setFinder("btnQuoteNumberField", sg.finder.OEFinder, finderOnSuccess.quoteNumber, $.noop, quoteNumberFindertitle, orderEntryFilter.getMultipleQuotesOrderFilter);

                        $("#txtQuoteNumber").bind('change', function(e) {
                            //  sg.delayOnChange("btnQuoteNumberField", $("#txtQuoteNumber"), function () {
                            if (e.target.value) {
                                options.model.QuoteNumber = e.target.value;
                                $("#quoteWindowMessage").empty();
                                orderEntryRepository.refreshMultipleQuotes(options.model, orderEntryUI.multipleQuotes);
                            }
                            //});
                        });
                    }                
                    else {
                        gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#CreateOrderGrid'));
                    }
                }
            }
        ],

        dataChange: function (changedData) {
        },
        // Called when the data changes in a cell. 
        edit: function (e) {
            this.select(e.container.closest("tr"));
            var grid = gridUtility.fetchGrid("#CreateOrderGrid");
            var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
            //enable disable buttons
        },

    },
};

/*  ------Comments/Instructions Grid starts -----*/


var commentsInstructionGridConfigHeader = {

    CommentsTitle: $(commentsInstructionGridConfigHeader.headerComments).text(),
    CommentsHidden: $(commentsInstructionGridConfigHeader.headerComments).attr('hidden') ? $(commentsInstructionGridConfigHeader.headerLineNumber).attr('hidden') : false,
};

var CommentsInstructionGridUtility = {
    
    setGridData: function (successData) {
        var gridData = [];
        var grid = gridUtility.fetchGrid('#OrderDetailGrid');
        var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);

        if (!successData.Data) {
            if (successData.TotalResultsCount > 0) {
                gridData = [];
                if (selectedIndex >= 0) {
                    ko.mapping.fromJS(successData, {}, orderEntryUI.orderEntryModel.commentInstructions);
                    gridData.data = successData.Items;
                    gridData.totalResultsCount = successData.TotalResultsCount;
                }
            }
            else {
                var detailGridData;
                if (selectedIndex >= 0) {
                    if (successData.OrderDetails && successData.OrderDetails.Items[selectedIndex].commentInstructions) {
                        detailGridData = successData.OrderDetails.Items[selectedIndex].commentInstructions;
                    } else {
                        detailGridData = successData;
                    }
                    if (detailGridData) {
                        gridData = [];
                        ko.mapping.fromJS(detailGridData, {}, orderEntryUI.orderEntryModel.commentInstructions);
                        gridData.data = detailGridData.Items;
                        gridData.totalResultsCount = detailGridData.TotalResultsCount;
                    }
                }
            }
        } else {
            if (successData.UserMessage && successData.UserMessage.IsSuccess === true) {
                gridData = [];
                ko.mapping.fromJS(successData.Data, {}, orderEntryUI.orderEntryModel.Data);
                if (selectedIndex >= 0) {
                    gridData.data = successData.Data.OrderDetails.Items()[selectedIndex].commentInstructions;
                    gridData.totalResultsCount = successData.Data.OrderDetails.Items()[selectedIndex].commentInstructions.TotalResultsCount;
                }
            }
        }
        $("#commentsInstructionsWindowMessage").empty();
        sg.utls.showMessagePopupWithoutClose(successData, "#commentsInstructionsWindowMessage");
        return gridData;




    },
    setLineEditable: function (e) {
        var gridDiv = $("#" + e.sender.element[0].id);
        var commentGrid = gridDiv.data("kendoGrid");
        var cell = commentGrid.tbody.find(">tr:first >td:eq(" + 1 + ")");
        //To disable the header checkbox when there items in the grid are cleared using Clear button
        if (orderEntryUI.orderEntryModel.commentInstructions.Items() && orderEntryUI.orderEntryModel.commentInstructions.Items().length === 0) {
            $("#selectAllcmtintChk").attr("disabled", true);
        } else {
            $("#selectAllcmtintChk").attr("disabled", false);
        }

        //Make the comment column editable and first line selected when Add line is clicked
        if (commentsInstructionGridUI.addLineClicked) {
            var editableRow = orderEntryUtility.insertedIndex + 1;
            if (commentGrid.dataSource.data().length === 1) {
                editableRow = 0;
            }
            if (orderEntryUtility.setFirstLineEditable) {
                editableRow = 0;
                orderEntryUtility.setFirstLineEditable = false;
            }
            cell = commentGrid.tbody.find(">tr:eq(" + editableRow + ") >td:eq(" + 1 + ")");
            commentGrid.editCell(cell);
            commentsInstructionGridUI.addLineClicked = false
        }
        if (orderEntryUtility.moveToNextPage) {
            orderEntryUtility.moveToNextPage = false;
            orderEntryUtility.createNewRecord = true;
            orderEntryUtility.setFirstLineEditable = true;
            commentGrid.dataSource.page(commentGrid.dataSource.page() + 1);
        }
        if (orderEntryUtility.createNewRecord) {
            gridUtility.gridAddLine("#" + e.sender.element[0].id, 'OE0180', '#btnCommentsInstructionsDeleteLine');
            orderEntryUtility.createNewRecord = false;
            commentGrid.editCell(cell);
        }
        if (orderEntryUtility.setFirstLineEditable) {
            commentGrid.editCell(cell);
            //orderEntryUtility.setFirstLineEditable = false;
        }

    },
    columns: [{
        field: 'Delete',
        headerAttributes: { "class": "first-cell newcontrol" },
        attributes: { "class": "first-cell newcontrol" },
        template: sg.controls.ApplyCheckboxStyle("<input type='checkbox' id='CmtsInstsChk' class='selectChk' />"),
        headerTemplate: sg.controls.ApplyCheckboxStyle("<input type='checkbox' id='selectAllcmtintChk' />"),
        reorderable: false,
        editor: function (e) {
            gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#CommentsInstructionGrid'));

        }
    },
         {
             field: "Uniquifier",
            hidden: true,
             editor: function (container, options) {
                 gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#CommentsInstructionGrid'));
             }
         },
    {
        field: 'Comments',
        hidden: commentsInstructionGridConfigHeader.CommentsHidden,
        title: commentsInstructionGridConfigHeader.CommentsTitle,
        editor: function (container, options) {
            if (!commentsInstructionGridUI.isreadonly) {
                var html = commentsInstructionsFields.txtCommentInstruction;
                $(html).appendTo(container);
            } else {
                gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#CommentsInstructionGrid'));
            }

        }
    }],
    schema: {
        model: {
            fields: {
                Delete: { editable: false }
            }
        }
    },
    dataChange: function (changedData) {
    },
    edit: function (e) {
        this.select(e.container.closest("tr"));
    },
    initCommentsInstructionsControls: function () {
        var commentType = $("#Data_CommentType").data('kendoDropDownList');
        if (commentType) {
            commentType.bind("change", function () {
                var ddlOrderType = $("#Data_CommentType").data("kendoDropDownList").value();
                orderEntryUI.CommentType = ddlOrderType;
                //orderEntryUI.CommentType = (ddlOrderType == orderEntryEnum.CommentType.Comment) ? orderEntryEnum.CommentType.Comment : orderEntryEnum.CommentType.Instruction;
                var grid = gridUtility.fetchGrid('#CommentsInstructionGrid');
                //var pageNumber = grid.dataSource.page();
                //var pageSize = grid.dataSource.pageSize();
                //var detailgrid = gridUtility.fetchGrid('#OrderDetailGrid');
                //var selectedRow = sg.utls.kndoUI.getSelectedRowData(detailgrid);
                //var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(detailgrid);
                //orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items(orderEntryUI.orderEntryModel.commentInstructions.Items());
                //orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.TotalResultsCount(orderEntryUI.orderEntryModel.commentInstructions.TotalResultsCount());

                //commentsInstructionGridUI.CommentsInstructionGridConfig.pageUrl = sg.utls.url.buildUrl("OE", "OrderEntry", "GetDetails");
                //commentsInstructionGridUI.CommentsInstructionGridConfig.param = {
                //    model: ko.mapping.toJS(orderEntryUI.orderEntryModel.Data),
                //    entityName: "OE0180",
                //    pageNumber: pageNumber - 1,
                //    pageSize: pageSize,
                //    detailParentId: selectedRow.LineNumber,
                //    detailParentNo: selectedRow.DetailNumber,
                //    commentType: orderEntryUI.CommentType

                //};
                if (grid) {
                    grid.dataSource.data([]);
                    grid.dataSource.page(1);
                }

            });
        }
    }
};

var commentsInstructionGridUI = {
    addLineClicked: false,
    isreadonly:null,
    init: function () {
        gridUtility.multiSelectInit("#CommentsInstructionGrid", "#selectAllcmtintChk", "#CmtsInstsChk", "#btnCommentsInstructionsDeleteLine");
    },

    CommentsInstructionGridConfig: {
        autoBind: false,
        pageSize: sg.utls.gridPageSize,
        pageable: {
            input: true,
            numeric: false
        },
        scrollable: true,
        navigatable: true, //enable grid cell tabbing
        resizable: true,
        selectable: true,
        reorderable: sg.utls.reorderable,
        //Turns server side paging on
        isServerPaging: true,
        //Param will be null during Get and will contain the data that needs to be passed to the server on create
        param: null,
        getParam: function () {
            var grid = $('#OrderDetailGrid').data("kendoGrid");
            var selectedDetail = sg.utls.kndoUI.getSelectedRowData(grid);
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);
            var commentgrid = $('#CommentsInstructionGrid').data("kendoGrid");
            if (selectedIndex >= 0) {
                if (orderEntryUI.orderEntryModel.commentInstructions.Items()) {
                    gridUtility.removeEmptyComments(orderEntryUI.orderEntryModel.commentInstructions.Items);
                }
                orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items(orderEntryUI.orderEntryModel.commentInstructions.Items());
                orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.TotalResultsCount(orderEntryUI.orderEntryModel.commentInstructions.TotalResultsCount());
            }
            var pageNumber = commentgrid.dataSource.page();
            var pageSize = commentgrid.dataSource.pageSize();
            var parameters = {
                pageNumber: commentgrid.dataSource.page() - 1,
                pageSize: sg.utls.gridPageSize,
                model: sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties),
                entityName: "OE0180",
                detailParentId: selectedDetail.LineNumber,
                commentType: orderEntryUI.CommentType
            }
            return parameters;
        },
        //URL to get the data from the server.
        pageUrl: sg.utls.url.buildUrl("OE", "OrderEntry", "GetDetails"),
        //Call back function when Get is successfull. In this, the data for the grid and the total results count are to be set along with updating knockout
        buildGridData: CommentsInstructionGridUtility.setGridData,
        //Call back function after data is bound to the grid. Is used to set the added line as editable
        afterDataBind: CommentsInstructionGridUtility.setLineEditable,
        columns: CommentsInstructionGridUtility.columns,
        editable: {
            mode: "incell",
            confirmation: false,
            createAt: "bottom"
        },

        schema: CommentsInstructionGridUtility.schema,
        // Called when the data changes in a cell. 
        dataChange: CommentsInstructionGridUtility.dataChange,
        edit: function (e) {
            $('#CommentsInstructionGrid').data("kendoGrid").select(e.container.closest("tr"));


        },
        change: CommentsInstructionGridUtility.insertLine
    }
};


/*  ------Comments/Instructions Grid ends -----*/


/*  ------OrderToShipment Grid starts -----*/
var orderShipmentGridConfigHeader = {

    ShipmentnumberTitle: $(orderShipmentGridConfigHeader.headerShipmentnumber).text(),
    ShipmentnumberHidden: $(orderShipmentGridConfigHeader.headerShipmentnumber).attr('hidden') ? $(orderShipmentGridConfigHeader.headerLineNumber).attr('hidden') : false,
    InvoicenumberTitle: $(orderShipmentGridConfigHeader.headerInvoicenumber).text(),
    InvoicenumberHidden: $(orderShipmentGridConfigHeader.headerInvoicenumber).attr('hidden') ? $(orderShipmentGridConfigHeader.headerLineNumber).attr('hidden') : false,
};

var OrderShipmentGridUtility = {
    setGridData: function (successData) {
        if (successData != null && successData.length > 0)
            dirtyFlags.isGridDirty(false);
        var gridData = null;
        gridData = [];
        ko.mapping.fromJS(successData, {}, orderEntryUI.orderEntryModel.orderShipment.Items);
      
        gridData.data = successData.Items;
        gridData.totalResultsCount = successData.TotalResultsCount

        return gridData;
    },
    setLineEditable: function (e) {
    },
    columns: [{
        field: 'Shipmentnumber',
        hidden: orderShipmentGridConfigHeader.ShipmentnumberHidden,
        title: orderShipmentGridConfigHeader.ShipmentnumberTitle,
        attributes: { 'class': 'w140  ' },
        headerAttributes: { 'class': 'w140 ' },
        editor: function (container, options) {
            gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderShipmentGrid'));
        }
    }, {
        field: 'Invoicenumber',
        hidden: orderShipmentGridConfigHeader.InvoicenumberHidden,
        title: orderShipmentGridConfigHeader.InvoicenumberTitle,
        attributes: { 'class': 'w140  ' },
        headerAttributes: { 'class': 'w140 ' },
        editor: function (container, options) {
            gridUtility.setColumnNonEditable(container, gridUtility.fetchGrid('#OrderShipmentGrid'));
        }
    }],
    schema: {
        model: {
            fields: {
                Delete: { editable: false }
            }
        }
    },
    dataChange: function (changedData) {
    },
};

var orderShipmentUIGrid = {

    OrderShipmentGridConfig: {
        autoBind: false,
        pageSize: sg.utls.gridPageSize,
        pageable: {
            input: true,
            numeric: false
        },
        scrollable: true,
        navigatable: true, //enable grid cell tabbing
        resizable: true,
        selectable: true,
        reorderable: sg.utls.reorderable,
        //Turns server side paging on
        isServerPaging: true,
        //Param will be null during Get and will contain the data that needs to be passed to the server on create
        param: null,
        getParam: function () {
            var detailgrid = $('#OrderDetailGrid').data("kendoGrid");
            var grid = $('#OrderShipmentGrid').data("kendoGrid");
            var selectedDetail = sg.utls.kndoUI.getSelectedRowData(detailgrid);
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(detailgrid);
            var pageNumber = grid.dataSource.page();
            var pageSize = grid.dataSource.pageSize();
            var parameters = {
                pageNumber: pageNumber - 1,
                pageSize: pageSize,
                orderId: orderEntryUI.orderEntryModel.Data.OrderNumber(),
                detailParentId: selectedDetail.LineNumber,
                detailNumber: selectedDetail.DetailNumber

            }
            return parameters;
        },
        //URL to get the data from the server. 
        pageUrl: sg.utls.url.buildUrl('OE', 'OrderEntry', 'GetShipmentToDrillDown'),
        //Call back function when Get is successfull. In this, the data for the grid and the total results count are to be set along with updating knockout
        buildGridData: OrderShipmentGridUtility.setGridData,
        //Call back function after data is bound to the grid. Is used to set the added line as editable
        afterDataBind: OrderShipmentGridUtility.setLineEditable,
        columns: OrderShipmentGridUtility.columns,
        editable: {
            mode: "incell",
            confirmation: false,
            createAt: "bottom"
        },

        schema: OrderShipmentGridUtility.schema,
        // Called when the data changes in a cell. 
        dataChange: OrderShipmentGridUtility.dataChange,
        edit: function (e) {
            $('#OrderShipmentGrid').data("kendoGrid").select(e.container.closest("tr"));


        },
        change: OrderShipmentGridUtility.insertLine
    }
};
/*  ------OrderToShipment Grid ends -----*/

var orderEntryFilter = {
    getAccountSetFilter: function () {
        var filters = [[]];
        var accountSet = $("#Data_CustomerAccountSet").val();
        filters[0][0] = sg.finderHelper.createFilter("AccountSetCode", sg.finderOperator.StartsWith, accountSet);
        filters[0][1] = sg.finderHelper.createFilter("CurrencyCode", sg.finderOperator.Equal, orderEntryUI.orderEntryModel.Data.OrSourCurr());
        filters[0][1].IsMandatory = true;
        return filters;
    },

    getTermsCodeFilter: function () {
        var filters = [[]];
        var termsCode = $("#Data_TermsCode").val().toUpperCase();
        filters[0][0] = sg.finderHelper.createFilter("TermsCode", sg.finderOperator.StartsWith, termsCode);
        return filters;
    },
    getOrderFilter: function () {
        var filters = [[]];
        var orderNumber = $("#tbOrderNo").val();
        if (orderNumber == orderEntryUI.orderEntryModel.DefaultOrderNumber()) {
            orderNumber = null;
        }
        filters[0][0] = sg.finderHelper.createFilter("OrderNumber", sg.finderOperator.StartsWith, orderNumber);
        return filters;
    },
    getMultipleQuotesOrderFilter: function () {
        var filters = [[], []];
        var grid = $('#CreateOrderGrid').data("kendoGrid");
        var selectedRowData = sg.utls.kndoUI.getSelectedRowData(grid);
        filters[0][0] = sg.finderHelper.createFilter("OrderNumber", sg.finderOperator.StartsWith, selectedRowData.QuoteNumber);     
        filters[0][1] = sg.finderHelper.createFilter("OrderType", sg.finderOperator.Equal, 4);
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("OrderCompletedString", sg.finderOperator.LessThan, 3);
        filters[0][2].IsMandatory = true;
        filters[0][3] = sg.finderHelper.createFilter("CustomerNumber", sg.finderOperator.Equal, orderEntryUI.orderEntryModel.Data.CustomerNumber());
        filters[0][3].IsMandatory = true;
        filters[0][4] = sg.finderHelper.createFilter("QuoteExpired", sg.finderOperator.Equal, 0);
        filters[0][4].IsMandatory = true;
        return filters;
    },
    getOrderRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#Data_OrRateType").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },

    getTRRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#Data_TrRateType").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },

    getShipmentRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#Data_ShipmentRateType").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },

    getTRShipmentRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#Data_TrShipmentRateType").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },
    getInvoiceRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#Data_Inratetype").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },

    getTRInvoiceRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#Data_TrInvoiceRateType").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },
    getPrepaymentRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#OrderPrepayment_RateType").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },
    getBankRateTypeFilter: function () {
        var filters = [[]];
        var rateType = $("#Data_BankRateType").val();
        filters[0][0] = sg.finderHelper.createFilter("RateType", sg.finderOperator.StartsWith, rateType);
        return filters;
    },
    getFilter: function (rateDate, currency, rateType) {
        var filters = [[]];
        filters[0][0] = sg.finderHelper.createFilter("RateDate", sg.finderOperator.GreaterThanOrEqual, sg.utls.kndoUI.getFormattedDate(rateDate));
        filters[0][1] = sg.finderHelper.createFilter("RateType", sg.finderOperator.Equal, rateType.toUpperCase());
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("ToCurrency", sg.finderOperator.Equal, sg.utls.homeCurrency.Code);
        filters[0][2].IsMandatory = true;
        filters[0][3] = sg.finderHelper.createFilter("FromCurrency", sg.finderOperator.Equal, currency);
        filters[0][3].IsMandatory = true;

        return filters;
    },
    getTRFilter: function (rateDate, currency, rateType) {
        var filters = [[]];
        var srcurrency = orderEntryUI.orderEntryModel.Data.OrSourCurr();
        filters[0][0] = sg.finderHelper.createFilter("RateDate", sg.finderOperator.GreaterThanOrEqual, sg.utls.kndoUI.getFormattedDate(rateDate));
        filters[0][1] = sg.finderHelper.createFilter("RateType", sg.finderOperator.Equal, rateType.toUpperCase());
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("ToCurrency", sg.finderOperator.Equal, currency);
        filters[0][2].IsMandatory = true;
        filters[0][3] = sg.finderHelper.createFilter("FromCurrency", sg.finderOperator.Equal, srcurrency);
        filters[0][3].IsMandatory = true;

        return filters;
    },

    getOrderExchangeRateFilter: function () {
        var rateDate = orderEntryUI.orderEntryModel.Data.OrRateDate();
        var currency = orderEntryUI.orderEntryModel.Data.OrSourCurr();
        var rateType = orderEntryUI.orderEntryModel.Data.OrRateType();
        var filters = orderEntryFilter.getFilter(rateDate, currency, rateType);
        return filters;
    },
    getTRExchangeRateFilter: function () {
        var rateDate = orderEntryUI.orderEntryModel.Data.TrRateDate();
        var currency = orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency();
        var rateType = orderEntryUI.orderEntryModel.Data.TrRateType();
        var filters = orderEntryFilter.getTRFilter(rateDate, currency, rateType);
        return filters;
    },
    getShipmentExchangeRateFilter: function () {
        var rateDate = orderEntryUI.orderEntryModel.Data.ShipmentRateDate();
        var currency = orderEntryUI.orderEntryModel.Data.OrSourCurr();
        var rateType = orderEntryUI.orderEntryModel.Data.ShipmentRateType();
        var filters = orderEntryFilter.getFilter(rateDate, currency, rateType);
        return filters;
    },
    getTRShipmentExchangeRateFilter: function () {
        var rateDate = orderEntryUI.orderEntryModel.Data.TrShipmentRateDate();
        var currency = orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency();
        var rateType = orderEntryUI.orderEntryModel.Data.TrShipmentRateType();
        var filters = orderEntryFilter.getTRFilter(rateDate, currency, rateType);
        return filters;
    },
    getInvoiceExchangeRateFilter: function () {
        var rateDate = orderEntryUI.orderEntryModel.Data.InRateDate();
        var currency = orderEntryUI.orderEntryModel.Data.OrSourCurr();
        var rateType = orderEntryUI.orderEntryModel.Data.Inratetype();
        var filters = orderEntryFilter.getFilter(rateDate, currency, rateType);
        return filters;
    },
    getTRInvoiceExchangeRateFilter: function () {
        var rateDate = orderEntryUI.orderEntryModel.Data.TrInvoiceRateDate();
        var currency = orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency();
        var rateType = orderEntryUI.orderEntryModel.Data.TrInvoiceRateType();
        var filters = orderEntryFilter.getTRFilter(rateDate, currency, rateType);
        return filters;
    },
    getPrepaymentExchangeRateFilter: function () {
        var rateDate = orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateDate();
        var currency = orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency();
        var rateType = orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateType();
        var filters = orderEntryFilter.getFilter(rateDate, currency, rateType);
        return filters;
    },
    getBankExchangeRateFilter: function () {
        var rateDate = $("#txtRateDate").val();
        var currency = $("#Data_DefaultBankCurrency").val()
        var rateType = $("#Data_BankRateType").val()
        var filters = orderEntryFilter.getFilter(rateDate, currency, rateType);
        return filters;
    },
    getShipToLocationFinderFilter: function () {
        var filters = [[]];
        var ShipToLocationFilter = $("#tbShipToLocCode").val();
        filters[0][0] = window.sg.finderHelper.createFilter("ShiptoLocation", window.sg.finderOperator.StartsWith, ShipToLocationFilter);
        var CustomerNumberFilter = $("#Data_CustomerNumber").val();
        filters[0][1] = window.sg.finderHelper.createFilter("CustomerNumber", window.sg.finderOperator.Equal, CustomerNumberFilter);
        filters[0][1].IsMandatory = true;

        return filters;
    },
    getPriceListFilter: function () {
        var filters = [[]];
        var priceListCode = $("#Data_DefaultPriceListCode").val().toUpperCase();
        filters[0][0] = sg.finderHelper.createFilter("PriceListCodeName", sg.finderOperator.StartsWith, priceListCode);
        return filters;
    },
    getTaxGroupFilter: function () {
        var filters = [[]];
        var taxGroup = $("#Data_TaxGroup").val().toUpperCase();
        filters[0][0] = window.sg.finderHelper.createFilter("TaxGroupCode", window.sg.finderOperator.StartsWith, taxGroup);
        filters[0][1] = window.sg.finderHelper.createFilter("TransactionType", window.sg.finderOperator.Equal, 1);
        filters[0][1].IsMandatory = true;
        return filters;
    },

    getBatchFilter: function () {
        var filters = [[]];

        filters[0][1] = sg.finderHelper.createFilter("StatusString", sg.finderOperator.Equal, orderEntryUI.batchStatus);
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("PaymentType", sg.finderOperator.Equal, orderEntryUI.batchType);
        filters[0][2].IsMandatory = true;

        var batchNumber = $("#txtPrepaymentBatchNumber").val();
        filters[0][0] = sg.finderHelper.createFilter("BatchNumber", sg.finderOperator.GreaterThanOrEqual, batchNumber);
        return filters;
    },
    getPaymentCodePreAuthFilter: function () {
        var filters = [[]];
        var paymentCode = $("#txPaymentCode").val().toUpperCase();
        filters[0][1] = sg.finderHelper.createFilter("PaymentType", sg.finderOperator.Equal, 5);
        filters[0][1].IsMandatory = true;
        filters[0][0] = sg.finderHelper.createFilter("PaymentCode", sg.finderOperator.StartsWith, paymentCode);
        return filters;
    },
    getBankCodeFilter: function () {
        var filters = [[]];
        var bankCode = $("#Data_OrderPrepayment_BankCode").val();
        filters[0][0] = sg.finderHelper.createFilter("BankCode", sg.finderOperator.StartsWith, bankCode);
        return filters;
    },

    getBankCurrencyFilter: function () {
        var filters = [[]];
        var bankCurrency = $("#Data_OrderPrepayment_BankCurrency").val();
        filters[0][0] = sg.finderHelper.createFilter("CurrencyCode", sg.finderOperator.StartsWith, bankCurrency);
        filters[0][1] = sg.finderHelper.createFilter("BankCode", sg.finderOperator.Equal, $("#txtBankCode").val());
        filters[0][1].IsMandatory = true;

        return filters;
    },

    getBankRateCurrencyFilter: function () {
        var filters = [[]];
        var bankCurrency = $("#Data_DefaultBankCurrency").val();
        filters[0][0] = sg.finderHelper.createFilter("CurrencyCode", sg.finderOperator.StartsWith, bankCurrency);
        filters[0][1] = sg.finderHelper.createFilter("BankCode", sg.finderOperator.Equal, $("#Data_BankCode").val());
        filters[0][1].IsMandatory = true;

        return filters;
    },
    // Set the Manufacturers ItemNumber as a filter value.
    getManufacturerFieldFilter: function () {
        var manufacturerItemFilters = [[]];
        var itemNumber = orderEntryUI.manufactureItemNumber;
        var filter = sg.finderHelper.createFilter("ManufacturersItemNumber", sg.finderOperator.StartsWith, itemNumber);
        manufacturerItemFilters[0][0] = filter;
        manufacturerItemFilters[0][0].IsMandatory = true;
        return manufacturerItemFilters;
        orderEntryUI.manufactureItemNumber = null;
    },

    getProcessingCodeFilter: function () {
        var filters = [[]];
        var currencyCode = $("#txCurrency").val().toUpperCase();
        var processingCode = $("#txProcessingCode").val().toUpperCase();
        filters[0][1] = sg.finderHelper.createFilter("CurrencyCode", sg.finderOperator.Equal, currencyCode);
        filters[0][1].IsMandatory = true;
        filters[0][0] = sg.finderHelper.createFilter("ProcessingCode", sg.finderOperator.StartsWith, processingCode);
        return filters;
    },
    bankTransactionHeaderFilter: function () {
        var filters = [[], []];
        var depositNumber = $("#txtDepositNumber").val();
        var bankCode = $("#txtBankCode").val();

        filters[0][1] = sg.finderHelper.createFilter("BankCode", sg.finderOperator.Equal, bankCode);
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("TransactionStatus", sg.finderOperator.Equal, orderEntryEnum.BankTransactionStatus.NotPosted);
        filters[0][2].IsMandatory = true;
        filters[1][1] = sg.finderHelper.createFilter("BankCode", sg.finderOperator.Equal, bankCode);
        filters[1][1].IsMandatory = true;
        filters[1][2] = sg.finderHelper.createFilter("TransactionStatus", sg.finderOperator.Equal, orderEntryEnum.BankTransactionStatus.PartiallyOutstanding);
        filters[1][2].IsMandatory = true;

        filters[0][0] = sg.finderHelper.createFilter("TransactionNumber", sg.finderOperator.Equal, depositNumber);
        filters[1][0] = sg.finderHelper.createFilter("TransactionNumber", sg.finderOperator.Equal, depositNumber);
        return filters;
    },
    getPaymentCodeFilter: function () {
        var filters = [[]];
        var paymentCode = $("#Data_OrderPrepayment_ReceiptType").val();
        filters[0][0] = sg.finderHelper.createFilter("PaymentCode", sg.finderOperator.StartsWith, paymentCode);
        return filters;
    },
    processingCodeFilter: function () {
        var filters = [[]];
        var bankCode = $("#txtBankCode").val();
        var currencyCode = $("#txtDefaultBankCurrencyCode").val();
        var processingCode = $("#Data_OrderPrepayment_YpProcessCode").val();
        filters[0][0] = sg.finderHelper.createFilter("ProcessingCode", sg.finderOperator.StartsWith, processingCode);
        filters[0][1] = sg.finderHelper.createFilter("Bank", sg.finderOperator.Equal, bankCode);
        filters[0][1].IsMandatory = true;
        filters[0][2] = sg.finderHelper.createFilter("CurrencyCode", sg.finderOperator.Equal, currencyCode);
        filters[0][2].IsMandatory = true;
        return filters;
    },
};

var finderOnSuccess = {
    entryNumber: function (data) {
        sg.utls.clearValidations("frmOrderEntry");
        orderEntryUI.finderData = data;
        //var orderuniquefier = data.OrderUniquifier;
        orderEntryUI.orderEntryModel.Data.OrderNumber(data.OrderNumber);
        if (!orderEntryUI.orderEntryModel.Data.disableScreen()) {
            if (gridUtility.hasNewRecord('#OrderDetailGrid')) {
                orderEntryUI.lastActionCntl = orderEntryUI.headerRefreshType.orderNo;
                $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            } else {
                orderEntryUI.checkOrderNumberExists();                        
            }
        } else {
            orderEntryRepository.getOrderNumberById(data.OrderNumber);
        }
        orderEntryUI.orderEntryModel.Data.entryPosted(false);        
    },
    quoteNumber: function (data) {
        if ($('#CreateOrderGrid')) {
            var gridData = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid(CreateOrderGrid));
            if (gridData != undefined) {
                gridData.set("QuoteNumber", data.OrderNumber);
                orderEntryRepository.refreshMultipleQuotes(gridData, orderEntryUI.multipleQuotes);
            }
        }
    },
    item: function (data) {
        if ($('#OrderDetailGrid')) {
            var gridData = sg.utls.kndoUI.getSelectedRowData(gridUtility.fetchGrid("#OrderDetailGrid"));
            if (gridData != undefined) {
                gridData.set("Item", result.Item);
            }
        }
    },
    manufacturerItem: function (result, ManufacturerItemNumber) {

        var grid = $('#OrderDetailGrid').data("kendoGrid");
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        if (result != null) {

            var itemnumber = null;
            if (result.ItemNumber == true || result.ItemNumber == undefined) {
                itemnumber = result.FormattedItemNumber;
            } else {
                itemnumber = result.ItemNumber;
            }
            orderDetailGridOnSuccess.changeFromServer = true;
            currentRowGrid.set("Item", itemnumber);
            if (result.ManufacturersItemNumber) {
                orderDetailGridOnSuccess.changeFromServer = true;
                currentRowGrid.set("ManufacturersItemNumber", result.ManufacturersItemNumber);
               
            }
            else if (ManufacturerItemNumber != "btnManufacturerItemFinder") {
                if (ManufacturerItemNumber != null) {
                    orderDetailGridOnSuccess.changeFromServer = true;
                    currentRowGrid.set("ManufacturersItemNumber", ManufacturerItemNumber);
                }

            }
           
        }
        if (itemnumber == null || itemnumber=="")
            itemnumber = orderEntryUI.manufactureItemNumber;
        
        orderEntryRepository.getItems(itemnumber, orderEntryUI.orderEntryModel.Data.CustomerNumber(), currentRowGrid);

        if (currentRowGrid.IsNewLine) {
            orderDetailGridUI.currentDataRow = currentRowGrid;
        }
    },
    itemSuccess: function (rowdata) {
        if ($('#OrderDetailGrid')) {
            $("#message").empty();
            var grid = gridUtility.fetchGrid('#OrderDetailGrid');
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);
            var data = orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex];
            orderEntryRepository.getItems(rowdata.UnformattedItemNumber.toUpperCase(), orderEntryUI.orderEntryModel.Data.CustomerNumber(), data);
        }

    },
    TemplateCode: function (data) {
        orderEntryUI.orderEntryModel.Data.TemplateCode(data.TemplateCode)
        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.templatecode);
    },
    ShipViaCode: function (data) {
        orderEntryUI.orderEntryModel.Data.ShipViaCode(data.Code)
        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ShipVia);
    },
    Location: function (data) {
        orderEntryUI.orderEntryModel.Data.DefaultLocationCode(data.Location)
        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.Location);
    },
    ShipToLocation: function (data) {
        orderEntryUI.orderEntryModel.Data.ShipToLocationCode(data.ShiptoLocation)
        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.shipToLoc);
    },
    PaymentCode: function (data) {
        orderEntryUI.preAuthorizationModel.OrderPreauthorization.PaymentCode(data.PaymentCode);
        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.PreAuthPaymentCode;
        orderEntryRepository.refreshPreAuth(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization), orderEntryUI.headerRefreshType.PreAuthPaymentCode);
    },
    ProcessingCode: function (data) {
        orderEntryUI.preAuthorizationModel.OrderPreauthorization.YpProcessCode(data.ProcessingCode);
        orderEntryUI.preAuthorizationModel.OrderPreauthorization.BankCode(data.Bank);
        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.PreAuthProcessingCode;
        orderEntryRepository.refreshPreAuth(ko.mapping.toJS(orderEntryUI.preAuthorizationModel.OrderPreauthorization), orderEntryUI.headerRefreshType.PreAuthProcessingCode);
    },
    CustomerNumber: function (data) {
        var grid = gridUtility.fetchGrid('#OrderDetailGrid');
        var currentRowGrid = sg.utls.kndoUI.getSelectedRowData(grid);
        if (currentRowGrid != null && currentRowGrid.Item != null) {
            sg.utls.showMessageInfo(sg.utls.msgType.ERROR, orderEntryResources.CustomerChangemsg);
            sg.controls.Focus($("#tbCustNo"));
        } else {
            orderEntryUI.orderEntryModel.Data.CustomerNumber(data.CustomerNumber);
            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.Customer);
        }

    },
    BatchNumber: function (data) {
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptBatchNumber(data.BatchNumber);
        orderEntryRepository.getPrepaymentBatchData(orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptBatchNumber(),false);
    },
    BankCode: function (data) {
        orderEntryRepository.refreshPrepaymentBatch(data.BankCode, 9);
    },
    BankCurrency: function (data) {
        orderEntryRepository.refreshPrepaymentBatch(data.CurrencyCode, 11);
    },
    BankTransactionHeader: function (data) {
        orderEntryRepository.refreshPrepaymentBatch(data.TransactionNumber, 16);
    },
    PrepaymentPaymentCode: function (data) {
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptType(data.PaymentCode);
        orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), orderEntryUI.prepaymentRefreshType.ReceiptType);
    },
    PrepaymentProcessingCode: function (data) {
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.YpProcessCode(data.ProcessingCode);
        orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), orderEntryUI.prepaymentRefreshType.YpProcessCode);
    },
    orderRateType: function (data) {
        orderEntryUtility.refreshFinderRateType(data, orderEntryUI.orderEntryModel.Data.OrRateType, orderEntryUI.headerRefreshType.orRateType, false);
    },
    TRRateType: function (data) {
        orderEntryUtility.refreshFinderRateType(data, orderEntryUI.orderEntryModel.Data.TrRateType, orderEntryUI.headerRefreshType.trRateType, false);
    },
    
    shipmentRateType: function (data) {
        orderEntryUtility.refreshFinderRateType(data, orderEntryUI.orderEntryModel.Data.ShipmentRateType, orderEntryUI.headerRefreshType.shipmentRateType, false);
    },
    TRShipmentRateType: function (data) {
        orderEntryUtility.refreshFinderRateType(data, orderEntryUI.orderEntryModel.Data.TrShipmentRateType, orderEntryUI.headerRefreshType.trShipmentRateType, false);
    },

    invoiceRateType: function (data) {
        orderEntryUtility.refreshFinderRateType(data, orderEntryUI.orderEntryModel.Data.Inratetype, orderEntryUI.headerRefreshType.inratetype, false);
    },
    TRInvoiceRateType: function (data) {
        orderEntryUtility.refreshFinderRateType(data, orderEntryUI.orderEntryModel.Data.TrInvoiceRateType, orderEntryUI.headerRefreshType.trInvoiceRateType, false);
    },
    PrepaymentRateType: function (data) {
        orderEntryUtility.refreshFinderRateType(data, orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateType, orderEntryUI.prepaymentRefreshType.RateType, true);
    },
    BankRateType: function (data) {
        orderEntryRepository.refreshPrepaymentBatch(data.RateType, 14);
    },

    orderExchangeRate: function (data) {
        orderEntryUtility.refreshFinderExchangeRate(data, orderEntryUI.orderEntryModel.Data.OrRate, orderEntryUI.orderEntryModel.Data.OrRateDate, orderEntryUI.headerRefreshType.orderExchangeRate, "Data_OrRate");
    },
    TRExchangeRate: function (data) {
        orderEntryUtility.refreshFinderExchangeRate(data, orderEntryUI.orderEntryModel.Data.TrRate, orderEntryUI.orderEntryModel.Data.TrRateDate, orderEntryUI.headerRefreshType.trRate, "Data_TrRate");
    },
    shipmentExchangeRate: function (data) {
        orderEntryUtility.refreshFinderExchangeRate(data, orderEntryUI.orderEntryModel.Data.ShipmentRate, orderEntryUI.orderEntryModel.Data.ShipmentRateDate, orderEntryUI.headerRefreshType.shipmentExchangeRate, "Data_ShipmentRate");
    },
    TRShipmentExchangeRate: function (data) {
        orderEntryUtility.refreshFinderExchangeRate(data, orderEntryUI.orderEntryModel.Data.TrShipmentRate, orderEntryUI.orderEntryModel.Data.TrShipmentRateDate, orderEntryUI.headerRefreshType.trShipmentExchangeRate, "Data_TrShipmentRate");
    },
    invoiceExchangeRate: function (data) {
        orderEntryUtility.refreshFinderExchangeRate(data, orderEntryUI.orderEntryModel.Data.InRate, orderEntryUI.orderEntryModel.Data.InRateDate, orderEntryUI.headerRefreshType.invoiceExchangeRate, "Data_InRate");
    },
    TRInvoiceExchangeRate: function (data) {
        orderEntryUtility.refreshFinderExchangeRate(data, orderEntryUI.orderEntryModel.Data.TrInvoiceRate, orderEntryUI.orderEntryModel.Data.TrInvoiceRateDate, orderEntryUI.headerRefreshType.trInvoiceExchangeRate, "Data_TrInvoiceRate");
    },
    PrepaymentExchangeRate: function (data) {
        orderEntryUtility.refreshFinderExchangeRate(data, orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate, orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateDate, orderEntryUI.prepaymentRefreshType.BankRate, "OrderPrepayment_BankRate");
    },
    BankExchangeRate: function (data) {
        if (data) {
            orderEntryRepository.refreshPrepaymentBatch(data.Rate, 15);
            orderEntryRepository.refreshPrepaymentBatch(sg.utls.kndoUI.getFormattedDate(data.RateDate), 12);
        }
    },
    PriceListCodes: function (data) {
        if (data) {
            if (sg.controls.GetString(orderEntryUI.orderEntryModel.Data.DefaultPriceListCode()) !== sg.controls.GetString(data.PriceListCodeName)) {
                orderEntryUI.orderEntryModel.Data.DefaultPriceListCode(data.PriceListCodeName);
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.priceList;
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.priceList);
            }
        }
    },
    TaxGroup: function (data) {
        if (data) {
            if (sg.controls.GetString(orderEntryUI.orderEntryModel.Data.TaxGroup()) !== sg.controls.GetString(data.TaxGroupCode)) {
                orderEntryUI.orderEntryModel.Data.TaxGroup(data.TaxGroupCode);
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.taxGroup;
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.taxGroup);
            }
        }
    },

    AccountSet: function (data) {
        if (data) {
            if (sg.controls.GetString(orderEntryUI.orderEntryModel.Data.CustomerAccountSet()) !== sg.controls.GetString(data.AccountSetCode)) {
                orderEntryUI.orderEntryModel.Data.CustomerAccountSet(data.AccountSetCode);
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.accountSet;
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.accountSet);
            }
        }
    },
    TermsCode: function (data) {
        if (data) {
            if (sg.controls.GetString(orderEntryUI.orderEntryModel.Data.TermsCode()) !== sg.controls.GetString(data.TermsCode)) {
                orderEntryUI.orderEntryModel.Data.TermsCode(data.TermsCode);
                orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.termsCode;
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.termsCode);
            }
        }
    },
};


var finderOnCancel = {
    orderRateType: function () {
        sg.controls.Focus($("#Data_OrRateType"));
    },
    TRRateType: function () {
        sg.controls.Focus($("#Data_TrRateType"));
    },
    shipmentRateType: function () {
        sg.controls.Focus($("#Data_ShipmentRateType"));
    },
    TRShipmentRateType: function () {
        sg.controls.Focus($("#Data_TrShipmentRateType"));
    },
    invoiceRateType: function () {
        sg.controls.Focus($("#Data_Inratetype"));
    },
    TRInvoiceRateType: function () {
        sg.controls.Focus($("#Data_TrInvoiceRateType"));
    },
    PrepaymentRateType:function() {
        sg.controls.Focus($("#OrderPrepayment_RateType"));
    },
    orderExchangeRate: function () {
        sg.controls.Focus($("#Data_OrRate").siblings("input:visible"));
    },
    TRExchangeRate: function () {
        sg.controls.Focus($("#Data_TrRate").siblings("input:visible"));
    },
    shipmentExchangeRate: function () {
        sg.controls.Focus($("#Data_ShipmentRate").siblings("input:visible"));
    },
    TRShipmentExchangeRate: function () {
        sg.controls.Focus($("#Data_TrShipmentRate").siblings("input:visible"));
    },
    invoiceExchangeRate: function () {
        sg.controls.Focus($("#Data_InRate").siblings("input:visible"));
    },
    TRInvoiceExchangeRate: function () {
        sg.controls.Focus($("#Data_TrInvoiceRate").siblings("input:visible"));
    },
    PrepaymentExchangeRate: function () {
        sg.controls.Focus($("#OrderPrepayment_BankRate").siblings("input:visible"));
    },
    PriceListCodes: function () {
        sg.controls.Focus($("#Data_DefaultPriceListCode"));
    },
    TaxGroup: function () {
        sg.controls.Focus($("#Data_TaxGroup"));
    },
    AccountSet: function () {
        sg.controls.Focus($("#Data_CustomerAccountSet"));
    },
    TermsCode: function () {
        sg.controls.Focus($("#Data_TermsCode"));

    },
    PaymentCode: function () {
        sg.controls.Focus($("#txPaymentCode"));

    },
    ProcessingCode: function () {
        sg.controls.Focus($("#txProcessingCode"));

    },
    Template: function () {
        sg.controls.Focus($("#Data_TemplateCode").siblings("input:visible"));
    },
    ShipViaCode: function () {
        sg.controls.Focus($("#Data_ShipViaCode").siblings("input:visible"));
    },
    Location: function () {
        sg.controls.Focus($("#Data_DefaultLocationCode").siblings("input:visible"));
    },
    ShipToLocation: function () {
        sg.controls.Focus($("#Data_ShipToLocationCode").siblings("input:visible"));
    },
    KittingItem:function () {
        sg.controls.Focus($("#txtkittingField"));
    },
    BatchNumber: function () {
        sg.controls.Focus($("#txtPrepaymentBatchNumber"));
    },    
    BankCode: function () {
        sg.controls.Focus($("#txtBankCode"));
    },
    BankCurrency: function () {
        sg.controls.Focus($("#txtDefaultBankCurrency"));
    },
    BankTransactionHeader: function () {
        sg.controls.Focus($("#txtDepositNumber"));
    },
};
var orderEntryUtility = {
    insertedIndex: 0,
    addLineClicked: false,
    createNewRecord: false,
    moveToNextPage: false,
    setFirstLineEditable: false,
    addline: function(gridName, entityName, btnDeleteLine) {
        if (!$(this).is(':disabled')) {
            if ($("#frmOrderEntry").valid()) {
                orderEntryUtility.addLineClicked = true;
                commentsInstructionGridUI.addLineClicked = true;
                gridUtility.gridAddLine(gridName, entityName, btnDeleteLine);
            }
        }
    },
    setNumericTextBox: function(id, value, decimal, minValue) {
        $(id).kendoNumericTextBox({
            min: minValue,
            format: "n" + decimal,
            spinners: false,
            decimals: 13,
        });
        var txtNumericTextBox = $(id).data("kendoNumericTextBox");
        $(txtNumericTextBox.element).unbind("input");
        if (txtNumericTextBox) {
            sg.utls.kndoUI.restrictDecimals(txtNumericTextBox, decimal, value);
        }
    },
    updateNumericTextBox: function(id, value) {
        var numericTextbox = $("#" + id).data("kendoNumericTextBox");
        if (numericTextbox != undefined) {
            numericTextbox.value(value);
        }
    },
    fixDecimals: function(numericTextBoxData, numberOfDecimals, numberOfNumerals) {
        var numericTextBoxDataValue;
        if (numericTextBoxData.element) {
            numericTextBoxDataValue = numericTextBoxData.element;
        } else {
            numericTextBoxDataValue = numericTextBoxData;
        }
        var val = numericTextBoxDataValue.val();
        var parts = val.split(".");
        if (val.indexOf(".") !== -1) {
            if (parts[1].length > numberOfDecimals) {
                numericTextBoxDataValue.val(val.substr(0, val.length - (parts[1].length - (numberOfDecimals))));
                $(numericTextBoxDataValue).prev().val(val.substr(0, val.length - (parts[1].length - (numberOfDecimals))));
                $(numericTextBoxDataValue).focus()
            }

        }
    },
    showPopupMessage: function(message, divId) {
        var msg = {};
        msg.UserMessage = {};
        msg.Data = {};
        msg.UserMessage.Message = optionalFieldsResources.ProcessFailedMessage;
        msg.UserMessage.Errors = [{ Message: message }];
        sg.utls.showMessagePopupWithoutClose(msg, divId);
    },
    updateNumericValue: function() {
        orderEntryUtility.updateNumericTextBox("Data_OrRate", orderEntryUI.orderEntryModel.Data.OrRate());
        orderEntryUtility.updateNumericTextBox("Data_TrRate", orderEntryUI.orderEntryModel.Data.TrRate());
        orderEntryUtility.updateNumericTextBox("Data_ShipmentRate", orderEntryUI.orderEntryModel.Data.ShipmentRate());
        orderEntryUtility.updateNumericTextBox("Data_TrShipmentRate", orderEntryUI.orderEntryModel.Data.TrShipmentRate());
        orderEntryUtility.updateNumericTextBox("Data_InRate", orderEntryUI.orderEntryModel.Data.InRate());
        orderEntryUtility.updateNumericTextBox("Data_TrInvoiceRate", orderEntryUI.orderEntryModel.Data.TrInvoiceRate());
        orderEntryUtility.updateNumericTextBox("Data_OrderDiscountPercentage", orderEntryUI.orderEntryModel.Data.OrderDiscountPercentage());
        orderEntryUtility.updateNumericTextBox("Data_OrderDiscountAmount", orderEntryUI.orderEntryModel.Data.OrderDiscountAmount());
        orderEntryUtility.updateNumericTextBox("OrderPrepayment_BankRate", orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate());
        orderEntryUtility.updateNumericTextBox("Data_BankExchangeRate", orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate());
        orderEntryUtility.updateNumericTextBox("Data_OrderPrepayment_ReceiptAmount", orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptAmount());
    },
    refreshExchangeRate: function(e, rate, refreshType, rateType, currency, rateDate, homecurrency) {
        if (e.target.value === "" || e.target.value === null) {
            rate(0);
            orderEntryUI.lastUpdatedColumn = refreshType;
            orderEntryRepository.validateExchangeRate(rateType(), currency(), rateDate(), homecurrency());
        }
        if (e.target.value != rate()) {
            rate(e.target.value);
            orderEntryUI.lastUpdatedColumn = refreshType;
            orderEntryRepository.validateExchangeRate(rateType(), currency(), rateDate(), homecurrency());
        } else return;
    },
    refreshRateDate: function(rateDate, id, refreshType, prepayment) {
        var prevRateDate = rateDate();
        var validDate = sg.utls.kndoUI.checkForValidDate($(id).val());
        if (validDate != null) {
            orderEntryUI.controlToFocus = id;
            orderEntryUI.lastUpdatedColumn = refreshType;
            rateDate(validDate);
            if (!prepayment)
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), refreshType);
            else
                orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), refreshType);
        } else {
            rateDate(prevRateDate);
        }
    },
    checkDate: function(rateDate, id) {
        var validDate = sg.utls.kndoUI.checkForValidDate($(id).val());
        if (validDate != null) {
            rateDate(validDate);
            orderEntryRepository.validateDate(rateDate());
        }
        if ($(id).val() == null || $(id).val() == "") {
            if (id == "#tbOrderDate") {
                rateDate(orderEntryUI.previousOrderDate);
            }
            if (id == "#Data_Shidate") {
                rateDate(orderEntryUI.previousShipDate);
            }
            if (id == "#Data_ShipmentPostingDate") {
                rateDate(orderEntryUI.previousShipPostingDate);
            }
            if (id == "#Data_InvoiceDate") {
                rateDate(orderEntryUI.previousInvoiceDate);
            }
            if (id == "#Data_InvoicePostingDate") {
                rateDate(orderEntryUI.prevoiusInvoicePostingDate);
            }
        }
    },
    refreshRateType: function(btnId, id, refreshType, prepayment) {
        sg.delayOnChange(btnId, $(id), function() {
            orderEntryUI.controlToFocus = id;
            orderEntryUI.lastUpdatedColumn = refreshType;
            if (!prepayment) {
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), refreshType);
            } else {
                orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), refreshType);
            }
        });
    },
    refreshFinderRateType: function(data, rateType, refreshType, prepayment) {
        if (data) {
            if (sg.controls.GetString(rateType()) !== sg.controls.GetString(data.RateType)) {
                rateType(data.RateType);
                orderEntryUI.lastUpdatedColumn = refreshType;
                if (!prepayment) {
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), refreshType);
                } else {
                    orderEntryRepository.refreshPrepayment(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), refreshType);
                }

            }
        }
    },
    refreshFinderExchangeRate: function(data, rate, rateDate, refreshType, id) {
        if (data) {
            rate(data.Rate);
            rateDate(sg.utls.kndoUI.getFormattedDate(data.RateDate));
            orderEntryUtility.updateNumericTextBox(id, rate());
        }
    },
    EnableDisableRatesTab: function() {
        if (orderEntryUI.orderEntryModel.Data.disableRatesButton) {

            var tabStrip = $("#ratesTab").kendoTabStrip().data("kendoTabStrip");
            tabStrip.disable($("#ratesTab"), true);

        } else {
            var tabStrip = $("#ratesTab").kendoTabStrip().data("kendoTabStrip");
            tabStrip.enable($("#ratesTab"), true);
        }
    },
    EnableDisableQuickPreAuthButton: function(viewMode) {
        if ((orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.Success) ||
            (orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.VoidPending)
            || (orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.Captured) ||
            (orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.Success)
            &&
            (orderEntryUI.orderEntryModel.isModelDirty && orderEntryUI.orderEntryModel.isModelDirty.isDataDirty && orderEntryUI.orderEntryModel.isModelDirty.isDataDirty())) {


            // using something from the controller to manage the behavioiur of the button
            $("#btnQuickPreAuth").attr("disabled", true);
            return true; // Set the status in somewhere to let them know this button has been disabled
        } else if 
             ((orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.None)||
                (orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.CardDeclined)||
                (orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.CardError))
        {
            $("#btnQuickPreAuth").attr("disabled", false);

            testFrameWork.StimulateSucessFromController();
        }
    }
};

var onPopUpWindowClose = {
    closeWindow: false,
    saveCommentsInstructions: function () {
        var grid = $('#OrderDetailGrid').data("kendoGrid");
        var selectedDetail = sg.utls.kndoUI.getSelectedRowData(grid);
        if (selectedDetail) {
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(grid);
            if (selectedIndex >= 0) {
                orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items(orderEntryUI.orderEntryModel.commentInstructions.Items());
                orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.TotalResultsCount(orderEntryUI.orderEntryModel.commentInstructions.TotalResultsCount());
                if (orderEntryUI.orderEntryModel) {
                    if (orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items()) {
                        gridUtility.removeEmptyComments(orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].commentInstructions.Items);
                        orderEntryRepository.saveCommentInstructionDetail(onPopUpWindowClose.getFilterToSavePopupData("#CommentsInstructionGrid", "OE0180"));
                    }
                }
            }
        }
        else {
            onPopUpWindowClose.closeWindow = true;
            $("#CommentsInstructionWindow").data("kendoWindow").close();
        }
    },

    getFilterToSavePopupData: function (gridName, entityName) {
        var grid = gridUtility.fetchGrid(gridName);
        if (entityName == "OE0180") {
            var ordergrid = $('#OrderDetailGrid').data("kendoGrid");
            var selectedIndex = sg.utls.kndoUI.getSelectedRowIndex(ordergrid);

        }
        var parameters = {
            pageNumber: grid.dataSource.page() - 1,
            pageSize: sg.utls.gridPageSize,
            model: sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties),
            entityName: entityName,
            detailParentId: entityName == "OE0180" ? orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[selectedIndex].LineNumber() : 0,
            commentType: orderEntryUI.CommentType
        };
        return parameters;
    },
    
 	saveKittingItems: function () {
 	    orderEntryRepository.saveKittingDetail(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderKittingDetails), "OE0502");
    },
};
var setTransactionStatus = function () {
    var receiptEntryObj = orderEntryUI.preAuthorizationModel.OrderPreauthorization;
    var status = "";

    switch (receiptEntryObj.CurrentCcProcessStatus()) {
        case receiptEntryEnum.CreditCardStatus.TransactionNotStarted:
            status = receiptEntryResources.notStarted;
            break;
        case receiptEntryEnum.CreditCardStatus.SalePending:
            status = receiptEntryResources.chargePending;
            break;
        case receiptEntryEnum.CreditCardStatus.SaleComplete:
            status = receiptEntryObj.TransactionStatus();
            break;
        case receiptEntryEnum.CreditCardStatus.VoidPending:
            status = receiptEntryResources.voidPending;
            break;
        case receiptEntryEnum.CreditCardStatus.VoidComplete:
            status = receiptEntryResources.voidComplete;
            break;
        default:
            break;
    }
    $("#txtCreditCardStatus").val(status);
};
var PrintForm = {
    setNextPrintSlip: function () {
        var model = orderEntryUI.orderEntryModel.Data;
        if (model.NextPrintSlip() === orderEntryEnum.PrintSlipType.None) {
            if (model.PrintOrder()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.Order);
            } else if (model.PrintShipmentPickSlip()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.ShipmentPickSlip);
            } else if (model.PrintInvoice()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.Invoice);
            } else if (model.PrintPrePayReceipt()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.PrePayReciept);
            } else {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.None);
            }
        } else if (model.NextPrintSlip() === orderEntryEnum.PrintSlipType.Order) {
            if (model.PrintShipmentPickSlip()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.ShipmentPickSlip);
            } else if (model.PrintInvoice()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.Invoice);
            } else if (model.PrintPrePayReceipt()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.PrePayReciept);
            } else {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.None);
            }
        } else if (model.NextPrintSlip() === orderEntryEnum.PrintSlipType.ShipmentPickSlip) {
            if (model.PrintInvoice()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.Invoice);
            } else if (model.PrintPrePayReceipt()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.PrePayReciept);
            } else {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.None);
            }
        } else if (model.NextPrintSlip() === orderEntryEnum.PrintSlipType.Invoice) {
            if (model.PrintPrePayReceipt()) {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.PrePayReciept);
            } else {
                model.NextPrintSlip(orderEntryEnum.PrintSlipType.None);
            }
        } else {
            model.NextPrintSlip(orderEntryEnum.PrintSlipType.None);
        }
    },
    openOrderConfirmation: function() {
        var guid = sg.utls.guid();
        var url = sg.utls.url.buildUrl("OE", "OrderConfirmationReport", "Index") + "?guid=" + guid + "&id=" + sg.controls.GetString(orderEntryUI.orderEntryModel.Data.OrderNumber());
        sg.utls.iFrameHelper.openWindow(guid, " ", url, 800, 2400, PrintForm.printClose);
    },
    openQuotes: function() {
        var guid = sg.utls.guid();
        var url = sg.utls.url.buildUrl("OE", "Quote", "Index") + "?guid=" + guid + "&id=" + sg.controls.GetString(orderEntryUI.orderEntryModel.Data.OrderNumber());
        sg.utls.iFrameHelper.openWindow(guid, " ", url, 700 , 2100, PrintForm.printClose);
    },
    openShipmentPickSlip: function() {
        var guid = sg.utls.guid();
        var url = sg.utls.url.buildUrl("OE", "PickingSlipReport", "Index") + "?guid=" + guid + "&id=" + sg.controls.GetString(orderEntryUI.orderEntryModel.Data.LastShipmentNumber()) + "&locCode=" + sg.controls.GetString(orderEntryUI.orderEntryModel.Data.DefaultLocationCode());
        sg.utls.iFrameHelper.openWindow(guid, " ", url, 500, null, PrintForm.printClose);
    },
    openInvoice: function() {
        var guid = sg.utls.guid();
        var url = sg.utls.url.buildUrl("OE", "InvoiceReport", "Index") + "?guid=" + guid + "&id=" + sg.controls.GetString(orderEntryUI.orderEntryModel.Data.LastInvoiceNumber());
        sg.utls.iFrameHelper.openWindow(guid, " ", url, 700, 2100, PrintForm.printClose);
    },
    openPrePayReciept: function() {
        var guid = sg.utls.guid();
        var batchNo = sg.controls.GetString(orderEntryUI.batchNumber);
        var entryNo = sg.controls.GetString(orderEntryUI.entryNumber);
        var url = sg.utls.url.buildUrl("AR", "Receipt", "Index") + "?guid=" + guid + "&batchNumber=" + batchNo + "&entryNumber=" + entryNo;
        sg.utls.iFrameHelper.openWindow(guid, " ", url, 800, 2400, PrintForm.printClose);
    },
    printClose: function () {

        PrintForm.setNextPrintSlip();

        if (orderEntryUI.orderEntryModel.Data.NextPrintSlip() === orderEntryEnum.PrintSlipType.None) {                        
            //orderEntryRepository.readHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
            orderEntryUI.OrderNumber = orderEntryUI.orderEntryModel.Data.OrderNumber();
            orderEntryUI.createNewEntry();
            //orderEntryUI.orderEntryModel.isModelDirty.reset();
            return;
        }

        if (orderEntryUI.orderEntryModel.Data.NextPrintSlip() === orderEntryEnum.PrintSlipType.Order) {
            PrintForm.openOrderConfirmation();
        } else if (orderEntryUI.orderEntryModel.Data.NextPrintSlip() === orderEntryEnum.PrintSlipType.ShipmentPickSlip) {
            PrintForm.openShipmentPickSlip();
        } else if (orderEntryUI.orderEntryModel.Data.NextPrintSlip() === orderEntryEnum.PrintSlipType.Invoice) {
            PrintForm.openInvoice();
        } else if (orderEntryUI.orderEntryModel.Data.NextPrintSlip() === orderEntryEnum.PrintSlipType.PrePayReciept) {
            PrintForm.openPrePayReciept();
        }
    },
    resetParams: function () {
        var model = orderEntryUI.orderEntryModel.Data;
        model.PrintOrder(false);
        model.PrintShipmentPickSlip(false);
        model.PrintInvoice(false);
        model.PrintPrePayReceipt(false);

        model.NextPrintSlip(orderEntryEnum.PrintSlipType.None);

        model.disablePrintShipmentPickSlip(true);
        model.disablePrintInvoice(true);
        model.disablePrintPrePay(true);
    },
    printSlips: function () {
        PrintForm.resetParams();
        var model = orderEntryUI.orderEntryModel.Data;
        if (orderEntryUI.orderEntryModel.PrintShipmentPickSlip() || orderEntryUI.orderEntryModel.PrintPrePayReceipt()) {
            model.disablePrintShipmentPickSlip(!orderEntryUI.orderEntryModel.PrintShipmentPickSlip());
            model.disablePrintInvoice(!orderEntryUI.orderEntryModel.PrintInvoice());
            model.disablePrintPrePay(!orderEntryUI.orderEntryModel.PrintPrePayReceipt());

            model.PrintInvoice(orderEntryUI.orderEntryModel.PrintInvoice());
            model.PrintShipmentPickSlip(orderEntryUI.orderEntryModel.PrintShipmentPickSlip());
            model.PrintPrePayReceipt(orderEntryUI.orderEntryModel.PrintPrePayReceipt());
            model.PrintOrder(orderEntryUI.orderEntryModel.PrintPrePayReceipt());
            sg.utls.openKendoWindowPopup('#divPrintForm', null);
        } else {
            var isOrderTypeQuote = model.OrderType() === orderEntryUI.orderTypeEnum.Quote;

            var message = jQuery.validator.format((isOrderTypeQuote ? orderEntryResources.PostDoneQUOTE : orderEntryResources.PostDoneORDER), model.OrderNumber());
            var messageInfo = jQuery.validator.format(orderEntryResources.PostDoneOrderNP, model.OrderNumber());
            if (isOrderTypeQuote) {
                if (model.OrderSecurity.HasQuotesPrintRights()) {
                    sg.utls.showKendoConfirmationDialog(function() {
                        sg.utls.clearValidations("frmOrderEntry");
                        PrintForm.openQuotes();
                    }, function () { // No
                        orderEntryUI.createNewEntry();
                    }, message, "");
                } else {
                    sg.utls.showMessageInfo(sg.utls.msgType.INFO, messageInfo);
                }
            } else {
                if (model.OrderSecurity.HasPrintOrder()) {
                    sg.utls.showKendoConfirmationDialog(function() {
                        sg.utls.clearValidations("frmOrderEntry");
                        PrintForm.openOrderConfirmation();
                    }, function () { // No
                        orderEntryUI.createNewEntry();
                    }, message, "");
                } else {
                    sg.utls.showMessageInfo(sg.utls.msgType.INFO, messageInfo);
                }
            }
        }
        orderEntryUI.orderEntryModel.isModelDirty.reset();
    },
};
var utility = {
    pad: function (input, length, padding, leftAlign) {
        leftAlign = typeof leftAlign === 'undefined' ? true : leftAlign;
        padding = typeof padding === 'undefined' ? ' ': padding;
        input = input == null ? "" : input;
        while ((input = input.toString()).length + (padding = padding.toString()).length < length) {
            padding += padding;
        }
        if (leftAlign) {
            return input + padding.substr(0, length - input.length);
            
        } else {
            return padding.substr(0, length - input.length) + input;
        }
    },
    // datepart: 'y', 'm', 'w', 'd', 'h', 'n', 's'
    dateDiff: function(datepart, fromdate, todate) {
        datepart = datepart.toLowerCase();
        var diff = todate - fromdate;
        var divideBy = {
            w: 604800000,
            d: 86400000,
            h: 3600000,
            n: 60000,
            s: 1000
        };

        return Math.floor(diff / divideBy[datepart]);
    },
      getItemPriceFilter: function() {
        var filterString = "(";

        var initialDate = new Date(1900, 2, 1);
        var model = orderEntryUI.orderEntryModel.Data;

        var currentRow = orderEntryUI.orderEntryModel.Data.selectedOrderDetailRow();
        filterString += utility.pad((utility.dateDiff('d', initialDate, model.OrderDate())), 10, '0', false);
        filterString += utility.pad(model.OrSourCurr(), 3);
        filterString += utility.pad(model.CustomerNumber(), 12);
        filterString += utility.pad(model.TaxGroup(), 12);
        filterString += utility.pad(model.TaxAuthority1(), 12);
        filterString += utility.pad(model.TaxAuthority2(), 12);
        filterString += utility.pad(model.TaxAuthority3(), 12);
        filterString += utility.pad(model.TaxAuthority4(), 12);
        filterString += utility.pad(model.TaxAuthority5(), 12);
        filterString += utility.pad(model.TaxClass1(), 5, '0', false);
        filterString += utility.pad(model.TaxClass2(), 5, '0', false);
        filterString += utility.pad(model.TaxClass3(), 5, '0', false);
        filterString += utility.pad(model.TaxClass4(), 5, '0', false);
        filterString += utility.pad(model.TaxClass5(), 5, '0', false);

        if (currentRow) {
            filterString += utility.pad(currentRow.Item, 24);
            filterString += utility.pad(currentRow.PriceList, 6);
            filterString += utility.pad(currentRow.Location, 6);
            filterString += utility.pad(currentRow.OrderUnitOfMeasure, 10);
            filterString += utility.pad(currentRow.OrderWeightUOM,10);
            filterString += utility.pad(currentRow.PriceBy, 5);
            filterString += utility.pad(currentRow.Category, 6);
            filterString += utility.pad(currentRow.StandardUnitCost, 24);
            filterString += utility.pad(currentRow.MostRecentUnitCost, 24);
            filterString += utility.pad(currentRow.AlternateUnitCost1, 24);
            filterString += utility.pad(currentRow.AlternateUnitCost2, 24);
            filterString += utility.pad(currentRow.AverageUnitCost, 24);
            filterString += utility.pad(currentRow.LastUnitCost, 24);
            filterString += utility.pad(currentRow.TaxClass1, 5, '0',false);
            filterString += utility.pad(currentRow.TaxClass2, 5, '0',false);
            filterString += utility.pad(currentRow.TaxClass3, 5, '0',false);
            filterString += utility.pad(currentRow.TaxClass4, 5, '0',false);
            filterString += utility.pad(currentRow.TaxClass5, 5, '0',false);
            filterString += utility.pad(currentRow.TaxIncluded1 == false ? 0: 1, 5, '0',false);
            filterString += utility.pad(currentRow.TaxIncluded2 == false ? 0 : 1, 5, '0', false);
            filterString += utility.pad(currentRow.TaxIncluded3 == false ? 0 : 1, 5, '0', false);
            filterString += utility.pad(currentRow.TaxIncluded4 == false ? 0 : 1, 5, '0', false);
            filterString += utility.pad(currentRow.TaxIncluded5 == false ? 0 : 1, 5, '0', false);
            filterString += utility.pad(currentRow.QuantityOrdered, 24);
        }
        
        filterString += ")";

        return filterString;
    },
};

var orderEntryUISuccess = {
    getUnitOfMeasure: function (result) {
        if (result.UnitOfMeasure != null) {
            orderEntryUI.orderEntryModel.UnitOfMeasure(result.UnitOfMeasure);
         }
        orderEntryUI.setQuantityFieldTitle(orderEntryUI.QuantityGridId, orderEntryUI.orderEntryModel.UnitOfMeasure())
    },
    setkey: function () {
        orderEntryUI.OrderNumber = modelData.OrderNumber();
    },
    create: function (jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            if (jsonResult.Data != null) {                
                orderEntryUI.orderEntryModel.Data.entryPosted(false);
                orderEntryUISuccess.resetGridData();
                sg.utls.kndoUI.selectTab("orderEntryTabStrip", "orderTab");
                orderEntryUI.enableDisableTabs(true);
                orderEntryUISuccess.displayResult(jsonResult, sg.utls.OperationMode.NEW);
                orderEntryUI.OrderNumber = jsonResult.Data.OrderNumber;
                orderEntryUI.TabOptionFieldLoad = false;
                orderEntryUI.orderEntryModel.isModelDirty.reset();
            }
        }
        sg.controls.Focus($("#tbCustNo"));
        sg.utls.showMessage(jsonResult);
    },
    readHeader: function (jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            if (jsonResult.Data != null) {
                ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data);
            }
        }
        sg.utls.showMessage(jsonResult);
    },
    checkPrepayError: function (jsonResult) {
        if (jsonResult.UserMessage.IsSuccess) {
            orderEntryUI.orderEntryModel.preAuthExists(jsonResult.preAuthExists);
            orderEntryRepository.getPrepaymentData(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        }
        else {
            sg.utls.showMessage(jsonResult);
        }
    },
    saveKittingDetail: function (jsonResult) {
        if (jsonResult != null) {
            $('#OrderDetailGrid').data("kendoGrid").dataSource.read();
            onPopUpWindowClose.closeWindow = true;
            $("#kittingComponentPopUpWindow").data("kendoWindow").close();
        }
        else {
            sg.utls.showMessage(jsonResult);
        }
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#kittingComponentPopUpWindow");
    },
    setKittingItemSuccess: function(jsonResult) {
        if (jsonResult != null) {
            var grid = $('#KittingComponentGrid').data("kendoGrid");
            var gridData = sg.utls.kndoUI.getSelectedRowData(grid);
            orderEntryUI.kittingItemChanged = true;

            gridData.set("WeightUomDescription", jsonResult.WeightUomDescription);
            orderEntryUI.kittingItemChanged = true;
            gridData.set("UnitWeight", jsonResult.UnitWeight);
            orderEntryUI.kittingItemChanged = true;
            gridData.set("ExtendedWeight", jsonResult.ExtendedWeight);
            orderEntryUI.kittingItemChanged = true;
            gridData.set("CostingUnitCost", jsonResult.CostingUnitCost);
            orderEntryUI.kittingItemChanged = true;
            gridData.set("NonstockClearingAccount", jsonResult.NonstockClearingAccount);
            orderEntryUI.kittingItemChanged = true;

            orderEntryUI.kittingItemChanged = false;
        }
        else {
            sg.utls.showMessage(jsonResult);
        }
    },
    getPrepaymentData: function (jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data);
            orderEntryRepository.launchPrepayment(orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptBatchNumber());
            sg.utls.openKendoWindowPopup('#prepaymentWindow', null);
        }
    },
    setPrepaymentData: function (jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data.OrderPrepayment);
            $("#txtBankCode").val(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCode());
            $("#txtDefaultBankCurrency").val(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency());
            $("#Data_BankCode").val(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCode());
            $("#Data_DefaultBankCurrency").val(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency());
            orderEntryUI.receiptBatchData.Data.BankCode(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCode());
            orderEntryUI.receiptBatchData.Data.DefaultBankCurrency(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency());
            orderEntryUtility.updateNumericValue();
            orderEntryRepository.getBatchData(orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptBatchNumber());
        }
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#prepaymentMessage");
    },
  
    launchPrepayment: function (jsonResult) {
        if (jsonResult) {
            $('#prepaymentBatchDetail').html(jsonResult);
            $("#prepaymentMessage").empty();
            $("#bankRateMessage").empty();

            $("#txtPrepaymentBatchDate").kendoDatePicker()
            orderEntryUI.prepaymentBatchModel = ko.mapping.fromJS(prepaymentBatchModel);
            orderEntryUI.validBatchNumber = true;
            if (prepaymentBatchModel.Data.BatchNumber == 0) {
                orderEntryUI.validBatchNumber = false;
                orderEntryUI.newPrepaymentBatchModel = ko.mapping.fromJS(prepaymentBatchModel);
            }
            orderEntryUISuccess.setOrderPrepayment(prepaymentBatchModel);
            orderEntryPrePayBatchExtension(orderEntryUI.prepaymentBatchModel, orderEntryUI.orderEntryModel.CompanyProfile.CompanyProfileOptions.IsMulticurrency(), orderEntryUI.orderEntryModel.preAuthExists(), orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus());
            orderEntryUI.receiptBatchData = orderEntryUI.prepaymentBatchModel;
            ko.applyBindings(orderEntryUI.prepaymentBatchModel, document.getElementById("prepaymentBatchDetail"));
            ko.applyBindings(orderEntryUI.prepaymentBatchModel, document.getElementById("bankRateWindow"));
            prepaymentEntryUI.init();
        }
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#prepaymentMessage");
        $("#prepaymentWindow").scrollTop(0);
    },
    
    getReceiptBatchEntryData:function(jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            orderEntryUI.batchNumber=jsonResult.Data.BatchNumber;
            orderEntryUI.entryNumber = jsonResult.Data.LastEntryNumber;
            orderEntryUI.prepaymentBatchNumber=jsonResult.Data.BatchNumber;
        }
        PrintForm.printClose();
        $("#divPrintForm").data("kendoWindow").close();
    },
    getReceiptEntryDescription:function(jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.prepaymentBatchModel);
            orderEntryPrePayBatchExtension(orderEntryUI.prepaymentBatchModel, orderEntryUI.orderEntryModel.CompanyProfile.CompanyProfileOptions.IsMulticurrency(), orderEntryUI.orderEntryModel.preAuthExists(), orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus());
            ko.applyBindings(orderEntryUI.prepaymentBatchModel, document.getElementById("prepaymentBatchDetail"));
            ko.applyBindings(orderEntryUI.prepaymentBatchModel, document.getElementById("bankRateWindow"));
        }
        sg.utls.openKendoWindowPopup('#bankRateWindow', null);
    },
    refreshPrepaymentData: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            $("#prepaymentMessage").empty();
            $("#bankRateMessage").empty();
            orderEntryUI.prepaymentPopUpClose = false;
            orderEntryUI.bankRatePopupClose = false;
            orderEntryUI.numberOfEntries = jsonResult.Data.NumberofEntries;
            if (jsonResult.Data.BatchStatus == 1) {
                orderEntryUI.batchDate = jsonResult.Data.BatchDate;
               orderEntryUI.prepaymentBatchNumber=jsonResult.Data.BatchNumber;
                orderEntryUI.batchRateDate = jsonResult.Data.BankRateDate;
                ko.mapping.fromJS(jsonResult, {}, orderEntryUI.prepaymentBatchModel);
                orderEntryUISuccess.setOrderPrepayment(jsonResult);
                orderEntryUI.receiptBatchData = orderEntryUI.prepaymentBatchModel;
                orderEntryRepository.setPrepaymentData(ko.mapping.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment));
                orderEntryUI.validCurrencyCode = true;
                orderEntryUI.validBatchNumber = true;
                orderEntryPrePayBatchExtension(orderEntryUI.prepaymentBatchModel,  orderEntryUI.orderEntryModel.CompanyProfile.CompanyProfileOptions.IsMulticurrency(),orderEntryUI.orderEntryModel.preAuthExists(), orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus());
                ko.applyBindings(orderEntryUI.prepaymentBatchModel, document.getElementById("prepaymentBatchDetail"));
                ko.applyBindings(orderEntryUI.prepaymentBatchModel, document.getElementById("bankRateWindow"));
                orderEntryUI.prepaymentBatchModel = {};
                orderEntryRepository.getCurrencyDecimal($("#txtDefaultBankCurrency").val(),true);

            } else {
                sg.utls.showCustomMessagePopupInfoWithoutClose(sg.utls.msgType.ERROR, $.validator.format(
                    orderEntryResources.BatchNotOpen), "prepaymentMessage");
                sg.controls.Focus($("#txtPrepaymentBatchNumber"));
                $("#prepaymentWindow").scrollTop(0);
            }

            if (jsonResult.Data.BatchNumber == 0) {
                $("#txtPrepaymentBatchDate").val(sg.utls.kndoUI.getDate(new Date()));
                orderEntryUI.receiptBatchData.Data.BatchDate(sg.utls.kndoUI.getDate(new Date()))
                $("#Data_OrderPrepayment_ReceiptDate").val(sg.utls.kndoUI.getDate(new Date()));
            }
        } else {
            if (jsonResult != null && jsonResult.Data.BatchStatus != 1 && orderEntryUI.lastUpdatedColumn == orderEntryUI.prepaymentRefreshType.ReceiptBatchNumber) {
                sg.utls.showCustomMessagePopupInfoWithoutClose(sg.utls.msgType.ERROR, $.validator.format(
                orderEntryResources.BatchNotOpen), "prepaymentMessage");
                sg.controls.Focus($("#txtPrepaymentBatchNumber"));
            }
            else if (orderEntryUI.lastUpdatedColumn) {
                switch (orderEntryUI.lastUpdatedColumn) {
                    case orderEntryUI.prepaymentRefreshType.RateType:
                        orderEntryUI.prepaymentPopUpClose = true;
                        sg.controls.Focus($("#OrderPrepayment_RateType"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptType:
                        orderEntryUI.prepaymentPopUpClose = true;
                        sg.controls.Focus($("#Data_OrderPrepayment_ReceiptType"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.YpProcessCode:
                        orderEntryUI.prepaymentPopUpClose = true;
                        sg.controls.Focus($("#Data_OrderPrepayment_YpProcessCode"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptBatchNumber:
                        orderEntryUI.prepaymentPopUpClose = true;
                        sg.controls.Focus($("#txtPrepaymentBatchNumber"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptBatchDate:
                        $("#txtPrepaymentBatchDate").val(sg.utls.kndoUI.getDate(orderEntryUI.batchDate));
                        sg.controls.Focus($("#txtPrepaymentBatchDate"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptBankCode:
                        orderEntryUI.prepaymentPopUpClose = true;
                        sg.controls.Focus($("#txtBankCode"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptBankCurrency:
                        orderEntryUI.prepaymentPopUpClose = true;
                        sg.controls.Focus($("#txtDefaultBankCurrency"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptDepositNumber:
                        orderEntryUI.prepaymentPopUpClose = true;
                        sg.controls.Focus($("#txtDepositNumber"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptRateType:
                        orderEntryUI.bankRatePopupClose = true;
                        sg.controls.Focus($("#Data_BankRateType"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptRateDate:
                        orderEntryUI.bankRatePopupClose = true;
                        sg.controls.Focus($("#txtRateDate"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptBankPopupCurrency:
                        orderEntryUI.validCurrencyCode = false;
                        orderEntryUI.bankRatePopupClose = true;
                        sg.controls.Focus($("#Data_DefaultBankCurrency"));
                        break;
                    case orderEntryUI.headerRefreshType.PrepaymentBatchBankRate:
                        orderEntryUI.bankRatePopupClose = true;
                        sg.controls.Focus($("#Data_BankExchangeRate"));
                        break;
                }
                if (orderEntryUI.prepaymentPopUpClose) {
                    sg.utls.showMessagePopupWithoutClose(jsonResult, "#prepaymentMessage");
                }
                if (orderEntryUI.bankRatePopupClose) {
                    sg.utls.showMessagePopupWithoutClose(jsonResult, "#bankRateMessage");
                }
            }
            $("#prepaymentWindow").scrollTop(0);
        }
     
    },
    setBatchData: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate(jsonResult.Data.BankExchangeRate)
            orderEntryUtility.updateNumericTextBox("OrderPrepayment_BankRate", orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate());
        }
    },
    setOrderPrepayment: function(jsonResult) {
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptBatchNumber(jsonResult.Data.BatchNumber);
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.BatchDescription(jsonResult.Data.Description);
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptDate(jsonResult.Data.BatchDate);
        if (jsonResult.Data.BatchNumber == 0) {
            orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptDate(sg.utls.kndoUI.getDate(new Date()));
        }
      
    orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCode(jsonResult.Data.BankCode);
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency(jsonResult.Data.DefaultBankCurrency);
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.DepositNumber(jsonResult.Data.DepositNumber);
        orderEntryUISuccess.setPrepaymentRateFields(jsonResult);
    },
    setPrepaymentRateFields: function (jsonResult) {
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateDate(jsonResult.Data.BankRateDate);
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate(jsonResult.Data.BankExchangeRate);
        orderEntryUI.orderEntryModel.Data.OrderPrepayment.RateType(jsonResult.Data.BankRateType);
        orderEntryUISuccess.setExchangeRate();
        orderEntryUtility.updateNumericValue();
    },
    savePrepayment: function (jsonResult) {
        orderEntryUI.orderEntryModel.prePaymentExists(false);
       if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data);
            orderEntryUI.orderEntryModel.Data.OrderPrepayment.DepositNumber($("#txtDepositNumber").val());
            $("#txtBankCode").val(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCode());
            $("#txtDefaultBankCurrency").val(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency());
            orderEntryUI.receiptBatchData.Data.BankCode(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCode());
            orderEntryUI.receiptBatchData.Data.DefaultBankCurrency(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankCurrency());
            orderEntryUI.receiptBatchData.Data.DepositNumber(orderEntryUI.orderEntryModel.Data.OrderPrepayment.DepositNumber());
            orderEntryUI.orderEntryModel.prePaymentExists(true);
            orderEntryUtility.updateNumericValue();
            orderEntryUI.prepaymentPopUpClose = false;
        } else {
            orderEntryUI.prepaymentPopUpClose = true;
        }
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#prepaymentMessage");
        $("#prepaymentWindow").scrollTop(0);
   },
    UnloadPrepayment:function(jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data);
        }
    },
    deletePrepayment:function(jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data);
            orderEntryUI.newPrepaymentBatchModel = ko.mapping.fromJS(prepaymentBatchModel);
            orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptDate(orderEntryUI.newPrepaymentBatchModel.Data.BatchDate());
            orderEntryPrePayBatchExtension(orderEntryUI.newPrepaymentBatchModel, orderEntryUI.orderEntryModel.CompanyProfile.CompanyProfileOptions.IsMulticurrency(), orderEntryUI.orderEntryModel.preAuthExists(), orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus());
            orderEntryUI.receiptBatchData = orderEntryUI.newPrepaymentBatchModel
            ko.applyBindings(orderEntryUI.newPrepaymentBatchModel, document.getElementById("prepaymentBatchDetail"));
            orderEntryRepository.readHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
            orderEntryUtility.updateNumericValue();
            orderEntryUI.orderEntryModel.prePaymentExists(false);
        }
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#prepaymentMessage");
        $("#prepaymentWindow").scrollTop(0);
    },
    get: function (jsonResult) {
        var isjobrelated = false;
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            if (jsonResult.Data != null) {
                if (jsonResult.Data.CustomerNumber && (orderEntryUI.orderUniquifier == null || orderEntryUI.orderUniquifier != jsonResult.Data.OrderUniquifier)) {
                    orderEntryUI.orderEntryModel.Data.entryPosted(true);                    
                    }

                //if (jsonResult.Data.JobRelated > 0) {
                //    orderEntryUI.enableDisableTabs(true);
                //} else {
                orderEntryUI.enableDisableTabs(jsonResult.Data.CustomerNumber && jsonResult.Data.JobRelated <= 0 ? false : true);
                //}
              
                    orderEntryUI.orderUniquifier = null;
                    //orderEntryUISuccess.resetGridData();
                    sg.utls.kndoUI.selectTab("orderEntryTabStrip", "orderTab");

                    orderEntryUISuccess.displayResult(jsonResult, sg.utls.OperationMode.SAVE);
                    orderEntryUI.OrderNumber = jsonResult.Data.OrderNumber;
                    orderEntryUI.orderEntryModel.isModelDirty.reset();
                if (jsonResult.Data.JobRelated > 0) {
                    //sg.utls.showMessageInfo(sg.utls.msgType.ERROR, $.validator.format(orderEntryResources.SwRelatedJob, orderEntryResources.ProjectJobCosting));//  optionalFieldUIGrid.showMessage(errorMsgGrid);
                    //return false;
                    isjobrelated = true;
                } else {
                    isjobrelated = false;
                }


            }
           
        } else {
            sg.controls.Focus($("#tbOrderNo"));
        }
        sg.utls.showMessage(jsonResult)
        if (isjobrelated) {
            sg.utls.showMessageInfo(sg.utls.msgType.ERROR, $.validator.format(orderEntryResources.SwRelatedJob, orderEntryResources.ProjectJobCosting));//  optionalFieldUIGrid.showMessage(errorMsgGrid);
        }

    },
    post: function (jsonResult) {
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            var deliverByDate = new Date(sg.utls.getTextBoxVal("tbDateRequested"));
            var expectedShipDate = new Date(sg.utls.getTextBoxVal("tbExpectedShipDate"));
            var diff = (deliverByDate - expectedShipDate) / (1000 * 60 * 60 * 24);
            var dateMessage = jQuery.validator.format(orderEntryResources.DeliverByDateConfirmation);
            if (orderEntryUI.messageId == "#tbExpectedShipDate") {
                dateMessage = jQuery.validator.format(orderEntryResources.ExpectedShipDateConfirmation);
            }
            if (diff < 0 || (isNaN(diff) && !isNaN(expectedShipDate))) {
                sg.utls.showKendoConfirmationDialog(
                    //Click on Yes
                    function () {
                        orderEntryUISuccess.postOrder(jsonResult);
                    },
                    // Click on No
                    function () {
                        return;
                    },
                    dateMessage);
            } else {
                orderEntryUISuccess.postOrder(jsonResult);
            }
        }
        if (!jsonResult || !jsonResult.UserMessage.IsSuccess || (jsonResult.UserMessage.Warnings && jsonResult.UserMessage.Warnings.length > 0)) {
            sg.utls.showMessage(jsonResult);
        }
    },
    postOrder: function (jsonResult) {
        orderEntryUI.orderEntryModel.isModelDirty.reset();
        orderEntryUISuccess.displayResult(jsonResult, sg.utls.OperationMode.SAVE);
        sg.utls.kndoUI.selectTab("orderEntryTabStrip", "orderTab");
        orderEntryUI.orderEntryModel.Data.entryPosted(true);
        //sg.utls.SyncExecute(PrintForm.printSlips);
        setTimeout(PrintForm.printSlips, 3000);
    },
    refreshMultipleQuotes: function (jsonResult) {
        var grid = gridUtility.fetchGrid('#CreateOrderGrid');
        var index = sg.utls.kndoUI.getSelectedRowIndex(grid);
        if (jsonResult.UserMessage && jsonResult.UserMessage.IsSuccess) {
            
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel.Data.OrderfromQuotes.Items()[index]);
            $('#CreateOrderGrid').data("kendoGrid").dataSource.read();
        }
        //else if (orderEntryUI.orderEntryModel.Data.OrderfromQuotes.Items()[index]) {
        //    orderEntryUI.orderEntryModel.Data.OrderfromQuotes.Items()[index].QuoteNumber("");
        //}
        $("#quoteWindowMessage").empty();
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#quoteWindowMessage");
    },
    refreshPreAuthSuccess: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            orderEntryUI.preAuthorizePopUpClose = false;
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.preAuthorizationModel.OrderPreauthorization);
        } else {
            if (orderEntryUI.lastUpdatedColumn) {
                switch (orderEntryUI.lastUpdatedColumn) {
                    case orderEntryUI.headerRefreshType.PreauthorizationAmt:
                        sg.controls.Focus($("#txPreAuthAmount").siblings("input:visible"));
                        break;
                    case orderEntryUI.headerRefreshType.PreAuthPaymentCode:
                        sg.controls.Focus($("#txPaymentCode"));
                        break;
                    case orderEntryUI.headerRefreshType.PreAuthProcessingCode:
                        orderEntryUI.preAuthorizationModel.OrderPreauthorization.BankCode(null);
                        sg.controls.Focus($("#txProcessingCode"));
                        break;
                }
            }
            orderEntryUI.preAuthorizePopUpClose = true;
        }
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#preAuthorizeMessage");
    },
    UnloadPreAuth: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            ko.mapping.fromJS(jsonResult.OrderPreauthorization, {}, orderEntryUI.preAuthorizationModel.OrderPreauthorization);
            orderEntryUI.orderEntryModel.disablePreAuth(jsonResult.disablePreAuth);
            orderEntryUI.orderEntryModel.disableQuickPreAuth(jsonResult.disablePreAuth);
            captionChange();
        }
        sg.utls.showMessage(jsonResult);
    },
    // B-47249
    refreshQuickPreAuthorize: function (jsonResult) {
        if (jsonResult) {
            if (jsonResult.UserMessage.IsSuccess && (jsonResult.disablePreAuth == orderEntryEnum.TransactionStatus.Success)) {
                orderEntryUI.orderEntryModel.disablePreAuth(orderEntryEnum.TransactionStatus.Success);
                //serviceCall to EnableDisableQuickPreAuth
                orderEntryUtility.EnableDisableQuickPreAuthButton(jsonResult);
                captionChange();
            }
        sg.utls.showMessage(jsonResult);
        }
    },
    CheckIfPrepayExists: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            orderEntryUI.orderEntryModel.prePaymentExists(jsonResult.prePaymentExists);
         }
        sg.utls.showMessage(jsonResult);
    },
    updateCreditCardStatus: function (result) {
        if (result != null) {
            if (result.UserMessage.IsSuccess) {
                $("#message").empty();
                ko.mapping.fromJS(result.OrderPreauthorization, {}, orderEntryUI.preAuthorizationModel.OrderPreauthorization);
                $("#txPreAuthAmount").data("kendoNumericTextBox").value((orderEntryUI.preAuthorizationModel.OrderPreauthorization.PreAuthAmount()));
                orderEntryUI.preAuthorizationModel.disablePreAuth(result.disablePreAuth);
                orderEntryUI.prevPreAuthStatus = orderEntryUI.preAuthorizationModel.OrderPreauthorization.TransactionStatus();
                PreAuthExtension(orderEntryUI.preAuthorizationModel);
            }
            else {
                ko.mapping.fromJS(orderEntryUI.defaultOrderPreAuthModel.OrderPreauthorization, {}, orderEntryUI.preAuthorizationModel.OrderPreauthorization);
                $("#txPreAuthAmount").data("kendoNumericTextBox").value((orderEntryUI.preAuthorizationModel.OrderPreauthorization.PreAuthAmount()));
                sg.utls.showMessagePopupWithoutClose(result, "#preAuthorizeMessage");
            }
           
        }
    },
    updatePrepaymentCardStatus: function (jsonResult) {
        if (jsonResult != null) {
            if (jsonResult.UserMessage.IsSuccess) {
                $("#message").empty();
                ko.mapping.fromJS(jsonResult.OrderPrepayment, {}, orderEntryUI.orderEntryModel.Data.OrderPrepayment);
                if (orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus() == orderEntryEnum.CreditCardChargeStatus.Charged) {
                
                    orderEntryPrePayBatchExtension(orderEntryUI.receiptBatchData,  orderEntryUI.orderEntryModel.CompanyProfile.CompanyProfileOptions.IsMulticurrency(),orderEntryUI.orderEntryModel.preAuthExists(), orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus());
                    ko.applyBindings(orderEntryUI.receiptBatchData, document.getElementById("prepaymentBatchDetail"));
                    orderEntryUI.orderEntryModel.Captured(true);
                } else {
                    orderEntryUI.orderEntryModel.Captured(false);
                }
                if (orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus() == orderEntryEnum.CreditCardChargeStatus.Voided) {
                    orderEntryUI.Voided = true;
                    orderEntryRepository.setPrepayCardStatusforVoidSale();
                }
            }
            else {
                sg.utls.showMessagePopupWithoutClose(jsonResult, "#prepaymentMessage");
            }

        }
    },
    setPrepayCardStatusforVoidSale: function (jsonResult) {
        if (jsonResult != null) {
            if (jsonResult.UserMessage.IsSuccess) {
                ko.mapping.fromJS(jsonResult.OrderPrepayment, {}, orderEntryUI.orderEntryModel.Data.OrderPrepayment);
                if (orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus() == orderEntryEnum.CreditCardChargeStatus.None && orderEntryUI.orderEntryModel.Data.OrderPrepayment.ReceiptBatchNumber() == 0) {
                    orderEntryUtility.updateNumericValue();
                    orderEntryUI.Voided = true;
                    orderEntryPrePayBatchExtension(orderEntryUI.newPrepaymentBatchModel, orderEntryUI.orderEntryModel.CompanyProfile.CompanyProfileOptions.IsMulticurrency(), orderEntryUI.orderEntryModel.preAuthExists(), orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus());
                    ko.applyBindings(orderEntryUI.newPrepaymentBatchModel, document.getElementById("prepaymentBatchDetail"));
                }
                orderEntryUI.Voided = false;
            }
        }
    },
    refreshPrepayment: function(jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            orderEntryUI.prepaymentPopUpClose = false;
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data.OrderPrepayment);
        } else {
            if (orderEntryUI.lastUpdatedColumn) {
                switch (orderEntryUI.lastUpdatedColumn) {
                    case orderEntryUI.prepaymentRefreshType.RateType:
                        sg.controls.Focus($("#OrderPrepayment_RateType"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.ReceiptType:
                        sg.controls.Focus($("#Data_OrderPrepayment_ReceiptType"));
                        break;
                    case orderEntryUI.prepaymentRefreshType.YpProcessCode:
                        sg.controls.Focus($("#Data_OrderPrepayment_YpProcessCode"));
                        break;
                }
            }
            orderEntryUI.prepaymentPopUpClose = true;
            $("#prepaymentWindow").scrollTop(0);
        }
        orderEntryUISuccess.setExchangeRate();
        sg.utls.showMessagePopupWithoutClose(jsonResult, "#prepaymentMessage");
        orderEntryUtility.updateNumericValue();
    },
    initialLoad: function (jsonResult) {
        if (jsonResult) {
            var uiMode = sg.utls.OperationMode.NEW;
            
            if (jsonResult.Data.CustomerNumber) {
                uiMode = sg.utls.OperationMode.SAVE;                
            }

            orderEntryUISuccess.displayResult(jsonResult, uiMode);

            if (jsonResult.Data.CustomerNumber) {
                orderEntryUI.orderEntryModel.Data.entryPosted(true);
                orderEntryUI.orderEntryModel.Data.disableScreen(jsonResult.DisableScreen);
                orderEntryUI.enableDisableTabs(false);
            }
            orderEntryUI.orderEntryModel.isModelDirty.reset();
        }
        sg.utls.showMessage(jsonResult);
        sg.controls.Focus($("#tbOrderNo"));
    },
    getCurrencyDecimal: function (jsonResult) {
        if (jsonResult != null) {
            orderEntryUI.orderEntryModel.OrderCurrencyDecimal(jsonResult);
            orderEntryUI.OrderCurrencyDecimal = orderEntryUI.orderEntryModel.OrderCurrencyDecimal();
           
        }
        // sg.utls.showMessage(jsonResult);
    },
    getPrepaymentCurrencyDecimal:function(jsonResult) {
        if (jsonResult != null) {
            orderEntryUI.orderPrepaymentCurrencyDecimal = jsonResult;
            var curdecimal = orderEntryUI.orderPrepaymentCurrencyDecimal;
            var receiptAmount = $("#Data_OrderPrepayment_ReceiptAmount").data("kendoNumericTextBox");
            orderEntryUtility.setNumericTextBox("#Data_OrderPrepayment_ReceiptAmount", 13, curdecimal, -9999999999999.99);
            if (receiptAmount) {
                orderEntryUtility.fixDecimals(receiptAmount, curdecimal, 13);
            }
        }
    },
    getTaxReportingCurrencyDecimal: function (jsonResult) {
        if (jsonResult != null) {
            orderEntryUI.orderEntryModel.TaxReportingCurrencyDecimal(jsonResult);
            orderEntryUI.TaxReportCurryDecimal = orderEntryUI.orderEntryModel.TaxReportingCurrencyDecimal();
        }
        // sg.utls.showMessage(jsonResult);
    },
    updateHeader: function (jsonResult, lastHeaderRefreshType) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            ko.mapping.fromJS(jsonResult.Data, {}, orderEntryUI.orderEntryModel.Data);
            orderEntryRepository.getCurrencyDecimal(orderEntryUI.orderEntryModel.Data.OrSourCurr(),false);
            orderEntryRepository.getTaxRptCurrencyDecimal(orderEntryUI.orderEntryModel.Data.TaxReportingTrCurrency());
            orderEntryUISuccess.setExchangeRate();
            if (orderEntryUI.lastUpdatedColumn == orderEntryUI.headerRefreshType.PerformMultipleQuotesToOrder ||
                orderEntryUI.lastUpdatedColumn == orderEntryUI.headerRefreshType.shipAll ||
                orderEntryUI.lastUpdatedColumn == orderEntryUI.headerRefreshType.OrderType  ||
                orderEntryUI.lastUpdatedColumn == orderEntryUI.headerRefreshType.onHold) {
                    $('#OrderDetailGrid').data("kendoGrid").dataSource.read();                
            }
          
            if (orderEntryUI.controlToFocus == "#Data_Shidate") {
                orderEntryUI.previousShipDate = orderEntryUI.orderEntryModel.Data.Shidate();
            } else if (orderEntryUI.controlToFocus == "#Data_ShipmentPostingDate") {
                orderEntryUI.previousShipPostingDate = orderEntryUI.orderEntryModel.Data.ShipmentPostingDate();
            } else if (orderEntryUI.controlToFocus == "#Data_InvoiceDate") {
                orderEntryUI.previousInvoiceDate = orderEntryUI.orderEntryModel.Data.InvoiceDate();
            } else if (orderEntryUI.controlToFocus == "#Data_InvoicePostingDate") {
                orderEntryUI.prevoiusInvoicePostingDate = orderEntryUI.orderEntryModel.Data.InvoicePostingDate();
            }
            else if (orderEntryUI.controlToFocus == "#Data_OrderDate") {
                orderEntryUI.previousOrderDate = orderEntryUI.orderEntryModel.Data.OrderDate();
            }

            orderEntryUI.previousShipDate = orderEntryUI.orderEntryModel.Data.Shidate();

            $("#ddlOrderType").data("kendoDropDownList").value(sg.controls.GetString(orderEntryUI.orderEntryModel.Data.OrderType()));
            $("#ddlCustDiscountLvl").data("kendoDropDownList").value(sg.controls.GetString(orderEntryUI.orderEntryModel.Data.CustomerDiscountLevel()));
            orderEntryUI.maskPhoneNumber();
        } else {
            sg.controls.Focus($(orderEntryUI.controlToFocus));
            if (orderEntryUI.controlToFocus == "#Data_OrderDiscountPercentage") {
                sg.controls.Focus($("#Data_OrderDiscountPercentage").siblings("input:visible"));
            }
            if (orderEntryUI.controlToFocus == "#Data_OrderDiscountAmount") {
                sg.controls.Focus($("#Data_OrderDiscountAmount").siblings("input:visible"));
            }
            if (orderEntryUI.controlToFocus == "#tbCustNo") {
                orderEntryUI.orderEntryModel.Data.CustomerNumber(orderEntryUI.lastUpdatedValue);
            }
            else if (orderEntryUI.controlToFocus == "#ddlOrderType") {
                orderEntryUI.orderEntryModel.Data.OrderType(orderEntryUI.lastUpdatedValue);
                $("#ddlOrderType").data("kendoDropDownList").value(orderEntryUI.orderEntryModel.Data.OrderType());
            }        
        }
        sg.utls.showMessage(jsonResult);
        orderEntryUI.enableDisableTabs((orderEntryUI.orderEntryModel.Data.CustomerNumber() ? false : true));
        orderEntryUtility.updateNumericValue();
        if ((lastHeaderRefreshType === orderEntryUI.headerRefreshType.Customer) &&
             orderEntryUI.orderEntryModel.Data.CustomerExists()) {
            // New customers won't have any notes yet - only show notes (if any) for existing
            // customers.
            // NOTE: Existing customers won't get any messages (such as warnings) that would
            //       have triggered the asynchronous parts of the earlier showMessage call.
            sg.utls.showCustomerNotes(orderEntryUI.orderEntryModel.Data.CustomerNumber());
        }
    },
    saveDetails: function(jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage && !jsonResult.UserMessage.Errors) {
            orderEntryUI.displayApprovedAmount=false;
            orderEntryRepository.PreCreditCheckBeforePost();
            orderEntryUI.TabOptionFieldLoad = false;
            optionalFieldUIGrid.hasInvalidData = false;
        }
        sg.utls.showMessage(jsonResult);
    },
    preCreditCheckBeforePost: function (jsonResult) {
        if (jsonResult == true) {
            orderEntryUI.preCreditCheckFormType = orderEntryEnum.PreCreditCheckFormType.CreditApproval;
            orderEntryRepository.launchPreCreditCheck(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties));
        } else if(jsonResult==false){
            orderEntryUI.post();
        }

        if (jsonResult.UserMessage) {
            sg.utls.showMessage(jsonResult);
        }
    },
    launchPreCreditCheck: function(result) {
            if (result) {
                $('#preCreditCheckWindow').html(result);
                orderEntryUI.preCreditCheckModel = ko.mapping.fromJS(preCreditCheckModel);
                PreCreditCheckExtension(orderEntryUI.preCreditCheckModel);
                ko.applyBindings(orderEntryUI.preCreditCheckModel, document.getElementById("preCreditCheckWindow"));
                if (preCreditCheckModel.UserMessage.IsSuccess) {
                    sg.utls.openKendoWindowPopup('#preCreditCheckWindow', null);
                    $("#Data_UserEnteredApprovalAmount").val(orderEntryUI.userEnteredApprovalAmount);
                    orderEntryUI.initPreCreditCheckButtons();
                    orderEntryUI.initPreCreditCheckBox();
                    orderEntryUI.initPreCreditTextBox();
                    orderEntryUI.initPreCreditNumericTextBoxDecimal();
                    if (!orderEntryUI.displayApprovedAmount) {
                        $("#divUserEnteredApprovalAmount").hide();
                    }
                }
            }
            //sg.utls.showMessage(preCreditCheckModel);
            if (preCreditCheckModel.Data.Warnings.length > 0) {
                sg.utls.showMessageInfo(sg.utls.msgType.INFO, preCreditCheckModel.Data.Warnings[0].Message);
            }
        },
    launchPreAuthSuccess: function (result) {
        if (result) {
            $('#PreauthorizeWindow').html(result);
            orderEntryUI.preAuthorizationModel = ko.mapping.fromJS(preAuthorizationModel);
            orderEntryUI.defaultOrderPreAuthModel = ko.mapping.fromJS(preAuthorizationModel);
            PreAuthExtension(orderEntryUI.preAuthorizationModel);
            ko.applyBindings(orderEntryUI.preAuthorizationModel, document.getElementById("PreauthorizeWindow"));
            if (preAuthorizationModel.UserMessage.IsSuccess) {
                orderEntryUI.prevPreAuthStatus = orderEntryUI.preAuthorizationModel.OrderPreauthorization.TransactionStatus();
                sg.utls.openKendoWindowPopup('#PreauthorizeWindow', null);
            }
            orderEntryUI.initPreAuthTextBox();
            orderEntryUI.initPreAuthButtons();
            orderEntryUI.initPreAuthFinder();
            orderEntryUI.initPreAuthNumericTextBoxDecimal();
            orderEntryUI.initPreAuthNumericTextBox();
        }
        sg.utls.showMessage(preAuthorizationModel);
    },
    launchProcessCreditCard: function (result) {
        if (result != null) {
            $('#processCreditCard').html(result);
            
            orderEntryUI.ProcessCreditCardViewModel = ko.mapping.fromJS(ProcessCreditCardViewModel);
            $("#processCreditCard").kendoWindow({
                modal: true,
                resizable: false,
                draggable: true,
                scrollable: true,
                visible: false,
                width: "1020",
                minHeight: 500,
                maxHeight: 900,
                close: function (e) {
                    if (processCreditCardUI.CreditCardPopUpErrorClose == true) {
                        e.preventDefault();
                    }
                    else if (processCreditCardUI.CreditCardPopUpErrorClose == false) {
                        // Add function call to update the main page data/
                        if (processCreditCardUI.spsReturnStatus != null) {
                            if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.CardApproved) {
                                orderEntryRepository.updateCreditCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.CardApproved, orderEntryUI.prevPreAuthStatus);
                            } else if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.Cancel) {
                                orderEntryRepository.updateCreditCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Cancel, orderEntryUI.prevPreAuthStatus);
                            } else if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.Error) {
                                orderEntryRepository.updateCreditCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Error, orderEntryUI.prevPreAuthStatus);
                            } else if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.Declined) {
                                orderEntryRepository.updateCreditCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Declined, orderEntryUI.prevPreAuthStatus);
                            }
                        } else {
                            orderEntryRepository.updateCreditCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Cancel, orderEntryUI.prevPreAuthStatus);
                        }
                    }
                },
                // Custom function to suppot focus within kendo window
                activate: sg.utls.kndoUI.onActivate,
                open: function () {
                    sg.utls.setKendoWindowPosition(this);
                }
            }).data("kendoWindow");
            var windowTitle = $("#processCreditCard").data("kendoWindow");
            if (orderEntryUI.ProcessCreditCardViewModel.Data.Transaction() == orderEntryEnum.TransactionType.VoidPreAuth || orderEntryUI.ProcessCreditCardViewModel.Data.Transaction() == orderEntryEnum.TransactionType.VoidPreAuthPending) {
                windowTitle.title($.validator.format(orderEntryResources.ProcessCreditCardVoidPreAuthTitle));
            } else {
                windowTitle.title($.validator.format(orderEntryResources.ProcessCreditCardPreAuthTitle));
            }
            if (ProcessCreditCardViewModel.UserMessage.IsSuccess) {
                sg.utls.openKendoWindowPopup('#processCreditCard', result);
            } else {
                orderEntryUI.preAuthorizePopUpClose = true;
            }
            sg.utls.showMessagePopupWithoutClose(ProcessCreditCardViewModel, "#preAuthorizeMessage");

        }
    },
    QuickChargePrepaymentResult: function (result) {
        if (result)
        {
            // TODO: this call keeps 'Void' button disabled, investigate. 
            ko.mapping.fromJS(result.Data, {}, orderEntryUI.orderEntryModel.Data.OrderPrepayment);

            // update status in orderEntryModel
            orderEntryUI.orderEntryModel.Captured(result.UserMessage.IsSuccess);
            updatePrepaymentButtons(result.UserMessage.IsSuccess);
            sg.utls.showMessage(result);
        }

    },
    launchPrepaymentProcessCreditCard:function(result) {
        if (result != null) {
            $('#processCreditCard').html(result);

            orderEntryUI.ProcessCreditCardViewModel = ko.mapping.fromJS(ProcessCreditCardViewModel);
            $("#processCreditCard").kendoWindow({
                modal: true,
                resizable: false,
                draggable: true,
                scrollable: true,
                visible: false,
                width: "1020",
                minHeight: 500,
                maxHeight: 900,
                close: function (e) {
                    // Add function call to update the main page data/
                    if (processCreditCardUI.spsReturnStatus != null) {
                        if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.CardApproved) {
                            orderEntryRepository.updatePrepaymentCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.CardApproved);
                        } else if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.Cancel) {
                            orderEntryRepository.updatePrepaymentCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Cancel);
                        } else if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.Error) {
                            orderEntryRepository.updatePrepaymentCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Error);
                        } else if (processCreditCardUI.spsReturnStatus == orderEntryEnum.ReturnStatus.Declined) {
                            orderEntryRepository.updatePrepaymentCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Declined);
                        }
                    } else {
                        orderEntryRepository.updatePrepaymentCardStatus(sg.utls.ko.toJS(processCreditCardUI.processCreditCardModel.Data), orderEntryEnum.ReturnStatus.Cancel);
                    }
                },
                // Custom function to suppot focus within kendo window
                activate: sg.utls.kndoUI.onActivate,
                open: function () {
                    sg.utls.setKendoWindowPosition(this);
                }
            }).data("kendoWindow");
            var windowTitle = $("#processCreditCard").data("kendoWindow");
            if (orderEntryUI.ProcessCreditCardViewModel.Data.Transaction() == orderEntryEnum.TransactionType.VoidsalePending || orderEntryUI.ProcessCreditCardViewModel.Data.Transaction() == orderEntryEnum.TransactionType.VoidSale) {
                windowTitle.title($.validator.format(orderEntryResources.ProcessCreditCardVoidSaleTitle));
            } else if (orderEntryUI.ProcessCreditCardViewModel.Data.Transaction() == orderEntryEnum.TransactionType.Capture) {
                windowTitle.title($.validator.format(orderEntryResources.ProcessCreditCardCapturePreAuth));
        } else {
            windowTitle.title($.validator.format(orderEntryResources.ProcessCreditCardSaleTitle));
            }
           
            if (ProcessCreditCardViewModel.UserMessage.IsSuccess) {
                sg.utls.openKendoWindowPopup('#processCreditCard', result);
            } else {
                orderEntryUI.prepaymentPopUpClose = true;
            }
            sg.utls.showMessagePopupWithoutClose(ProcessCreditCardViewModel, "#prepaymentMessage");

        }
    },
    getProcessCardSuccess: function (result) {
        if (result != null) {

            $("#processCreditCardInfo").kendoWindow({
                modal: true,
                title: "ProcessCardInfo",
                resizable: false,
                draggable: true,
                scrollable: true,
                visible: false,
                width: "1020",
                minHeight: 500,
                maxHeight: 900,
                close: function (e) {
                    // Add function call to update the main page data
                },
                // Custom function to suppot focus within kendo window
                activate: sg.utls.kndoUI.onActivate,
                open: function () {
                    sg.utls.setKendoWindowPosition(this);
                }
            }).data("kendoWindow");

            sg.utls.openKendoWindowPopup('#processCreditCardInfo', result);
        }
        else {
            //sg.utls.showMessage(result);
            sg.utls.showMessagePopupWithoutClose(result, "#processCreditCardMessage");
        }
    },
    proceedWithPreCreditCheck: function (result) {
        if (result.ProceedPreCreditCheckStatus == true) {
            orderEntryUI.preCreditCheckModel = ko.mapping.fromJS(preCreditCheckModel);
            $("#preCreditCheckWindow").data("kendoWindow").close();
        } else {
            sg.utls.showMessage(result);
        }
    },
    confirmExchangeRate: function (max, min, property, id, methodToCall) {
        if (property() > max || property() < min) {
            sg.utls.showKendoConfirmationDialog(
                //Click on Yes
                function () {
                    switch(methodToCall) {
                        case "OrderEntry":
                            orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.lastUpdatedColumn);
                            break;
                        case "Prepayment":
                            orderEntryRepository.refreshPrepayment(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), orderEntryUI.prepaymentRefreshType.BankRate);
                            break;
                        case "PrepaymentBatch":
                            orderEntryUtility.updateNumericTextBox("Data_BankExchangeRate", orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate())
                            orderEntryRepository.refreshPrepaymentBatch(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate(), 15);
                            break;
                    }
                    orderEntryUISuccess.setExchangeRate();
                },
                // Click on No
                function () {
                    property(orderEntryUISuccess.getExchangeRate(id));
                    orderEntryUtility.updateNumericTextBox(id, property());
                },
                orderEntryResources.RateOutOfRange);
        }
        else if (property() > 0) {
            orderEntryUISuccess.setExchangeRate();
            switch (methodToCall) {
                case "OrderEntry":
                    orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.lastUpdatedColumn);
                    break;
                case "Prepayment":
                    orderEntryRepository.refreshPrepayment(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data.OrderPrepayment), orderEntryUI.prepaymentRefreshType.BankRate);
                    break;
                case "PrepaymentBatch":
                    orderEntryUtility.updateNumericTextBox("Data_BankExchangeRate", orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate())
                    orderEntryRepository.refreshPrepaymentBatch(orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate(), 15);
                    break;
            }
        }
    },
    setExchangeRate: function () {
        orderEntryUI.orRate = orderEntryUI.orderEntryModel.Data.OrRate();
        orderEntryUI.trRate = orderEntryUI.orderEntryModel.Data.TrRate()
        orderEntryUI.shipmentRate = orderEntryUI.orderEntryModel.Data.ShipmentRate()
        orderEntryUI.trShipmentRate = orderEntryUI.orderEntryModel.Data.TrShipmentRate()
        orderEntryUI.inRate = orderEntryUI.orderEntryModel.Data.InRate()
        orderEntryUI.trInvoiceRate = orderEntryUI.orderEntryModel.Data.TrInvoiceRate()
        orderEntryUI.prepaymentBankRate = orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate()
    },

    getExchangeRate: function (id) {
        switch (id) {
            case "Data_OrRate":
                return orderEntryUI.orRate;
                break;
            case "Data_TrRate":
                return orderEntryUI.trRate;
                break;
            case "Data_ShipmentRate":
                return orderEntryUI.shipmentRate;
                break;
            case "Data_TrShipmentRate":
                return orderEntryUI.trShipmentRate;
                break;
            case "Data_InRate":
                return orderEntryUI.inRate;
                break;
            case "Data_TrInvoiceRate":
                return orderEntryUI.trInvoiceRate;
                break;
            case "OrderPrepayment_BankRate":
                return orderEntryUI.prepaymentBankRate;
                break;
            case "Data_BankExchangeRate":
                return orderEntryUI.prepaymentBankRate;
                break;

        }
    },

    validateExchangeRate: function (jsonResult) {
        if (jsonResult != null && jsonResult.Rate > 0) {
            var max = jsonResult.Rate + jsonResult.Spread;
            var min = jsonResult.Rate - jsonResult.Spread;
            switch (orderEntryUI.lastUpdatedColumn) {
                case orderEntryUI.headerRefreshType.orderExchangeRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.OrRate, "Data_OrRate", "OrderEntry");
                    break;
                case orderEntryUI.headerRefreshType.trRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.TrRate, "Data_TrRate", "OrderEntry");
                    break;
                case orderEntryUI.headerRefreshType.shipmentExchangeRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.ShipmentRate, "Data_ShipmentRate", "OrderEntry");
                    break;
                case orderEntryUI.headerRefreshType.trShipmentExchangeRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.TrShipmentRate, "Data_TrShipmentRate", "OrderEntry");
                    break;
                case orderEntryUI.headerRefreshType.invoiceExchangeRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.InRate, "Data_InRate", "OrderEntry");
                    break;
                case orderEntryUI.headerRefreshType.trInvoiceExchangeRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.TrInvoiceRate, "Data_TrInvoiceRate", "OrderEntry");
                    break;
                case orderEntryUI.headerRefreshType.PrepaymentBankRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate, "OrderPrepayment_BankRate", "Prepayment");
                    break;
                case orderEntryUI.headerRefreshType.PrepaymentBatchBankRate:
                    orderEntryUISuccess.confirmExchangeRate(max, min, orderEntryUI.orderEntryModel.Data.OrderPrepayment.BankRate, "Data_BankExchangeRate", "PrepaymentBatch");
                    break;
            }


        }
    },
    validateDate: function (jsonResult) {
        if (jsonResult.UserMessage.Message != null && jsonResult.UserMessage.IsSuccess) {
            sg.utls.showKendoConfirmationDialog(
                //click on Yes
                function () {
                    if (orderEntryUI.controlToFocus == "#Data_Shidate") {
                        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.ShipmentDate;
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ShipmentDate);
                    }
                    if (orderEntryUI.controlToFocus == "#Data_ShipmentPostingDate") {
                        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.ShipmentPostingDate;
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ShipmentPostingDate);
                    }
                    if (orderEntryUI.controlToFocus == "#Data_InvoiceDate") {
                        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.InvoiceDate;
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.InvoiceDate);
                    }
                    if (orderEntryUI.controlToFocus == "#Data_InvoicePostingDate") {
                        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.InvoicePostingDate;
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.InvoicePostingDate);
                    }
                    if (orderEntryUI.controlToFocus == "#tbOrderDate") {
                        orderEntryUI.lastUpdatedColumn = orderEntryUI.headerRefreshType.OrderDate;
                        orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.OrderDate);
                    }
                },
                //click on No
                function () {
                    if (orderEntryUI.controlToFocus == "#Data_Shidate") {
                        orderEntryUI.orderEntryModel.Data.Shidate(orderEntryUI.previousShipDate);
                    }
                    if (orderEntryUI.controlToFocus == "#Data_ShipmentPostingDate") {
                        orderEntryUI.orderEntryModel.Data.ShipmentPostingDate(orderEntryUI.previousShipPostingDate);
                    }
                    if (orderEntryUI.controlToFocus == "#Data_InvoiceDate") {
                        orderEntryUI.orderEntryModel.Data.InvoiceDate(orderEntryUI.previousInvoiceDate);
                    }
                    if (orderEntryUI.controlToFocus == "#Data_InvoicePostingDate") {
                        orderEntryUI.orderEntryModel.Data.InvoicePostingDate(orderEntryUI.prevoiusInvoicePostingDate);
                    }
                    if (orderEntryUI.controlToFocus == "#tbOrderDate") {
                        orderEntryUI.orderEntryModel.Data.OrderDate(orderEntryUI.previousOrderDate);
                    }
                },
                jsonResult.UserMessage.Message);
        } else {
            var data = sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties);
            if (orderEntryUI.controlToFocus == "#Data_Shidate") {
                orderEntryUI.previousShipDate = orderEntryUI.orderEntryModel.Data.Shidate();
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ShipmentDate);

            }
            if (orderEntryUI.controlToFocus == "#Data_ShipmentPostingDate") {
                orderEntryUI.previousShipPostingDate = orderEntryUI.orderEntryModel.Data.ShipmentPostingDate();
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.ShipmentPostingDate);
            }
            if (orderEntryUI.controlToFocus == "#Data_InvoiceDate") {
                orderEntryUI.previousInvoiceDate = orderEntryUI.orderEntryModel.Data.InvoiceDate();
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.InvoiceDate);
            }
            if (orderEntryUI.controlToFocus == "#Data_InvoicePostingDate") {
                orderEntryUI.prevoiusInvoicePostingDate = orderEntryUI.orderEntryModel.Data.InvoicePostingDate();
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.InvoicePostingDate);
            }
            if (orderEntryUI.controlToFocus == "#tbOrderDate") {
                orderEntryUI.previousOrderDate = orderEntryUI.orderEntryModel.Data.OrderDate();
                orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.OrderDate);
            }
        }
        return;
    },
    getLocationQuantityDetail: function (jsonResult) {
        $('#LocationQuantity').html(jsonResult);
        orderEntryUI.initDrillDownButtons();
        orderEntryUI.locationQuantityModel = ko.mapping.fromJS(locationQuantityModel);

        var qtyQuantityonHand = orderEntryUI.locationQuantityModel.QuantityonHand();
        $("#txtQuantityonHand").text(gridUtility.getLocationQuantityDecimal(qtyQuantityonHand));

        var qtyQuantityonSo = orderEntryUI.locationQuantityModel.QuantityonSo();
        $("#txtQuantityonSo").text(gridUtility.getLocationQuantityDecimal(qtyQuantityonSo));

        var qtyQuantityonPO = orderEntryUI.locationQuantityModel.QuantityonPO();
        $("#txtQuantityonPO").text(gridUtility.getLocationQuantityDecimal(qtyQuantityonPO));

        var qtyQuantityCommitted = orderEntryUI.locationQuantityModel.QuantityCommitted();
        $("#txtQuantityCommitted").text(gridUtility.getLocationQuantityDecimal(qtyQuantityCommitted));

        var qtyQuantityAvailable = orderEntryUI.locationQuantityModel.QuantityAvailable();
        $("#txtQuantityAvailable").text(gridUtility.getLocationQuantityDecimal(qtyQuantityAvailable));

        var qtyTotalQuantityonHand = orderEntryUI.locationQuantityModel.TotalQuantityonHand();
        $("#txtTotalQuantityonHand").text(gridUtility.getLocationQuantityDecimal(qtyTotalQuantityonHand));

        var qtyTotalQuantityonSo = orderEntryUI.locationQuantityModel.TotalQuantityonSo();
        $("#txtTotalQuantityonSo").text(gridUtility.getLocationQuantityDecimal(qtyTotalQuantityonSo));

        var qtyTotalQuantityonPO = orderEntryUI.locationQuantityModel.TotalQuantityonPO();
        $("#txtTotalQuantityonPO").text(gridUtility.getLocationQuantityDecimal(qtyTotalQuantityonPO));

        var qtyTotalQuantityCommitted = orderEntryUI.locationQuantityModel.TotalQuantityCommitted();
        $("#txtTotalQuantityCommitted").text(gridUtility.getLocationQuantityDecimal(qtyTotalQuantityCommitted));

        var qtyTotalQuantityAvailable = orderEntryUI.locationQuantityModel.TotalQuantityAvailable();
        $("#txtTotalQuantityAvailable").text(gridUtility.getLocationQuantityDecimal(qtyTotalQuantityAvailable));
        ko.applyBindings(orderEntryUI.orderEntryModel, document.getElementById("LocationQuantity"));
        if (orderEntryUI.orderEntryModel.Data.disableScreen() == true) {
            $(".edit-field").addClass("pencil-edit pencil-edit-disabled").removeClass("edit-field");
        }
    },
    SetOrderItemTax: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage == null) {
            $("#detailTaxWindowMessage").empty();
            var grid = gridUtility.fetchGrid(OrderDetailGrid)
            var index = sg.utls.kndoUI.getSelectedRowIndex(grid);
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel.Data.OrderDetails.Items()[index]);
            orderEntryUI.initDetailtTaxGrid(false);
            $('#ItemTaxGrid').data("kendoGrid").dataSource.read();
            orderEntryUI.DetailTaxPopUpClose = false;
        } else {
            orderEntryUI.DetailTaxPopUpClose = true;
            sg.utls.showMessagePopupWithoutClose(jsonResult, "#detailTaxWindowMessage");
        }
    },

    displayResult: function (jsonResult, uiMode) {
        if (jsonResult != null) {
            orderEntryUI.UIMode(uiMode);
            if (!orderEntryUI.hasKoBindingApplied) {
                orderEntryUI.orderEntryModel = ko.mapping.fromJS(jsonResult);
                orderEntryUI.NumberOfDecimalsForQty = orderEntryUI.orderEntryModel.NumberOfDecimalsForQty();
                orderEntryUI.TaxReportCurryDecimal = orderEntryUI.orderEntryModel.TaxReportingCurrencyDecimal();
                orderEntryUI.hasKoBindingApplied = true;
                orderEntryObservableExtension(orderEntryUI.orderEntryModel, uiMode);
                orderEntryUI.orderEntryModel.isModelDirty = new ko.dirtyFlag(orderEntryUI.orderEntryModel.Data, orderEntryUI.ignoreIsDirtyProperties);
                ko.applyBindings(orderEntryUI.orderEntryModel);
                orderEntryUI.OrderNumber = jsonResult.Data.OrderNumber;
                orderEntryUI.orderEntryModel.isModelDirty.reset();
                $("#orderEntryTabStrip").show();
            } else {
                orderEntryUI.orderEntryModel.Data.OrderDetails.Items([]);
                ko.mapping.fromJS(jsonResult, orderEntryUI.orderEntryModel);
                if (uiMode != sg.utls.OperationMode.NEW) {
                    orderEntryUI.orderEntryModel.isModelDirty.reset();
                }
            }
            if (!orderEntryUI.isKendoControlNotInitialised) {
                orderEntryUI.isKendoControlNotInitialised = true;
                orderEntryUI.initDropDownList();
                //orderEntryUI.initNumericTextBoxDecimal();
                $("#ddlOrderType").data("kendoDropDownList").value(sg.controls.GetString(jsonResult.Data.OrderType));
                $("#ddlCustDiscountLvl").data("kendoDropDownList").value(sg.controls.GetString(jsonResult.Data.CustomerDiscountLevel));
            } else {
                $("#ddlOrderType").data("kendoDropDownList").value(sg.controls.GetString(orderEntryUI.orderEntryModel.Data.OrderType()));
                $("#ddlCustDiscountLvl").data("kendoDropDownList").value(sg.controls.GetString(orderEntryUI.orderEntryModel.Data.CustomerDiscountLevel()));
                orderEntryUI.maskPhoneNumber();
            }
            orderEntryUI.initNumericTextBoxDecimal();
            orderEntryUI.previousShipDate = orderEntryUI.orderEntryModel.Data.Shidate();
            orderEntryUI.previousShipPostingDate = orderEntryUI.orderEntryModel.Data.ShipmentPostingDate();
            orderEntryUI.previousInvoiceDate = orderEntryUI.orderEntryModel.Data.InvoiceDate();
            orderEntryUI.prevoiusInvoicePostingDate = orderEntryUI.orderEntryModel.Data.InvoicePostingDate();
            orderEntryUI.previousOrderDate = orderEntryUI.orderEntryModel.Data.OrderDate();
            orderEntryUtility.updateNumericValue();
            orderEntryUISuccess.setExchangeRate();
            orderEntryUI.TabOptionFieldLoad = false;
            orderEntryUISuccess.SetFieldVisibility();                                                              
            orderEntryUISuccess.resetGridData();
            orderEntryUISuccess.loadGridData();
            captionChange();
        }
    },
    loadGridData: function () {
        var loadData = false;
        if (orderEntryUI.orderEntryModel && orderEntryUI.orderEntryModel.Data &&
            orderEntryUI.orderEntryModel.Data.CustomerNumber()) {
            loadData = true;
        }

        if (loadData && orderEntryUI.UIMode() != sg.utls.OperationMode.NEW) {
            gridUtility.readGrid("#OrderDetailGrid");
            //$('#OrderDetailGrid').data("kendoGrid").dataSource.read();
        } else {
            orderEntryUI.isOrderDetailLoad = false;
        }
    },
    SetFieldVisibility: function () {
        $('#divOnHold').show();
        $('#divMultipleQuote').show();
        $('#divQuoteExpiration').hide();
        if (orderEntryUI.orderEntryModel.Data.OrderType() === orderEntryUI.orderTypeEnum.Quote) {
            $('#divOnHold').hide();
            $('#divMultipleQuote').hide();
            $('#divQuoteExpiration').show();

        }
    },
    resetGridData: function () {
        lastSelection = null;
        orderDetailGridUI.currentDataRow = null;
        orderEntryUI.orderEntryModel.Data.selectedOrderDetailRow(null);
        $('#OrderDetailGrid').data("kendoGrid").dataSource.data([]);
        orderEntryUtility.setFirstLineEditable = false;
        $('#CreateOrderGrid').data("kendoGrid").dataSource.data([]);
        orderEntryRepository.getLocationQuantityDetail(null, null);

        orderEntryUI.orderEntryModel.isModelDirty.reset();
    },
    taxProcess: function (jsonResult) {
        if (jsonResult != null) {
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel.Data);
            var grid = $('#orderTaxGrid').data("kendoGrid");
            grid.dataSource.page(1);
            orderEntryUtility.updateNumericValue();
        }
        sg.utls.showMessage(jsonResult);
    },
    SetSalespersonAttribute: function (jsonResult) {
        var grid = $('#SalesSplitGrid').data("kendoGrid");
        var gridData = sg.utls.kndoUI.getSelectedRowData(grid);
        if (jsonResult != null && jsonResult.UserMessage == null) {
            $("#message").empty();
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel.Data);
           
            //var grid = $('#SalesSplitGrid').data("kendoGrid");
            //grid.dataSource.page(1);
            if (gridData != null) {
                switch (gridData.SeqNo) {
                    case 1:
                        gridData.set("SalesPerson", jsonResult.SalespersonName1);
                        gridData.set("SalesPersonCode", jsonResult.Salesperson1);
                        gridData.set("SalesSplitPercentage", jsonResult.SalesPercentage1);
                    break;
                case 2:
                    gridData.set("SalesPerson", jsonResult.SalespersonName2);
                    gridData.set("SalesPersonCode", jsonResult.Salesperson2);
                    gridData.set("SalesSplitPercentage", jsonResult.SalesPercentage2);
                    break;
                case 3:
                    gridData.set("SalesPerson", jsonResult.SalespersonName3);
                    gridData.set("SalesPersonCode", jsonResult.Salesperson3);
                    gridData.set("SalesSplitPercentage", jsonResult.SalesPercentage3);
                    break;
                case 4:
                    gridData.set("SalesPerson", jsonResult.SalespersonName4);
                    gridData.set("SalesPersonCode", jsonResult.Salesperson4);
                    gridData.set("SalesSplitPercentage", jsonResult.SalesPercentage4);
                    break;
                case 5:
                    gridData.set("SalesPerson", jsonResult.SalespersonName5);
                    gridData.set("SalesPersonCode", jsonResult.Salesperson5);
                    gridData.set("SalesSplitPercentage", jsonResult.SalesPercentage5);
                    break;
                default:
                    break;
                }
            }
          
     
        } else {
            
            if (orderEntryUI.lastUpdatedColumn == "SalesPersonCode")
                saleSplitGridUI.resetFocus(gridData, "SalesPersonCode");
            else if (orderEntryUI.lastUpdatedColumn == "SalesSplitPercentage")
                saleSplitGridUI.resetFocus(gridData, "SalesSplitPercentage");
            sg.utls.showMessage(jsonResult);
            
        }
      
    },
    updateSalesperson: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage == null) {
            $("#message").empty();
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel.Data);
            var gridSalesSplit = $('#SalesSplitGrid').data("kendoGrid");
            orderEntryUI.SetSalespersonDetails(gridSalesSplit._data);
            orderEntryUI.initSalesSplitGrid();
            var grid = $('#SalesSplitGrid').data("kendoGrid");
            grid.dataSource.page(1);
        }
        sg.utls.showMessage(jsonResult);
    },
    SetTaxesAttribute: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage == null) {
            $("#message").empty();
                ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel.Data);
           
            orderEntryUI.initTaxesGrid(false);
            var grid = $('#orderTaxGrid').data("kendoGrid");
            grid.dataSource.page(1);
        }
        sg.utls.showMessage(jsonResult);
    },
    getCustomerDetail: function (jsonResult) {
        if (jsonResult != null && jsonResult.UserMessage != null && jsonResult.UserMessage.IsSuccess) {
            ko.mapping.fromJS(jsonResult, {}, orderEntryUI.orderEntryModel);
          }
        sg.utls.showMessage(jsonResult);
    },
    // call back event.
    callBackFunction: function(event) {
        if (event.data.Type == 'SageKendoiFrame') {
            if (event.data.Id == "Customer") {
                if (event.data.Data.CustomerId) {
                    orderEntryUI.orderEntryModel.Data.CustomerNumber(event.data.Data.CustomerId);
                    sg.utls.SyncExecute(orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.Customer));
                }
            } else if (event.data.Id == "ShipToLocation") {
                if (event.data.Data.shipToLocation) {
                    orderEntryUI.orderEntryModel.Data.ShipToLocationCode(event.data.Data.shipToLocation);
                    sg.utls.SyncExecute(orderEntryRepository.refreshHeader(sg.utls.ko.toJS(orderEntryUI.orderEntryModel.Data, orderEntryUI.computedProperties), orderEntryUI.headerRefreshType.shipToLoc));
                }
            }
        };
    },
};
var captionChange = function () {
    if ((orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.Success) || (orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.VoidPending)
        ||
        (orderEntryUI.orderEntryModel.disablePreAuth() == orderEntryEnum.TransactionStatus.Captured) || (orderEntryUI.orderEntryModel.disableQuickPreAuthorize == orderEntryEnum.TransactionStatus.Success)) {
        $("#btnPreAuthorized").val(orderEntryResources.VoidPreAuthorization);
        $("#btnPrepayment").val(orderEntryResources.Capture);
        // B-47632
        $("#btnQuickPreAuth").attr("disabled", true);
    } else {
        $("#btnPreAuthorized").val(orderEntryResources.PreAuthorization);
        $("#btnPrepayment").val(orderEntryResources.PrePayment);
        // B-47632
        if (orderEntryUI.orderEntryModel.isModelDirty.isDirty())
        $("#btnQuickPreAuth").attr("disabled", false);
    }

    // B-47632
    //if ((!orderEntryUI.orderEntryModel.disablePreAuth == orderEntryEnum.TransactionStatus.Success) &&
    //    (orderEntryUI.orderEntryModel.disablePreAuth > 0))
    //{

    //    $("#btnQuickPreAuth").attr("disabled", false);
    //}

};

var captionChangeAfterPrepayment= function () {
    if(orderEntryUI.orderEntryModel.Captured()==true ||orderEntryUI.Voided==true){
        $("#btnPreAuthorized").val(orderEntryResources.PreAuthorization);
        $("#btnPrepayment").val(orderEntryResources.PrePayment);
        $("#btnQuickPreAuth").attr("disabled", true);
    }
};

var updatePrepaymentButtons = function () {
    // disable QuickCharge on success or error
    // On error user has an option to use Charge button. 
    $("#btnQuickCharge").attr("disabled", true);

    if (orderEntryUI.orderEntryModel.Captured() == true)
    {
        // On success disable other buttons, make sure Void is active
        $("#btnCharge").attr("disabled", true);
        $("#btnDelete").attr("disabled", true);
        $("#btnSave").attr("disabled", true);
        $("#btnVoid").attr("disabled", false);
    }
};

var abc = abc || $(function () {

    console.log(orderEntryUI.orderEntryModel === null);

    if (!orderEntryUI.orderEntryModel) {
        return;
    };

    orderEntryUI.init();

    $(window).on('unload', function () {
        if (globalResource.AllowPageUnloadEvent) {
            sg.utls.releaseSession();
        }
    });
    $(window).bind('beforeunload', function () {
        if (globalResource.AllowPageUnloadEvent && orderEntryUI.orderEntryModel.isModelDirty.isDirty() && !orderEntryUI.orderEntryModel.Data.disable()) {

            //Pre-Payment confirmation message
            if (orderEntryUI.orderEntryModel.Data.OrderPrepayment.CreditCardChargeStatus() == orderEntryEnum.CreditCardChargeStatus.Charged) {
                return jQuery('<div />').html(orderEntryResources.MustSavePrepayWithChargedCreditCard).text();
            }

            //Pre-Authorization confirmation message
            if (orderEntryUI.preAuthorizationModel.OrderPreauthorization && orderEntryUI.preAuthorizationModel.OrderPreauthorization.TransactionStatus() == orderEntryEnum.TransactionStatus.Success) {
                return jQuery('<div />').html(orderEntryResources.MustSavePreauthorization).text();
            }

            //Tabs confrimation message
            return jQuery('<div />').html(jQuery.validator.format(globalResource.SaveConfirm2, orderEntryResources.OrderEntry)).text();
        }        
    });

    $(window).bind('click', function () {
        sg.utls.hideNotesCenter();
    });

    $(window).keyup(function (e) {
        var code = e.keyCode || e.which;
        // Tab key
        if (9 === code) {
            sg.utls.hideNotesCenter();
        }
    });

    //console.log(sg.utls.iFrameHelper.registerToReceiveMessage === undefined);
    sg.utls.iFrameHelper.registerToReceiveMessage(orderEntryUISuccess.callBackFunction);
});
